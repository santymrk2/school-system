import axios from 'axios';

export const BASE = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';
export const http = axios.create({ baseURL: BASE, withCredentials: true });

http.interceptors.request.use((config) => {
  const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null;
  if (token) {
    config.headers = config.headers || {};
    config.headers.Authorization = 'Bearer ' + token;
  }
  return config;
});

// DEBUG (solo si NEXT_PUBLIC_DEBUG)
if (process.env.NEXT_PUBLIC_DEBUG) {
  http.interceptors.response.use(
    (res) => {
      const method = (res.config && res.config.method ? res.config.method.toUpperCase() : 'GET');
      const url = (res.config && res.config.url) || '';
      // @ts-ignore
      const params = res.config && res.config.params;
      // eslint-disable-next-line no-console
      console.log('[API]', method, url, params ? { params } : '', '→', res.status,
        Array.isArray(res.data) ? '(items: ' + res.data.length + ')' : res.data);
      return res;
    },
    (err) => {
      const cfg = err && err.config;
      const method = (cfg && cfg.method ? cfg.method.toUpperCase() : '');
      const url = (cfg && cfg.url) || '';
      // eslint-disable-next-line no-console
      console.error('[API][ERR]', method, url, cfg && cfg.params ? { params: cfg.params } : '',
        '→', err?.response?.status, err?.response?.data ?? err?.message);
      return Promise.reject(err);
    }
  );
}
export * from "./http";

import * as auth from "./modules/auth";
import * as users from "./modules/users";
import * as calendario from "./modules/calendario";
import * as estructura from "./modules/estructura";
import * as docencia from "./modules/docencia";
import * as personas from "./modules/personas";
import * as matriculas from "./modules/matriculas";
import * as academico from "./modules/academico";
import * as asistencias from "./modules/asistencias";
import * as comunicados from "./modules/comunicados";
import * as finanzas from "./modules/finanzas";
import * as rrhh from "./modules/rrhh";
import * as actasAccidente from "./modules/actasAccidente";
import * as chat from "./modules/chat";
import * as aspirantes from "./modules/aspirantes";

export const api = {
  // auth “planos”
  login: auth.login,
  logout: auth.logout,
  me: auth.me,

  // users
  user: users.user,
  searchUsers: users.searchUsers,

  // calendario
  periodos: calendario.periodos,
  trimestres: calendario.trimestres,

  // estructura
  secciones: estructura.secciones,
  materias: estructura.materias,
  seccionMaterias: estructura.seccionMaterias,
  seccionesAlumnos: estructura.seccionesAlumnos,

  // docencia
  asignacionDocenteSeccion: docencia.asignacionDocenteSeccion,
  asignacionDocenteMateria: docencia.asignacionDocenteMateria,

  // personas
  alumnos: personas.alumnos,
  familiares: personas.familiares,
  alumnoFamiliares: personas.alumnoFamiliares,
  familiaresAlumnos: personas.familiaresAlumnos,

  // matrícula
  matriculas: matriculas.matriculas,
  matriculaSeccionHistorial: matriculas.matriculaSeccionHistorial,
  solicitudesBaja: matriculas.solicitudesBaja,

  // académico
  evaluaciones: academico.evaluaciones,
  resultadosEvaluacion: academico.resultados,
  calificaciones: academico.calificaciones,
  informes: academico.informes,

  // asistencias
  asistencias: asistencias.asistencias,
  detallesAsistencia: asistencias.detallesAsistencia,
  jornadasAsistencia: asistencias.jornadasAsistencia,
  diasNoHabiles: asistencias.diasNoHabiles,

  // comunicados
  comunicados: comunicados.comunicados,

  // finanzas
  emisionesCuota: finanzas.emisionesCuota,
  cuotas: finanzas.cuotas,
  pagosCuota: finanzas.pagosCuota,
  recibos: finanzas.recibos,

  // rrhh
  personal: rrhh.personal,
  licencias: rrhh.licencias,
  formaciones: rrhh.formaciones,

  // actas
  actasAccidente: actasAccidente.actasAccidente,

  // chat
  chat: chat.chat,

  // aspirantes
  aspirantes: aspirantes.aspirantes,
  solicitudesAdmision: aspirantes.solicitudesAdmision,
};
import { http } from '../http';
import type * as DTO from '@/types/api-generated';

export const actasAccidente = {
  list: () => http.get<DTO.ActaAccidenteDTO[]>('/api/actas-accidente'),
  byId: (id: number) => http.get<DTO.ActaAccidenteDTO>('/api/actas-accidente/' + id),
  create: (body: DTO.ActaAccidenteCreateDTO) => http.post<number>('/api/actas-accidente', body),
  update: (id: number, body: Partial<DTO.ActaAccidenteCreateDTO>) => http.put<number>('/api/actas-accidente/' + id, body),
  delete: (id: number) => http.delete<void>('/api/actas-accidente/' + id),
  searchAlumnos: (q: string) => http.get<DTO.ActaAccidenteDTO[]>('/api/actas-accidente/alumnos/search', { params: { q } }),
};
import { http } from "../http";
import type * as DTO from "@/types/api-generated";

export const evaluaciones = {
  list: () => http.get<DTO.EvaluacionDTO[]>("/api/evaluaciones"),
  byId: (id: number) => http.get<DTO.EvaluacionDTO>("/api/evaluaciones/" + id),
  create: (body: DTO.EvaluacionCreateDTO) =>
    http.post<number>("/api/evaluaciones", body),
  update: (id: number, body: Partial<DTO.EvaluacionCreateDTO>) =>
    http.put<number>("/api/evaluaciones/" + id, body),
  delete: (id: number) => http.delete<void>("/api/evaluaciones/" + id),
  search: (params: {
    seccionId?: number;
    trimestreId?: number;
    materiaId?: number;
  }) => http.get<DTO.EvaluacionDTO[]>("/api/evaluaciones", { params }),
};

export const resultados = {
  // GET /api/resultados  (el backend NO filtra; filtramos en el cliente)
  list: (params?: { evaluacionId?: number; matriculaId?: number }) =>
    http.get("/api/resultados", { params }),

  // POST /api/resultados
  create: (body: DTO.ResultadoEvaluacionCreateDTO) =>
    http.post("/api/resultados", body),
};
export const calificaciones = {
  list: () =>
    http.get<DTO.CalificacionTrimestralDTO[]>(
      "/api/calificaciones-trimestrales",
    ),
  create: (body: DTO.CalificacionTrimestralCreateDTO) =>
    http.post<number>("/api/calificaciones-trimestrales", body),
};

export const informes = {
  list: () => http.get<DTO.InformeInicialDTO[]>("/api/informes-inicial"),
  byId: (id: number) =>
    http.get<DTO.InformeInicialDTO>("/api/informes-inicial/" + id),
  create: (body: DTO.InformeInicialCreateDTO) =>
    http.post<number>("/api/informes-inicial", body),
  update: (id: number, body: Partial<DTO.InformeInicialCreateDTO>) =>
    http.put<number>("/api/informes-inicial/" + id, body),
  delete: (id: number) => http.delete<void>("/api/informes-inicial/" + id),
  byMatriculaId: (matriculaId: number) =>
    http.get<DTO.InformeInicialDTO[]>(
      "/api/informes-inicial?matriculaId=" + matriculaId,
    ),
};
import { http } from '../http';
import type * as DTO from '@/types/api-generated';

export const chat = {
  history: (otherUserId: number) => http.get<DTO.ChatMessageDTO[]>('/api/chat/history/' + otherUserId),
  markRead: (otherUserId: number) => http.post('/api/chat/mark-read/' + otherUserId),
  getActiveChats: () => http.get<DTO.UsuarioBusquedaDTO[]>('/api/chat/active-chats'),
  getUnreadCounts: () => http.get<Record<number, number>>('/api/chat/unread-count'),
};
import { http } from '../http';
import type * as DTO from '@/types/api-generated';

export const emisionesCuota = {
  list: () => http.get<DTO.EmisionCuotaDTO[]>('/api/emisiones-cuota'),
  create: (body: DTO.EmisionCuotaCreateDTO) => http.post<number>('/api/emisiones-cuota', body),
};

export const cuotas = {
  list: () => http.get<DTO.CuotaDTO[]>('/api/cuotas'),
  byId: (id: number) => http.get<DTO.CuotaDTO>('/api/cuotas/' + id),
  create: (body: DTO.CuotaCreateDTO) => http.post<number>('/api/cuotas', body),
  update: (id: number, body: Partial<DTO.CuotaCreateDTO>) => http.put<number>('/api/cuotas/' + id, body),
  delete: (id: number) => http.delete<void>('/api/cuotas/' + id),
};

export const pagosCuota = {
  list: () => http.get<DTO.PagoCuotaDTO[]>('/api/pagos-cuota'),
  byId: (id: number) => http.get<DTO.PagoCuotaDTO>('/api/pagos-cuota/' + id),
  create: (body: DTO.PagoCuotaCreateDTO) => http.post<number>('/api/pagos-cuota', body),
  updateEstado: (id: number, body: DTO.PagoCuotaEstadoUpdateDTO) => http.patch<void>('/api/pagos-cuota/' + id + '/estado', body),
  delete: (id: number) => http.delete<void>('/api/pagos-cuota/' + id),
};

export const recibos = {
  list: () => http.get<DTO.ReciboSueldoDTO[]>('/api/recibos-sueldo'),
  byId: (id: number) => http.get<DTO.ReciboSueldoDTO>('/api/recibos-sueldo/' + id),
  create: (body: Omit<DTO.ReciboSueldoDTO, 'id'>) => http.post<number>('/api/recibos-sueldo', body),
  update: (id: number, body: Partial<DTO.ReciboSueldoDTO>) => http.put<number>('/api/recibos-sueldo/' + id, body),
  delete: (id: number) => http.delete<void>('/api/recibos-sueldo/' + id),
};
import { http } from '../http';
import type * as DTO from '@/types/api-generated';

export const periodos = {
  list: () => http.get<DTO.PeriodoEscolarDTO[]>('/api/periodos'),
  create: (body: DTO.PeriodoEscolarCreateDTO) => http.post<number>('/api/periodos', body),
};

export const trimestres = {
  list: () => http.get<DTO.TrimestreDTO[]>('/api/trimestres'),
  create: (body: DTO.TrimestreCreateDTO) => http.post<number>('/api/trimestres', body),
  cerrar: (id: number) => http.post<void>('/api/trimestres/' + id + '/cerrar', {}),
  reabrir: (id: number) => http.post<void>('/api/trimestres/' + id + '/reabrir', {}),
};
import { http } from '../http';
import type * as DTO from '@/types/api-generated';

export const personal = {
  list: () => http.get<DTO.PersonalDTO[]>('/api/personal'),
  byId: (id: number) => http.get<DTO.PersonalDTO>('/api/personal/' + id),
  create: (body: DTO.PersonalCreateDTO) => http.post<number>('/api/personal', body),
  update: (id: number, body: DTO.PersonalUpdateDTO) => http.put<number>('/api/personal/' + id, body),
  delete: (id: number) => http.delete<void>('/api/personal/' + id),
};

export const licencias = {
  list: () => http.get<DTO.LicenciaDTO[]>('/api/licencias'),
  byId: (id: number) => http.get<DTO.LicenciaDTO>('/api/licencias/' + id),
  create: (body: DTO.LicenciaCreateDTO) => http.post<number>('/api/licencias', body),
  update: (id: number, body: Partial<DTO.LicenciaCreateDTO>) => http.put<number>('/api/licencias/' + id, body),
  delete: (id: number) => http.delete<void>('/api/licencias/' + id),
  byPersonalId: (personalId: number) => http.get<DTO.LicenciaDTO[]>('/api/licencias', { params: { personalId } }),
};

export const formaciones = {
  list: () => http.get<DTO.FormacionAcademicaDTO[]>('/api/formacion-academica'),
  byId: (id: number) => http.get<DTO.FormacionAcademicaDTO>('/api/formacion-academica/' + id),
  create: (body: Omit<DTO.FormacionAcademicaDTO, 'id'>) => http.post<number>('/api/formacion-academica', body),
  update: (id: number, body: Partial<DTO.FormacionAcademicaDTO>) => http.put<number>('/api/formacion-academica/' + id, body),
  delete: (id: number) => http.delete<void>('/api/formacion-academica/' + id),
};
import { http } from '../http';
import type * as DTO from '@/types/api-generated';

export const secciones = {
  list: () => http.get<DTO.SeccionDTO[]>('/api/secciones'),
  byId: (id: number) => http.get<DTO.SeccionDTO>('/api/secciones/' + id),
  create: (body: DTO.SeccionCreateDTO) => http.post<number>('/api/secciones', body),
  update: (id: number, body: Partial<DTO.SeccionCreateDTO>) => http.put<number>('/api/secciones/' + id, body),
  delete: (id: number) => http.delete<void>('/api/secciones/' + id),
  alumnos: (id: number, fecha?: string) =>
    http.get<DTO.AlumnoLiteDTO[]>('/api/secciones/' + id + '/alumnos', { params: { fecha } }),
};

export const materias = {
  list: () => http.get<DTO.MateriaDTO[]>('/api/materias'),
  byId: (id: number) => http.get<DTO.MateriaDTO>('/api/materias/' + id),
  create: (body: DTO.MateriaCreateDTO) => http.post<number>('/api/materias', body),
  update: (id: number, body: Partial<DTO.MateriaCreateDTO>) => http.put<number>('/api/materias/' + id, body),
  delete: (id: number) => http.delete<void>('/api/materias/' + id),
};

export const seccionMaterias = {
  list: () => http.get<DTO.SeccionMateriaDTO[]>('/api/secciones-materias'),
  create: (body: DTO.SeccionMateriaCreateDTO) => http.post<number>('/api/secciones-materias', body),
};

export const seccionesAlumnos = {
  bySeccionId: (id: number, fecha?: string) =>
    http.get<DTO.AlumnoLiteDTO[]>('/api/secciones/' + id + '/alumnos', { params: { fecha } }),
};
import { http } from '../http';
import type * as DTO from '@/types/api-generated';

export const matriculas = {
  list: () => http.get<DTO.MatriculaDTO[]>('/api/matriculas'),
  byId: (id: number) => http.get<DTO.MatriculaDTO>('/api/matriculas/' + id),
  create: (body: DTO.MatriculaCreateDTO) => http.post<number>('/api/matriculas', body),
  update: (id: number, body: Partial<DTO.MatriculaCreateDTO>) => http.put<number>('/api/matriculas/' + id, body),
  delete: (id: number) => http.delete<void>('/api/matriculas/' + id),
};

export const matriculaSeccionHistorial = {
  list: () => http.get<DTO.MatriculaSeccionHistorialDTO[]>('/api/matriculas/historial'),
  create: (body: DTO.MatriculaSeccionHistorialCreateDTO) => http.post<number>('/api/matriculas/historial', body),
};

export const solicitudesBaja = {
  list: () => http.get<DTO.SolicitudBajaAlumnoDTO[]>('/api/solicitudes-baja-alumno'),
  create: (body: DTO.SolicitudBajaAlumnoCreateDTO) => http.post<number>('/api/solicitudes-baja-alumno', body),
};
import { http } from '../http';
import type * as DTO from '@/types/api-generated';

export const asistencias = {
  historialSeccion: (seccionId: number, from: string, to: string) =>
    http.get<DTO.AsistenciaDiaDTO[]>('/api/asistencias/secciones/' + seccionId + '/historial', { params: { from, to } }),
  acumuladoSeccion: (seccionId: number, from: string, to: string) =>
    http.get<DTO.AsistenciaAcumuladoDTO>('/api/asistencias/secciones/' + seccionId + '/acumulado', { params: { from, to } }),
  resumenPorAlumno: (seccionId: number, from: string, to: string) =>
    http.get<DTO.AsistenciaAlumnoResumenDTO[]>('/api/asistencias/secciones/' + seccionId + '/alumnos-resumen', { params: { from, to } }),
};

export const detallesAsistencia = {
  list: () => http.get<DTO.DetalleAsistenciaDTO[]>('/api/asistencias/detalles'),
  byId: (id: number) => http.get<DTO.DetalleAsistenciaDTO>('/api/asistencias/detalles/' + id),
  create: (body: DTO.DetalleAsistenciaCreateDTO) => http.post<number>('/api/asistencias/detalles', body),
  delete: (id: number) => http.delete<void>('/api/asistencias/detalles/' + id),
  search: (params: { jornadaId?: number; matriculaId?: number; desde?: string; hasta?: string }) =>
    http.get<DTO.DetalleAsistenciaDTO[]>('/api/asistencias/detalles/search', { params }),
  byJornada: (jornadaId: number) =>
    http.get<DTO.DetalleAsistenciaDTO[]>('/api/asistencias/detalles/search', { params: { jornadaId } }),
  update: (id: number, body: Partial<Pick<DTO.DetalleAsistenciaDTO, 'estado' | 'observacion'>>) =>
    http.patch<void>('/api/asistencias/detalles/' + id, body),
};

export const jornadasAsistencia = {
  list: () => http.get<DTO.JornadaAsistenciaDTO[]>('/api/asistencias/jornadas'),
  byId: (id: number) => http.get<DTO.JornadaAsistenciaDTO>('/api/asistencias/jornadas/' + id),
  create: (body: DTO.JornadaAsistenciaCreateDTO) => http.post<number>('/api/asistencias/jornadas', body),
  delete: (id: number) => http.delete<void>('/api/asistencias/jornadas/' + id),
  search: (params: { seccionId?: number; from?: string; to?: string; trimestreId?: number; fecha?: string }) =>
    http.get<DTO.JornadaAsistenciaDTO[]>('/api/asistencias/jornadas', { params }),
  bySeccionFechaOne: (seccionId: number, fecha: string) =>
    http.get<DTO.JornadaAsistenciaDTO>('/api/asistencias/jornadas', { params: { seccionId, fecha } }),
};

export const diasNoHabiles = {
  list: () => http.get<DTO.DiaNoHabilDTO[]>('/api/dias-no-habiles'),
  create: (body: DTO.DiaNoHabilCreateDTO) => http.post<DTO.DiaNoHabilDTO>('/api/dias-no-habiles', body),
  delete: (id: number) => http.delete<void>('/api/dias-no-habiles/' + id),
};
import { http } from '../http';
import type * as DTO from '@/types/api-generated';

export const asignacionDocenteSeccion = {
  list: () => http.get<DTO.AsignacionDocenteSeccionDTO[]>('/api/asignaciones/seccion'),
  create: (body: DTO.AsignacionDocenteSeccionCreateDTO) => http.post<number>('/api/asignaciones/seccion', body),
  byPersonalVigentes: (personalId: number, fecha?: string) =>
    http.get<DTO.AsignacionDocenteSeccionDTO[]>('/api/asignaciones/seccion/vigentes', { params: { personalId, fecha } }),
  byPersonal: (personalId: number) =>
    http.get<DTO.AsignacionDocenteSeccionDTO[]>('/api/asignaciones/seccion/by-personal', { params: { personalId } }),
};

export const asignacionDocenteMateria = {
  list: () => http.get<DTO.AsignacionDocenteMateriaDTO[]>('/api/asignaciones/materia'),
  create: (body: DTO.AsignacionDocenteMateriaCreateDTO) => http.post<number>('/api/asignaciones/materia', body),
};
import { http } from '../http';
import type * as DTO from '@/types/api-generated';

export const user = {
  getById: (id: number) => http.get<DTO.Usuario>('/api/users/' + id),
};

export const searchUsers = (q: string) =>
  http.get<DTO.UsuarioBusquedaDTO[]>('/api/users/search', { params: { q } });
import { http } from '../http';
import type * as DTO from '@/types/api-generated';

export const aspirantes = {
  list: () => http.get<DTO.Aspirante[]>('/api/aspirantes'),
  byId: (id: number) => http.get<DTO.Aspirante>('/api/aspirantes/' + id),
  create: (body: Omit<DTO.Aspirante, 'id'>) => http.post<number>('/api/aspirantes', body),
  update: (id: number, body: Partial<DTO.Aspirante>) => http.put<number>('/api/aspirantes/' + id, body),
  delete: (id: number) => http.delete<void>('/api/aspirantes/' + id),
};

export const solicitudesAdmision = {
  list: () => http.get<DTO.SolicitudAdmision[]>('/api/solicitudes-admision'),
  byId: (id: number) => http.get<DTO.SolicitudAdmision>('/api/solicitudes-admision/' + id),
  create: (body: Omit<DTO.SolicitudAdmision, 'id'>) => http.post<number>('/api/solicitudes-admision', body),
  update: (id: number, body: Partial<DTO.SolicitudAdmision>) => http.put<number>('/api/solicitudes-admision/' + id, body),
  delete: (id: number) => http.delete<void>('/api/solicitudes-admision/' + id),
  byAspiranteId: (aspiranteId: number) => http.get<DTO.SolicitudAdmision[]>('/api/solicitudes-admision', { params: { aspiranteId } }),
};
import { http } from '../http';
import type * as DTO from '@/types/api-generated';

export const comunicados = {
  list: () => http.get<DTO.ComunicadoDTO[]>('/api/comunicados'),
  byId: (id: number) => http.get<DTO.ComunicadoDTO>('/api/comunicados/' + id),
  create: (body: DTO.ComunicadoCreateDTO) => http.post<number>('/api/comunicados', body),
  update: (id: number, body: Partial<DTO.ComunicadoCreateDTO>) => http.put<number>('/api/comunicados/' + id, body),
  delete: (id: number) => http.delete<void>('/api/comunicados/' + id),
};
import { http } from '../http';
import type * as DTO from '@/types/api-generated';

export const alumnos = {
  list: () => http.get<DTO.AlumnoDTO[]>('/api/alumnos'),
  byId: (id: number) => http.get<DTO.AlumnoDTO>('/api/alumnos/' + id),
  create: (body: DTO.AlumnoCreateDTO) => http.post<number>('/api/alumnos', body),
  update: (id: number, body: Partial<DTO.AlumnoCreateDTO>) => http.put<number>('/api/alumnos/' + id, body),
  delete: (id: number) => http.delete<void>('/api/alumnos/' + id),
};

export const familiares = {
  list: () => http.get<DTO.FamiliarDTO[]>('/api/familiares'),
  byId: (id: number) => http.get<DTO.FamiliarDTO>('/api/familiares/' + id),
  create: (body: DTO.FamiliarCreateDTO) => http.post<number>('/api/familiares', body),
  update: (id: number, body: Partial<DTO.FamiliarCreateDTO>) => http.put<number>('/api/familiares/' + id, body),
  delete: (id: number) => http.delete<void>('/api/familiares/' + id),
};

export const alumnoFamiliares = {
  list: () => http.get<DTO.AlumnoFamiliarDTO[]>('/api/alumnos-familiares'),
  byId: (id: number) => http.get<DTO.AlumnoFamiliarDTO>('/api/alumnos-familiares/' + id),
  create: (body: DTO.AlumnoFamiliarCreateDTO) => http.post<number>('/api/alumnos-familiares', body),
  update: (id: number, body: Partial<DTO.AlumnoFamiliarDTO>) => http.put<number>('/api/alumnos-familiares/' + id, body),
  delete: (id: number) => http.delete<void>('/api/alumnos-familiares/' + id),
};

export const familiaresAlumnos = {
  byFamiliarId: (familiarId: number) =>
    http.get<DTO.AlumnoLiteDTO[]>('/api/familiares/' + familiarId + '/alumnos'),
};
import { http } from '../http';
import type * as DTO from '@/types/api-generated';

export const login = (email: string, password: string) =>
  http.post<DTO.AuthResponse>('/api/auth/login', { email, password } as DTO.LoginRequest);

export const logout = () => http.post('/api/auth/logout');

export const me = () => http.get<DTO.UsuarioBusquedaDTO>('/api/auth/me');

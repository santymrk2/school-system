"use client";

import { useState } from "react";
import { DashboardLayout } from "@/app/dashboard/dashboard-layout";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Users,
  Plus,
  Search,
  Calendar,
  User,
  Briefcase,
  GraduationCap,
  Phone,
  Mail,
  MapPin,
  FileText,
  Clock,
  CheckCircle,
  AlertCircle,
} from "lucide-react";

import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/context/AuthContext";
import { UserRole } from "@/types/api-generated";

export default function PersonalPage() {
  const { loading, user, hasRole } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (loading) return;
    if (!user) return;
    if (!(hasRole(UserRole.DIRECTOR) || hasRole(UserRole.SECRETARY))) {
      router.replace("/dashboard");
    }
  }, [loading, user, hasRole, router]);

  const [selectedTab, setSelectedTab] = useState("listado");
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedFilter, setSelectedFilter] = useState("todos");

  const [personal] = useState([
    {
      id: 1,
      nombre: "Ana",
      apellido: "López",
      dni: "12345678",
      cuil: "20-12345678-9",
      email: "ana.lopez@ecep.edu.ar",
      telefono: "11-1234-5678",
      cargo: "Docente",
      nivel: "Primario",
      asignaturas: ["Matemática", "Ciencias"],
      grado: "4° A",
      situacion: "Activo",
      fechaIngreso: "2020-03-01",
      titulo: "Profesora en Matemática",
      institucion: "Universidad Nacional de Pilar",
    },
    {
      id: 2,
      nombre: "Clara",
      apellido: "Martínez",
      dni: "87654321",
      cuil: "27-87654321-4",
      email: "clara.martinez@ecep.edu.ar",
      telefono: "11-8765-4321",
      cargo: "Maestra",
      nivel: "Inicial",
      asignaturas: [],
      grado: "Sala 5",
      situacion: "Activo",
      fechaIngreso: "2019-03-01",
      titulo: "Maestra Jardinera",
      institucion: "Instituto Superior de Formación Docente",
    },
    {
      id: 3,
      nombre: "Carlos",
      apellido: "Rodríguez",
      dni: "11223344",
      cuil: "20-11223344-5",
      email: "carlos.rodriguez@ecep.edu.ar",
      telefono: "11-2233-4455",
      cargo: "Maestranza",
      nivel: "General",
      asignaturas: [],
      grado: "",
      situacion: "Licencia",
      fechaIngreso: "2021-08-15",
      titulo: "Secundario Completo",
      institucion: "Escuela Secundaria N° 1",
    },
  ]);

  const [licencias] = useState([
    {
      id: 1,
      personalId: 1,
      fechaInicio: "2025-01-15",
      fechaFin: "2025-01-17",
      tipo: "Enfermedad",
      justificada: true,
      horas: 24,
      motivo: "Gripe estacional",
    },
    {
      id: 2,
      personalId: 2,
      fechaInicio: "2025-01-10",
      fechaFin: "2025-01-10",
      tipo: "Personal",
      justificada: false,
      horas: 8,
      motivo: "Trámite personal",
    },
  ]);

  const filteredPersonal = personal.filter((persona) => {
    const matchesSearch = `${persona.nombre} ${persona.apellido}`
      .toLowerCase()
      .includes(searchTerm.toLowerCase());
    const matchesFilter =
      selectedFilter === "todos" ||
      (selectedFilter === "inicial" && persona.nivel === "Inicial") ||
      (selectedFilter === "primario" && persona.nivel === "Primario") ||
      (selectedFilter === "activo" && persona.situacion === "Activo") ||
      (selectedFilter === "licencia" && persona.situacion === "Licencia");
    return matchesSearch && matchesFilter;
  });

  const getSituacionBadge = (situacion: string) => {
    switch (situacion) {
      case "Activo":
        return (
          <Badge variant="default">
            <CheckCircle className="h-3 w-3 mr-1" />
            Activo
          </Badge>
        );
      case "Licencia":
        return (
          <Badge variant="secondary">
            <Clock className="h-3 w-3 mr-1" />
            En Licencia
          </Badge>
        );
      case "Baja":
        return (
          <Badge variant="destructive">
            <AlertCircle className="h-3 w-3 mr-1" />
            Baja
          </Badge>
        );
      default:
        return <Badge variant="outline">{situacion}</Badge>;
    }
  };

  return (
    <DashboardLayout>
      <div className="flex-1 space-y-4 p-4 md:p-8 pt-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-3xl font-bold tracking-tight">
              Gestión de Personal
            </h2>
            <p className="text-muted-foreground">
              Administración del personal docente y no docente
            </p>
          </div>
          <Dialog>
            <DialogTrigger asChild>
              <Button>
                <Plus className="h-4 w-4 mr-2" />
                Añadir Profesor
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>Añadir Nuevo Personal</DialogTitle>
                <DialogDescription>
                  Complete la información del nuevo miembro del personal
                </DialogDescription>
              </DialogHeader>
              <div className="space-y-6">
                {/* Datos Personales */}
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Datos Personales</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label>Nombres</Label>
                      <Input placeholder="Nombres" />
                    </div>
                    <div>
                      <Label>Apellidos</Label>
                      <Input placeholder="Apellidos" />
                    </div>
                    <div>
                      <Label>DNI</Label>
                      <Input placeholder="12345678" />
                    </div>
                    <div>
                      <Label>CUIL</Label>
                      <Input placeholder="20-12345678-9" />
                    </div>
                    <div>
                      <Label>Fecha de Nacimiento</Label>
                      <Input type="date" />
                    </div>
                    <div>
                      <Label>Género</Label>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Seleccione género" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="masculino">Masculino</SelectItem>
                          <SelectItem value="femenino">Femenino</SelectItem>
                          <SelectItem value="otro">Otro</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label>Estado Civil</Label>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Seleccione estado civil" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="soltero">Soltero/a</SelectItem>
                          <SelectItem value="casado">Casado/a</SelectItem>
                          <SelectItem value="divorciado">
                            Divorciado/a
                          </SelectItem>
                          <SelectItem value="viudo">Viudo/a</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label>Nacionalidad</Label>
                      <Input placeholder="Argentina" />
                    </div>
                  </div>
                </div>

                {/* Información de Contacto */}
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">
                    Información de Contacto
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="md:col-span-2">
                      <Label>Domicilio Completo</Label>
                      <Input placeholder="Dirección completa" />
                    </div>
                    <div>
                      <Label>Teléfono</Label>
                      <Input placeholder="11-1234-5678" />
                    </div>
                    <div>
                      <Label>Celular</Label>
                      <Input placeholder="11-9876-5432" />
                    </div>
                    <div className="md:col-span-2">
                      <Label>Correo Electrónico</Label>
                      <Input type="email" placeholder="nombre@ecep.edu.ar" />
                    </div>
                  </div>
                </div>

                {/* Datos Laborales */}
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Datos Laborales</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label>Legajo</Label>
                      <Input placeholder="Número de legajo" />
                    </div>
                    <div>
                      <Label>Fecha de Ingreso</Label>
                      <Input type="date" />
                    </div>
                    <div>
                      <Label>Condición Laboral</Label>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Seleccione condición" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="principal">Principal</SelectItem>
                          <SelectItem value="suplente">Suplente</SelectItem>
                          <SelectItem value="interino">Interino</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label>Cargo Actual</Label>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Seleccione cargo" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="maestro">Maestro</SelectItem>
                          <SelectItem value="profesor">Profesor</SelectItem>
                          <SelectItem value="maestranza">Maestranza</SelectItem>
                          <SelectItem value="administrativo">
                            Administrativo
                          </SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label>Asignaturas (si corresponde)</Label>
                      <Input placeholder="Matemática, Ciencias" />
                    </div>
                    <div>
                      <Label>Grado/Sala (si corresponde)</Label>
                      <Input placeholder="4° A, Sala 5" />
                    </div>
                  </div>
                </div>

                {/* Formación Académica */}
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Formación Académica</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label>Título Principal</Label>
                      <Input placeholder="Profesor en Matemática" />
                    </div>
                    <div>
                      <Label>Institución</Label>
                      <Input placeholder="Universidad Nacional de Pilar" />
                    </div>
                    <div>
                      <Label>Otros Títulos</Label>
                      <Textarea
                        placeholder="Otros títulos obtenidos..."
                        rows={2}
                      />
                    </div>
                    <div>
                      <Label>Especializaciones</Label>
                      <Textarea
                        placeholder="Especializaciones y cursos..."
                        rows={2}
                      />
                    </div>
                  </div>
                </div>

                {/* Otros Campos */}
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Información Adicional</h3>
                  <div className="space-y-4">
                    <div>
                      <Label>Antecedentes Laborales</Label>
                      <Textarea
                        placeholder="Experiencia laboral previa..."
                        rows={3}
                      />
                    </div>
                    <div>
                      <Label>Observaciones</Label>
                      <Textarea
                        placeholder="Observaciones adicionales..."
                        rows={2}
                      />
                    </div>
                  </div>
                </div>

                <div className="flex space-x-2">
                  <Button variant="outline" className="flex-1">
                    Cancelar
                  </Button>
                  <Button className="flex-1">Guardar Personal</Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>

        {/* Tabs */}
        <Tabs
          value={selectedTab}
          onValueChange={setSelectedTab}
          className="space-y-4"
        >
          <TabsList>
            <TabsTrigger value="listado">Listado de Personal</TabsTrigger>
            <TabsTrigger value="licencias">Licencias</TabsTrigger>
          </TabsList>

          <TabsContent value="listado" className="space-y-4">
            {/* Filtros */}
            <div className="flex items-center space-x-4">
              <div className="relative flex-1 max-w-sm">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Buscar por nombre..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
              <Select value={selectedFilter} onValueChange={setSelectedFilter}>
                <SelectTrigger className="w-48">
                  <SelectValue placeholder="Filtrar por..." />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="todos">Todos</SelectItem>
                  <SelectItem value="inicial">Nivel Inicial</SelectItem>
                  <SelectItem value="primario">Nivel Primario</SelectItem>
                  <SelectItem value="activo">Activos</SelectItem>
                  <SelectItem value="licencia">En Licencia</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* Lista de Personal */}
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              {filteredPersonal.map((persona) => (
                <Card
                  key={persona.id}
                  className="hover:shadow-md transition-shadow"
                >
                  <CardHeader className="pb-3">
                    <div className="flex items-center justify-between">
                      <CardTitle className="text-lg">
                        {persona.nombre} {persona.apellido}
                      </CardTitle>
                      {getSituacionBadge(persona.situacion)}
                    </div>
                    <CardDescription>
                      {persona.cargo} - {persona.nivel}
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div className="space-y-2 text-sm">
                      <div className="flex items-center">
                        <Mail className="h-4 w-4 mr-2 text-gray-400" />
                        {persona.email}
                      </div>
                      <div className="flex items-center">
                        <Phone className="h-4 w-4 mr-2 text-gray-400" />
                        {persona.telefono}
                      </div>
                      {persona.grado && (
                        <div className="flex items-center">
                          <Briefcase className="h-4 w-4 mr-2 text-gray-400" />
                          {persona.grado}
                        </div>
                      )}
                      {persona.asignaturas.length > 0 && (
                        <div className="flex items-center">
                          <GraduationCap className="h-4 w-4 mr-2 text-gray-400" />
                          {persona.asignaturas.join(", ")}
                        </div>
                      )}
                    </div>

                    <Dialog>
                      <DialogTrigger asChild>
                        <Button variant="outline" size="sm" className="w-full">
                          <User className="h-4 w-4 mr-2" />
                          Ver Perfil Completo
                        </Button>
                      </DialogTrigger>
                      <DialogContent className="max-w-2xl">
                        <DialogHeader>
                          <DialogTitle>
                            {persona.nombre} {persona.apellido}
                          </DialogTitle>
                          <DialogDescription>
                            Información completa del personal
                          </DialogDescription>
                        </DialogHeader>
                        <div className="space-y-4">
                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <h4 className="font-medium">Datos Personales</h4>
                              <p className="text-sm text-gray-600">
                                DNI: {persona.dni}
                              </p>
                              <p className="text-sm text-gray-600">
                                CUIL: {persona.cuil}
                              </p>
                              <p className="text-sm text-gray-600">
                                Email: {persona.email}
                              </p>
                              <p className="text-sm text-gray-600">
                                Teléfono: {persona.telefono}
                              </p>
                            </div>
                            <div>
                              <h4 className="font-medium">Datos Laborales</h4>
                              <p className="text-sm text-gray-600">
                                Cargo: {persona.cargo}
                              </p>
                              <p className="text-sm text-gray-600">
                                Nivel: {persona.nivel}
                              </p>
                              <p className="text-sm text-gray-600">
                                Ingreso: {persona.fechaIngreso}
                              </p>
                              <p className="text-sm text-gray-600">
                                Situación: {persona.situacion}
                              </p>
                            </div>
                          </div>

                          <div>
                            <h4 className="font-medium">Formación</h4>
                            <p className="text-sm text-gray-600">
                              {persona.titulo}
                            </p>
                            <p className="text-sm text-gray-600">
                              {persona.institucion}
                            </p>
                          </div>

                          <div>
                            <h4 className="font-medium">Licencias Recientes</h4>
                            <div className="space-y-2">
                              {licencias
                                .filter((l) => l.personalId === persona.id)
                                .map((licencia) => (
                                  <div
                                    key={licencia.id}
                                    className="flex justify-between text-sm p-2 bg-gray-50 rounded"
                                  >
                                    <span>
                                      {licencia.fechaInicio} - {licencia.tipo}
                                    </span>
                                    <Badge
                                      variant={
                                        licencia.justificada
                                          ? "default"
                                          : "secondary"
                                      }
                                    >
                                      {licencia.justificada
                                        ? "Justificada"
                                        : "No Justificada"}
                                    </Badge>
                                  </div>
                                ))}
                            </div>
                          </div>
                        </div>
                      </DialogContent>
                    </Dialog>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="licencias" className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium">Gestión de Licencias</h3>
              <Dialog>
                <DialogTrigger asChild>
                  <Button>
                    <Plus className="h-4 w-4 mr-2" />
                    Nueva Licencia
                  </Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>Registrar Nueva Licencia</DialogTitle>
                    <DialogDescription>
                      Complete la información de la licencia
                    </DialogDescription>
                  </DialogHeader>
                  <div className="space-y-4">
                    <div>
                      <Label>Seleccionar Profesor</Label>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Seleccione un profesor" />
                        </SelectTrigger>
                        <SelectContent>
                          {personal.map((persona) => (
                            <SelectItem
                              key={persona.id}
                              value={persona.id.toString()}
                            >
                              {persona.nombre} {persona.apellido}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label>Fecha de Inicio</Label>
                        <Input type="date" />
                      </div>
                      <div>
                        <Label>Fecha de Fin</Label>
                        <Input type="date" />
                      </div>
                    </div>

                    <div>
                      <Label>Tipo de Licencia</Label>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Seleccione tipo" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="enfermedad">Enfermedad</SelectItem>
                          <SelectItem value="personal">Personal</SelectItem>
                          <SelectItem value="familiar">
                            Cuidado Familiar
                          </SelectItem>
                          <SelectItem value="formacion">Formación</SelectItem>
                          <SelectItem value="maternidad">Maternidad</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <Label>¿Está Justificada?</Label>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Seleccione" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="si">Sí</SelectItem>
                          <SelectItem value="no">No</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <Label>Motivo</Label>
                      <Textarea
                        placeholder="Describa el motivo de la licencia..."
                        rows={3}
                      />
                    </div>

                    <div className="flex space-x-2">
                      <Button variant="outline" className="flex-1">
                        Cancelar
                      </Button>
                      <Button className="flex-1">Registrar Licencia</Button>
                    </div>
                  </div>
                </DialogContent>
              </Dialog>
            </div>

            <Card>
              <CardHeader>
                <CardTitle>Licencias Registradas</CardTitle>
                <CardDescription>
                  Historial de licencias del personal
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {licencias.map((licencia) => {
                    const persona = personal.find(
                      (p) => p.id === licencia.personalId,
                    );
                    return (
                      <div
                        key={licencia.id}
                        className="flex items-center justify-between p-3 border rounded-lg"
                      >
                        <div>
                          <p className="font-medium">
                            {persona?.nombre} {persona?.apellido}
                          </p>
                          <p className="text-sm text-gray-600">
                            {licencia.fechaInicio} - {licencia.fechaFin} (
                            {licencia.horas}hs)
                          </p>
                          <p className="text-sm text-gray-600">
                            {licencia.motivo}
                          </p>
                        </div>
                        <div className="text-right">
                          <Badge variant="outline">{licencia.tipo}</Badge>
                          <div className="mt-1">
                            <Badge
                              variant={
                                licencia.justificada ? "default" : "secondary"
                              }
                            >
                              {licencia.justificada
                                ? "Justificada"
                                : "No Justificada"}
                            </Badge>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </DashboardLayout>
  );
}
"use client";

import { useEffect, useMemo, useState } from "react";
import { api } from "@/services/api";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Megaphone, Loader2 } from "lucide-react";
import { useViewerScope } from "@/hooks/scope/useViewerScope";
import { useScopedSecciones } from "@/hooks/scope/useScopedSecciones";
import { useActivePeriod } from "@/hooks/scope/useActivePeriod";

type Props = {
  open?: boolean;
  onOpenChange?: (v: boolean) => void;
  onCreated?: () => void;
  asButton?: boolean;
};

type SeccionLite = {
  id: number;
  gradoSala?: string;
  division?: string;
  turno?: string;
  nombre?: string;
  nivel?: string; // INICIAL | PRIMARIO
};

export default function NewComunicadoDialog({
  open,
  onOpenChange,
  onCreated,
  asButton,
}: Props) {
  const { roles } = useViewerScope();
  const isDirector = roles.includes("DIRECTOR");
  const isAdmin = roles.includes("ADMIN");
  const isSecret = roles.includes("SECRETARY");
  const isTeacher = roles.includes("TEACHER");
  const isAdminLike = isDirector || isAdmin || isSecret;

  const { periodoEscolarId } = useActivePeriod();
  const { secciones } = useScopedSecciones({
    periodoEscolarId: periodoEscolarId ?? undefined,
  });

  const canCreate = isAdminLike || isTeacher;
  if (!canCreate) return null;

  const [isOpen, setIsOpen] = useState(!!open);
  useEffect(() => {
    if (open !== undefined) setIsOpen(open);
  }, [open]);
  const changeOpen = (v: boolean) => {
    if (onOpenChange) onOpenChange(v);
    else setIsOpen(v);
  };

  const alcanceOptions = useMemo(() => {
    if (isAdminLike)
      return ["INSTITUCIONAL", "POR_NIVEL", "POR_SECCION"] as const;
    return ["POR_SECCION"] as const;
  }, [isAdminLike]);

  const [alcance, setAlcance] = useState<
    "INSTITUCIONAL" | "POR_NIVEL" | "POR_SECCION"
  >(alcanceOptions[0]!);
  const [nivel, setNivel] = useState<"INICIAL" | "PRIMARIO" | "">("");
  const [seccionId, setSeccionId] = useState<string>("");
  const [titulo, setTitulo] = useState("");
  const [cuerpo, setCuerpo] = useState("");
  const [submitting, setSubmitting] = useState(false);

  const seccionOptions = useMemo(() => {
    return (secciones ?? []).map((s: SeccionLite) => ({
      id: s.id,
      label:
        (`${s.gradoSala ?? ""} ${s.division ?? ""}`.trim() ||
          s.nombre ||
          `Sección #${s.id}`) + (s.turno ? ` (${s.turno})` : ""),
    }));
  }, [secciones]);

  useEffect(() => {
    if (!isOpen) return;
    // reset al abrir
    setAlcance(alcanceOptions[0]!);
    setNivel("");
    setSeccionId("");
    setTitulo("");
    setCuerpo("");
  }, [isOpen, alcanceOptions]);

  const canSend = useMemo(() => {
    if (!titulo.trim() || !cuerpo.trim()) return false;
    if (alcance === "POR_NIVEL" && !nivel) return false;
    if (alcance === "POR_SECCION" && !seccionId) return false;
    return true;
  }, [alcance, nivel, seccionId, titulo, cuerpo]);

  const send = async () => {
    setSubmitting(true);
    try {
      await api.comunicados.create({
        alcance,
        nivel: alcance === "POR_NIVEL" ? (nivel as any) : undefined,
        seccionId: alcance === "POR_SECCION" ? Number(seccionId) : undefined,
        titulo,
        cuerpo,
        // 🚫 sin programación: no enviamos fechaProgPublicacion
      });
      changeOpen(false);
      onCreated?.();
    } catch (e: any) {
      alert(
        e?.response?.data?.message ??
          e?.message ??
          "No se pudo crear el comunicado",
      );
    } finally {
      setSubmitting(false);
    }
  };

  // como botón lanzador
  if (asButton) {
    return (
      <Dialog open={isOpen} onOpenChange={changeOpen}>
        <DialogTrigger asChild>
          <Button onClick={() => changeOpen(true)}>
            <Megaphone className="h-4 w-4 mr-1" /> Nuevo Comunicado
          </Button>
        </DialogTrigger>
        <DialogInner
          alcance={alcance}
          setAlcance={setAlcance}
          alcanceOptions={alcanceOptions as any}
          nivel={nivel}
          setNivel={setNivel}
          seccionId={seccionId}
          setSeccionId={setSeccionId}
          seccionOptions={seccionOptions}
          titulo={titulo}
          setTitulo={setTitulo}
          cuerpo={cuerpo}
          setCuerpo={setCuerpo}
          canSend={canSend}
          submitting={submitting}
          onConfirm={send}
          onClose={() => changeOpen(false)}
        />
      </Dialog>
    );
  }

  // modo controlado
  return (
    <Dialog open={isOpen} onOpenChange={changeOpen}>
      <DialogInner
        alcance={alcance}
        setAlcance={setAlcance}
        alcanceOptions={alcanceOptions as any}
        nivel={nivel}
        setNivel={setNivel}
        seccionId={seccionId}
        setSeccionId={setSeccionId}
        seccionOptions={seccionOptions}
        titulo={titulo}
        setTitulo={setTitulo}
        cuerpo={cuerpo}
        setCuerpo={setCuerpo}
        canSend={canSend}
        submitting={submitting}
        onConfirm={send}
        onClose={() => changeOpen(false)}
      />
    </Dialog>
  );
}

function DialogInner(props: {
  alcance: "INSTITUCIONAL" | "POR_NIVEL" | "POR_SECCION";
  setAlcance: (v: "INSTITUCIONAL" | "POR_NIVEL" | "POR_SECCION") => void;
  alcanceOptions: readonly ("INSTITUCIONAL" | "POR_NIVEL" | "POR_SECCION")[];
  nivel: "INICIAL" | "PRIMARIO" | "";
  setNivel: (v: "INICIAL" | "PRIMARIO" | "") => void;
  seccionId: string;
  setSeccionId: (v: string) => void;
  seccionOptions: Array<{ id: number; label: string }>;
  titulo: string;
  setTitulo: (v: string) => void;
  cuerpo: string;
  setCuerpo: (v: string) => void;
  canSend: boolean;
  submitting: boolean;
  onConfirm: () => void;
  onClose: () => void;
}) {
  const {
    alcance,
    setAlcance,
    alcanceOptions,
    nivel,
    setNivel,
    seccionId,
    setSeccionId,
    seccionOptions,
    titulo,
    setTitulo,
    cuerpo,
    setCuerpo,
    canSend,
    submitting,
    onConfirm,
    onClose,
  } = props;

  return (
    <DialogContent className="max-w-2xl">
      <DialogHeader>
        <DialogTitle>Nuevo Comunicado</DialogTitle>
        <DialogDescription>
          Enviá una comunicación institucional o dirigida.
        </DialogDescription>
      </DialogHeader>

      <div className="space-y-3">
        <Input
          placeholder="Título"
          value={titulo}
          onChange={(e) => setTitulo(e.target.value)}
        />
        <Textarea
          rows={6}
          placeholder="Cuerpo del mensaje"
          value={cuerpo}
          onChange={(e) => setCuerpo(e.target.value)}
        />

        <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
          <div className="md:col-span-1">
            <Select
              value={alcance}
              onValueChange={(v) =>
                setAlcance(v as "INSTITUCIONAL" | "POR_NIVEL" | "POR_SECCION")
              }
            >
              <SelectTrigger>
                <SelectValue placeholder="Alcance" />
              </SelectTrigger>
              <SelectContent>
                {alcanceOptions.map((opt) => (
                  <SelectItem key={opt} value={opt}>
                    {opt === "INSTITUCIONAL"
                      ? "Institucional"
                      : opt === "POR_NIVEL"
                        ? "Por nivel"
                        : "Por sección"}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {alcance === "POR_NIVEL" && (
            <div className="md:col-span-2">
              <Select
                value={nivel}
                onValueChange={(v) => setNivel(v as "INICIAL" | "PRIMARIO")}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Seleccioná nivel" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="INICIAL">Inicial</SelectItem>
                  <SelectItem value="PRIMARIO">Primario</SelectItem>
                </SelectContent>
              </Select>
            </div>
          )}

          {alcance === "POR_SECCION" && (
            <div className="md:col-span-2">
              <Select value={seccionId} onValueChange={setSeccionId}>
                <SelectTrigger>
                  <SelectValue placeholder="Seleccioná sección" />
                </SelectTrigger>
                <SelectContent>
                  {seccionOptions.map((o) => (
                    <SelectItem key={o.id} value={String(o.id)}>
                      {o.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          )}
        </div>

        <div className="flex justify-end gap-2">
          <AlertDialog>
            <AlertDialogTrigger asChild>
              <Button disabled={!canSend || submitting}>
                {submitting ? (
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                ) : null}
                Publicar
              </Button>
            </AlertDialogTrigger>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>Confirmar envío</AlertDialogTitle>
                <AlertDialogDescription>
                  ¿Publicar este comunicado? Será visible para los destinatarios
                  definidos.
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel>Cancelar</AlertDialogCancel>
                <AlertDialogAction onClick={onConfirm}>
                  Confirmar y publicar
                </AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>

          <Button variant="outline" onClick={onClose}>
            Cerrar
          </Button>
        </div>
      </div>
    </DialogContent>
  );
}
"use client";

import { useEffect, useMemo, useState } from "react";
import { DashboardLayout } from "@/app/dashboard/dashboard-layout";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Megaphone, Trash2, Eye } from "lucide-react";
import { api } from "@/services/api";
import { useViewerScope } from "@/hooks/scope/useViewerScope";
import { useActivePeriod } from "@/hooks/scope/useActivePeriod";
import { useScopedSecciones } from "@/hooks/scope/useScopedSecciones";
import { useFamilyAlumnos } from "@/hooks/useFamilyAlumnos";
import NewComunicadoDialog from "./_components/NewComunicadoDialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";

type ComunicadoDTO = {
  id: number;
  alcance: "INSTITUCIONAL" | "POR_NIVEL" | "POR_SECCION";
  seccionId?: number | null;
  nivel?: "INICIAL" | "PRIMARIO" | null;
  titulo: string;
  cuerpo: string;
  publicado: boolean; // lo ignoramos visualmente
};

type SeccionLite = {
  id: number;
  nombre?: string | null;
  gradoSala?: string | null;
  division?: string | null;
  turno?: string | null;
  nivel?: string | null; // "INICIAL" | "PRIMARIO"
};

function nivelEnumFromSeccion(s: any): "INICIAL" | "PRIMARIO" {
  const n = (s?.nivel ?? "").toString().toUpperCase();
  return n === "PRIMARIO" ? "PRIMARIO" : "INICIAL";
}

function preview(text: string, max = 220) {
  const clean = (text ?? "").replace(/\s+/g, " ").trim();
  return clean.length <= max ? clean : clean.slice(0, max) + "…";
}

export default function ComunicadosPage() {
  const { type, roles } = useViewerScope();

  const isDirector = roles.includes("DIRECTOR");
  const isAdmin = roles.includes("ADMIN");
  const isSecret = roles.includes("SECRETARY");
  const isTeacher = roles.includes("TEACHER");
  const isAdminLike = isDirector || isAdmin || isSecret;
  const canCreate = isAdminLike || isTeacher;

  const { periodoEscolarId } = useActivePeriod();
  const { secciones } = useScopedSecciones({
    periodoEscolarId: periodoEscolarId ?? undefined,
  });
  const { alumnos: hijos } = useFamilyAlumnos();

  const [loading, setLoading] = useState(true);
  const [comunicados, setComunicados] = useState<ComunicadoDTO[]>([]);
  const [q, setQ] = useState("");

  // nombres de sección
  const [allSecciones, setAllSecciones] = useState<SeccionLite[]>([]);
  const seccionNameById = useMemo(() => {
    const m = new Map<number, string>();
    for (const s of allSecciones) {
      const label =
        `${s.gradoSala ?? ""} ${s.division ?? ""}`.trim() ||
        s.nombre ||
        `Sección #${s.id}`;
      m.set(s.id, `${label}${s.turno ? ` (${s.turno})` : ""}`);
    }
    return m;
  }, [allSecciones]);

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        const [res, secs] = await Promise.all([
          api.comunicados.list(),
          api.secciones.list(),
        ]);
        if (!alive) return;
        setComunicados(res.data ?? []);
        setAllSecciones(secs.data ?? []);
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, []);

  // destinos del usuario
  const misSeccionesIds = useMemo(() => {
    if (type === "teacher")
      return new Set<number>(secciones.map((s: any) => s.id));
    if (type === "family") {
      const ids = (hijos ?? [])
        .map((h: any) => h?.seccionActual?.id)
        .filter(Boolean);
      return new Set<number>(ids);
    }
    if (type === "student") {
      const id = (hijos as any)?.[0]?.seccionActual?.id;
      return new Set<number>(id ? [id] : []);
    }
    return new Set<number>();
  }, [type, secciones, hijos]);

  const misNiveles = useMemo(() => {
    const niveles: Array<"INICIAL" | "PRIMARIO"> = [];
    if (type === "teacher") {
      for (const s of secciones) niveles.push(nivelEnumFromSeccion(s));
    } else if (type === "family" || type === "student") {
      for (const h of hijos ?? [])
        niveles.push(nivelEnumFromSeccion(h?.seccionActual ?? {}));
    }
    return new Set<string>(niveles);
  }, [type, secciones, hijos]);

  // feed “para mí”
  const visibles = useMemo(() => {
    return (comunicados ?? []).filter((c) => {
      if (c.alcance === "INSTITUCIONAL") return true;
      if (c.alcance === "POR_NIVEL")
        return !!c.nivel && misNiveles.has(c.nivel);
      if (c.alcance === "POR_SECCION")
        return !!c.seccionId && misSeccionesIds.has(c.seccionId);
      return false;
    });
  }, [comunicados, misNiveles, misSeccionesIds]);

  // búsqueda
  const lista = useMemo(() => {
    const base = visibles;
    const term = q.trim().toLowerCase();
    const filtered = !term
      ? base
      : base.filter(
          (c) =>
            (c.titulo ?? "").toLowerCase().includes(term) ||
            (c.cuerpo ?? "").toLowerCase().includes(term) ||
            (c.alcance ?? "").toLowerCase().includes(term) ||
            String(c.seccionId ?? "").includes(term) ||
            String(c.nivel ?? "")
              .toLowerCase()
              .includes(term),
        );
    return filtered;
  }, [visibles, q]);

  const refresh = async () => {
    const res = await api.comunicados.list();
    setComunicados(res.data ?? []);
  };

  const mySeccionIds = useMemo(
    () => new Set<number>(secciones.map((s: any) => s.id)),
    [secciones],
  );

  function canDeleteCom(c: ComunicadoDTO): boolean {
    if (isAdminLike) return true;
    if (isTeacher && c.alcance === "POR_SECCION" && c.seccionId) {
      return mySeccionIds.has(c.seccionId);
    }
    return false;
  }

  async function handleDelete(id: number) {
    try {
      await api.comunicados.delete(id);
      await refresh();
    } catch (e: any) {
      alert(
        e?.response?.data?.message ??
          e?.message ??
          "No se pudo eliminar el comunicado",
      );
    }
  }

  // diálogo de detalle
  const [selected, setSelected] = useState<ComunicadoDTO | null>(null);

  return (
    <DashboardLayout>
      <div className="flex-1 space-y-6 p-4 md:p-8 pt-6">
        {/* Header */}
        <div className="flex items-center justify-between gap-3">
          <div>
            <h2 className="text-3xl font-bold tracking-tight">Comunicados</h2>
            <div className="text-sm text-muted-foreground">
              Avisos institucionales y dirigidos a tus niveles/secciones
            </div>
          </div>

          <div className="flex items-center gap-2">
            {canCreate && <NewComunicadoDialog asButton onCreated={refresh} />}
          </div>
        </div>

        {/* Buscador */}
        <div className="flex items-center justify-between">
          <div className="w-full max-w-sm">
            <Input
              placeholder="Buscar comunicado…"
              value={q}
              onChange={(e) => setQ(e.target.value)}
            />
          </div>
        </div>

        {/* Feed */}
        {loading ? (
          <Card>
            <CardContent className="p-6 text-sm text-muted-foreground">
              Cargando…
            </CardContent>
          </Card>
        ) : (
          <FeedList
            items={lista}
            seccionNameById={seccionNameById}
            canDelete={canDeleteCom}
            onDelete={handleDelete}
            onOpen={(c) => setSelected(c)}
          />
        )}

        {/* Dialog detalle */}
        <Dialog open={!!selected} onOpenChange={(o) => !o && setSelected(null)}>
          <DialogContent className="max-w-3xl">
            {selected && (
              <>
                <DialogHeader>
                  <DialogTitle className="text-2xl">
                    {selected.titulo}
                  </DialogTitle>
                  {/* ⚠️ NO usar DialogDescription aquí: renderiza <p> */}
                  <div className="text-sm text-muted-foreground flex items-center gap-2 mt-1">
                    <TipoBadge c={selected} seccionNameById={seccionNameById} />
                  </div>
                </DialogHeader>

                <div className="whitespace-pre-wrap text-base leading-relaxed">
                  {selected.cuerpo}
                </div>

                {canDeleteCom(selected) && (
                  <div className="flex justify-end">
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button variant="outline">
                          <Trash2 className="h-4 w-4 mr-2" />
                          Eliminar
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent>
                        <AlertDialogHeader>
                          <AlertDialogTitle>
                            ¿Eliminar comunicado?
                          </AlertDialogTitle>
                          <AlertDialogDescription>
                            Esta acción lo ocultará para todos (borrado lógico).
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel>Cancelar</AlertDialogCancel>
                          <AlertDialogAction
                            onClick={async () => {
                              await handleDelete(selected.id);
                              setSelected(null);
                            }}
                          >
                            Eliminar
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>
                  </div>
                )}
              </>
            )}
          </DialogContent>
        </Dialog>
      </div>
    </DashboardLayout>
  );
}

function FeedList({
  items,
  seccionNameById,
  canDelete,
  onDelete,
  onOpen,
}: {
  items: ComunicadoDTO[];
  seccionNameById: Map<number, string>;
  canDelete: (c: ComunicadoDTO) => boolean;
  onDelete: (id: number) => void;
  onOpen: (c: ComunicadoDTO) => void;
}) {
  if (!items.length) {
    return (
      <Card>
        <CardContent className="p-6 text-sm text-muted-foreground">
          No hay comunicados para mostrar.
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-3">
      {items.map((c) => (
        <Card key={c.id} className="hover:shadow-sm transition">
          <CardHeader>
            <div className="flex items-start justify-between gap-4">
              <div className="space-y-1">
                <CardTitle className="text-lg">{c.titulo}</CardTitle>

                {/* ⚠️ No usar CardDescription para divs */}
                <div className="text-sm text-muted-foreground flex flex-wrap items-center gap-2">
                  <TipoBadge c={c} seccionNameById={seccionNameById} />
                </div>
              </div>

              <div className="flex gap-2">
                <Button size="sm" onClick={() => onOpen(c)}>
                  <Eye className="h-4 w-4 mr-1" />
                  Ver
                </Button>

                {canDelete(c) && (
                  <AlertDialog>
                    <AlertDialogTrigger asChild>
                      <Button variant="outline" size="sm" title="Eliminar">
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </AlertDialogTrigger>
                    <AlertDialogContent>
                      <AlertDialogHeader>
                        <AlertDialogTitle>
                          ¿Eliminar comunicado?
                        </AlertDialogTitle>
                        <AlertDialogDescription>
                          Esta acción lo ocultará para todos (borrado lógico).
                        </AlertDialogDescription>
                      </AlertDialogHeader>
                      <AlertDialogFooter>
                        <AlertDialogCancel>Cancelar</AlertDialogCancel>
                        <AlertDialogAction onClick={() => onDelete(c.id)}>
                          Eliminar
                        </AlertDialogAction>
                      </AlertDialogFooter>
                    </AlertDialogContent>
                  </AlertDialog>
                )}
              </div>
            </div>
          </CardHeader>

          <CardContent>
            {/* previsualización del cuerpo en <div>, NO en <p> */}
            <div className="text-sm text-muted-foreground">
              {preview(c.cuerpo)}
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}

function TipoBadge({
  c,
  seccionNameById,
}: {
  c: ComunicadoDTO;
  seccionNameById: Map<number, string>;
}) {
  if (c.alcance === "INSTITUCIONAL")
    return (
      <Badge variant="default">
        <Megaphone className="h-3 w-3 mr-1" />
        Institucional
      </Badge>
    );
  if (c.alcance === "POR_NIVEL")
    return <Badge variant="secondary">Nivel {c.nivel}</Badge>;
  const name = c.seccionId
    ? (seccionNameById.get(c.seccionId) ?? `Sección ${c.seccionId}`)
    : "Sección";
  return <Badge variant="outline">{name}</Badge>;
}
"use client";

import { useState, useEffect, useRef } from "react";
import { DashboardLayout } from "@/app/dashboard/dashboard-layout";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Plus, Send, ArrowLeft, Wifi, WifiOff, RefreshCw } from "lucide-react";
import { api } from "@/services/api";
import { useAuth } from "@/hooks/useAuth";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import type { ChatMessageDTO, UsuarioBusquedaDTO } from "@/types/api-generated";
import useChatSocket from "@/hooks/useChatSocket";

dayjs.extend(relativeTime);

export default function ChatComponent() {
  const [activeChats, setActiveChats] = useState<UsuarioBusquedaDTO[]>([]);
  const [openChatDialog, setOpenChatDialog] = useState(false);
  const [newMessage, setNewMessage] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [personas, setPersonas] = useState<UsuarioBusquedaDTO[]>([]);
  const [unreadCounts, setUnreadCounts] = useState<Record<number, number>>({});

  const [selectedUserId, setSelectedUserId] = useState<number>(0);
  const [selectedPersona, setSelectedPersona] =
    useState<UsuarioBusquedaDTO | null>(null);

  const bottomRef = useRef<HTMLDivElement>(null);
  const { user } = useAuth();

  const {
    messages,
    sendMessage,
    connected,
    connectionStatus,
    reconnect,
    markRead,
    loadHistory,
  } = useChatSocket();

  /* ---------- Cargar chats activos y unreadCounts ---------- */
  useEffect(() => {
    if (!user) return;

    const loadData = async () => {
      try {
        const [chatsRes, unreadRes] = await Promise.all([
          api.chat.getActiveChats(),
          api.chat.getUnreadCounts(),
        ]);

        setActiveChats(chatsRes.data);
        setUnreadCounts(unreadRes.data ?? {});
      } catch (err) {
        console.error("Error al cargar chats:", err);
      }
    };

    loadData();
    const interval = setInterval(loadData, 30000);
    return () => clearInterval(interval);
  }, [user]);

  /* ---------- Búsqueda de personas con debounce ---------- */
  useEffect(() => {
    if (!user) return;
    const debounceTimer = setTimeout(() => {
      api
        .searchUsers(searchTerm.trim())
        .then(({ data }) => setPersonas(data))
        .catch(console.error);
    }, 300);
    return () => clearTimeout(debounceTimer);
  }, [user, searchTerm]);

  /* ---------- Scroll automático ---------- */
  useEffect(() => {
    if (bottomRef.current) {
      bottomRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  /* ---------- Agregar chat si llega un mensaje nuevo de usuario desconocido ---------- */
  useEffect(() => {
    if (!messages.length) return;
    const lastMessage = messages[messages.length - 1];

    if (
      lastMessage.emisorId !== user?.id &&
      !activeChats.some((chat) => chat.id === lastMessage.emisorId)
    ) {
      // Obtener datos del usuario desde la API
      api.user
        .getById(lastMessage.emisorId)
        .then(({ data }) => {
          const nuevoChat: UsuarioBusquedaDTO = {
            id: data.id,
            nombreCompleto: `${data.nombre} ${data.apellido}`,
            email: data.email,
          };
          setActiveChats((prev) => [...prev, nuevoChat]);
        })
        .catch(console.error);
    }
  }, [messages]);

  /* ---------- Abrir chat y marcar como leído ---------- */
  const openChat = async (p: UsuarioBusquedaDTO) => {
    setSelectedPersona(p);
    setSelectedUserId(p.id);

    await loadHistory(p.id);
    markRead(p.id);

    setUnreadCounts((prev) => ({
      ...prev,
      [p.id]: 0,
    }));

    setOpenChatDialog(false);
  };

  /* ---------- Enviar mensaje ---------- */
  const handleSend = () => {
    if (!newMessage.trim() || !selectedUserId) return;
    sendMessage(selectedUserId, newMessage.trim());
    setNewMessage("");
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  /* ---------- Estado conexión ---------- */
  const ConnectionStatus = () => {
    switch (connectionStatus) {
      case "connecting":
        return (
          <div className="flex items-center gap-2 text-yellow-600">
            <RefreshCw className="h-4 w-4 animate-spin" />
            <span className="text-sm">Conectando...</span>
          </div>
        );
      case "connected":
        return (
          <div className="flex items-center gap-2 text-green-600">
            <Wifi className="h-4 w-4" />
            <span className="text-sm">Conectado</span>
          </div>
        );
      case "disconnected":
        return (
          <div className="flex items-center gap-2 text-red-600">
            <WifiOff className="h-4 w-4" />
            <span className="text-sm">Desconectado</span>
            <Button size="sm" variant="outline" onClick={reconnect}>
              Reconectar
            </Button>
          </div>
        );
      default:
        return null;
    }
  };

  /* ---------- Mensaje ---------- */
  const MessageBubble = ({ message }: { message: ChatMessageDTO }) => {
    const isOwn = message.emisorId === user?.id;
    const isOptimistic = message.id < 0;

    return (
      <div className={`flex ${isOwn ? "justify-end" : "justify-start"} mb-3`}>
        <div
          className={`
            max-w-xs lg:max-w-md px-4 py-2 rounded-lg
            ${
              isOwn
                ? "bg-primary text-primary-foreground"
                : "bg-muted text-muted-foreground"
            }
            ${isOptimistic ? "opacity-60" : ""}
          `}
        >
          <p className="text-sm">{message.contenido}</p>
          <div className="flex justify-between items-center mt-1">
            <span className="text-xs opacity-70">
              {dayjs(message.fechaEnvio).format("HH:mm")}
            </span>
            {isOptimistic && <span className="text-xs ml-2">⏳</span>}
            {!isOptimistic && isOwn && (
              <span className="text-xs ml-2">{message.leido ? "✓✓" : "✓"}</span>
            )}
          </div>
        </div>
      </div>
    );
  };

  /* ---------- Responsive ---------- */
  const useMediaQuery = (query: string) => {
    const [matches, setMatches] = useState(false);
    useEffect(() => {
      const m = window.matchMedia(query);
      setMatches(m.matches);
      const handler = () => setMatches(m.matches);
      m.addEventListener("change", handler);
      return () => m.removeEventListener("change", handler);
    }, [query]);
    return matches;
  };

  const isMd = useMediaQuery("(min-width: 768px)");
  const showChatList = !selectedPersona || isMd;
  const showChatView = selectedPersona && (isMd || !showChatList);

  return (
    <DashboardLayout>
      <div className="flex-1 space-y-4 p-4 md:p-8 pt-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-3xl font-bold tracking-tight">Chat</h2>
            <p className="text-muted-foreground">Mensajes privados</p>
          </div>
        </div>
        <div className="flex h-[calc(100vh-12rem)] md:h-[calc(100vh-12rem)]">
          {/* Lista de chats */}
          {showChatList && (
            <div className="w-full md:w-1/3 flex-shrink-0">
              <Card className="h-full flex flex-col">
                <CardHeader>
                  <div className="flex items-center justify-between mb-2">
                    <CardTitle className="text-lg">Chats</CardTitle>
                    <Dialog
                      open={openChatDialog}
                      onOpenChange={setOpenChatDialog}
                    >
                      <DialogTrigger asChild>
                        <Button size="icon">
                          <Plus className="h-4 w-4" />
                        </Button>
                      </DialogTrigger>
                      <DialogContent>
                        <DialogHeader>
                          <DialogTitle>Nuevo Chat</DialogTitle>
                          <DialogDescription>
                            Busca y selecciona una persona para iniciar
                            conversación
                          </DialogDescription>
                        </DialogHeader>
                        <Input
                          placeholder="Escribe para buscar..."
                          value={searchTerm}
                          onChange={(e) => setSearchTerm(e.target.value)}
                        />
                        <ScrollArea className="h-64">
                          <div className="space-y-2">
                            {personas
                              .filter(
                                (p) =>
                                  !activeChats.find((ac) => ac.id === p.id),
                              )
                              .map((p) => (
                                <div
                                  key={p.id}
                                  className="p-2 rounded hover:bg-muted cursor-pointer"
                                  onClick={() => openChat(p)}
                                >
                                  <div className="flex items-center gap-2">
                                    <Avatar className="h-8 w-8">
                                      {/*
                                      <AvatarImage
                                        src={`/avatars/${p.id}.jpg`}
                                      />
                                      */}
                                      <AvatarFallback>
                                        {p.nombreCompleto?.charAt(0) || "?"}
                                      </AvatarFallback>
                                    </Avatar>
                                    <div>
                                      <p className="font-medium text-sm">
                                        {p.nombreCompleto}
                                      </p>
                                      <p className="text-xs text-muted-foreground">
                                        {p.email}
                                      </p>
                                    </div>
                                  </div>
                                </div>
                              ))}
                          </div>
                        </ScrollArea>
                      </DialogContent>
                    </Dialog>
                  </div>
                  <ConnectionStatus />
                </CardHeader>
                <CardContent className="flex-1 overflow-hidden p-0">
                  <ScrollArea className="h-full">
                    {activeChats.length === 0 ? (
                      <div className="p-4 text-center text-muted-foreground">
                        No hay chats activos. Haz clic en + para iniciar uno.
                      </div>
                    ) : (
                      <div className="space-y-1 p-2">
                        {activeChats.map((p) => (
                          <div
                            key={p.id}
                            onClick={() => openChat(p)}
                            className={`
                          flex items-center space-x-3 p-3 rounded-lg cursor-pointer transition-colors
                          ${
                            selectedPersona?.id === p.id
                              ? "bg-primary/10 border border-primary/20"
                              : "hover:bg-muted"
                          }
                        `}
                          >
                            <div className="relative">
                              <Avatar className="h-10 w-10">
                                {/*
                                <AvatarImage src={`/avatars/${p.id}.jpg`} />
                                */}
                                <AvatarFallback>
                                  {p.nombreCompleto?.charAt(0) || "?"}
                                </AvatarFallback>
                              </Avatar>
                              {unreadCounts[p.id] > 0 && (
                                <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs font-bold px-1.5 py-0.5 rounded-full">
                                  {unreadCounts[p.id]}
                                </span>
                              )}
                            </div>
                            <div className="flex-1 min-w-0">
                              <p className="font-medium truncate text-sm">
                                {p.nombreCompleto}
                              </p>
                              <p className="text-xs text-muted-foreground truncate">
                                {p.email}
                              </p>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </ScrollArea>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Vista del chat */}
          {showChatView && selectedPersona && (
            <div className="flex-1 flex flex-col bg-background border rounded-lg">
              {/* Header */}
              <div className="p-4 flex items-center gap-3 bg-background rounded-lg ">
                {!isMd && (
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => {
                      setSelectedPersona(null);
                      setSelectedUserId(0);
                    }}
                  >
                    <ArrowLeft className="h-4 w-4" />
                  </Button>
                )}
                <Avatar className="h-8 w-8">
                  {/*
                  <AvatarImage src={`/avatars/${selectedPersona.id}.jpg`} />
                  */}
                  <AvatarFallback>
                    {selectedPersona.nombreCompleto?.charAt(0) || "?"}
                  </AvatarFallback>
                </Avatar>
                <div className="flex-1">
                  <h3 className="font-semibold text-sm">
                    {selectedPersona.nombreCompleto}
                  </h3>
                  <p className="text-xs text-muted-foreground">
                    {connected ? "En línea" : "Desconectado"}
                  </p>
                </div>
              </div>

              {/* Mensajes */}
              <ScrollArea className="flex-1">
                <div className="p-4">
                  {messages.map((message) => (
                    <MessageBubble key={message.id} message={message} />
                  ))}
                  <div ref={bottomRef} />
                </div>
              </ScrollArea>

              {/* Input */}
              <div className="p-4 bg-background rounded-lg">
                <div className="flex gap-2">
                  <Input
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="Selecciona un chat para escribir..."
                    disabled={!connected || !selectedUserId}
                    className="flex-1"
                  />
                  <Button
                    onClick={handleSend}
                    disabled={
                      !connected || !newMessage.trim() || !selectedUserId
                    }
                    size="icon"
                  >
                    <Send className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </DashboardLayout>
  );
}
"use client";

import { useState } from "react";
import { DashboardLayout } from "@/app/dashboard/dashboard-layout";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  FileText,
  Download,
  Calendar,
  GraduationCap,
  Users,
  TrendingUp,
  AlertCircle,
  CheckCircle,
  X,
} from "lucide-react";
import { useAuth } from "@/context/AuthContext";
import { UserRole } from "@/types/api-generated";
import { useRouter } from "next/navigation";
import { useEffect } from "react";

export default function ReportesPage() {
  const { hasRole, loading, user } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (loading) return;
    if (!user) return; // middleware ya impide esto, pero por las dudas
    if (!(hasRole(UserRole.DIRECTOR) || hasRole(UserRole.ADMIN))) {
      router.replace("/dashboard"); // o mostrar un componente de “sin permiso”
    }
  }, [loading, user, hasRole, router]);
  const [selectedTab, setSelectedTab] = useState("boletines");
  const [selectedSection, setSelectedSection] = useState("");
  const [fechaDesde, setFechaDesde] = useState("");
  const [fechaHasta, setFechaHasta] = useState("");

  const [secciones] = useState([
    "3° A",
    "3° B",
    "4° A",
    "4° B",
    "5° A",
    "5° B",
    "6° A",
    "6° B",
    "Sala 3",
    "Sala 4",
    "Sala 5",
  ]);

  const [boletines] = useState([
    {
      id: 1,
      nombre: "Juan Pérez",
      seccion: "4° A",
      promedioGeneral: 8.5,
      asistencia: 92,
      inasistencias: 3,
      estado: "Promociona",
    },
    {
      id: 2,
      nombre: "María González",
      seccion: "4° A",
      promedioGeneral: 7.2,
      asistencia: 88,
      inasistencias: 5,
      estado: "Promociona",
    },
    {
      id: 3,
      nombre: "Carlos López",
      seccion: "4° A",
      promedioGeneral: 6.8,
      asistencia: 85,
      inasistencias: 7,
      estado: "No Promociona",
    },
  ]);

  const [estadisticasAprobacion] = useState({
    totalMaterias: 240,
    materiasAprobadas: 210,
    materiasDesaprobadas: 30,
    materiaConMasFallos: "Matemática",
    alumnosConMaterias: 12,
  });

  const [asistenciasAlumnos] = useState([
    {
      id: 1,
      nombre: "Juan Pérez",
      seccion: "4° A",
      diasAsistidos: 18,
      inasistencias: 2,
      justificadas: 1,
      injustificadas: 1,
      porcentaje: 90,
    },
    {
      id: 2,
      nombre: "María González",
      seccion: "4° A",
      diasAsistidos: 17,
      inasistencias: 3,
      justificadas: 2,
      injustificadas: 1,
      porcentaje: 85,
    },
  ]);

  const [actas] = useState([
    {
      id: 1,
      alumno: "Pedro Martínez",
      docente: "Prof. Ana López",
      fecha: "2025-01-18",
      hora: "10:30",
      descripcion: "Caída en el recreo",
      firmada: true,
    },
    {
      id: 2,
      alumno: "Sofía Ramírez",
      docente: "Maestra Clara",
      fecha: "2025-01-15",
      hora: "14:15",
      descripcion: "Golpe en la cabeza",
      firmada: false,
    },
  ]);

  const porcentajeAprobacion = Math.round(
    (estadisticasAprobacion.materiasAprobadas /
      estadisticasAprobacion.totalMaterias) *
      100,
  );

  return (
    <DashboardLayout>
      <div className="flex-1 space-y-4 p-4 md:p-8 pt-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-3xl font-bold tracking-tight">Reportes</h2>
            <p className="text-muted-foreground">
              Genere reportes detallados y exportables en PDF
            </p>
          </div>
          <Button>
            <Download className="h-4 w-4 mr-2" />
            Exportar PDF
          </Button>
        </div>

        {/* Tabs */}
        <Tabs
          value={selectedTab}
          onValueChange={setSelectedTab}
          className="space-y-4"
        >
          <TabsList className="grid w-full grid-cols-5">
            <TabsTrigger value="boletines">Boletines</TabsTrigger>
            <TabsTrigger value="aprobacion">Aprobación</TabsTrigger>
            <TabsTrigger value="asistencias">Asistencias</TabsTrigger>
            <TabsTrigger value="inasistencias">Inasistencias</TabsTrigger>
            <TabsTrigger value="actas">Actas</TabsTrigger>
          </TabsList>

          <TabsContent value="boletines" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <GraduationCap className="h-5 w-5 mr-2" />
                  Reporte de Boletines
                </CardTitle>
                <CardDescription>
                  Resumen académico individualizado por estudiante
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="seccion">Sección</Label>
                      <Select
                        value={selectedSection}
                        onValueChange={setSelectedSection}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Seleccione una sección" />
                        </SelectTrigger>
                        <SelectContent>
                          {secciones.map((seccion) => (
                            <SelectItem key={seccion} value={seccion}>
                              {seccion}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  {selectedSection && (
                    <div className="mt-6">
                      <h4 className="font-medium mb-4">
                        Alumnos de {selectedSection}
                      </h4>
                      <div className="space-y-3">
                        {boletines.map((alumno) => (
                          <div
                            key={alumno.id}
                            className="flex items-center justify-between p-4 border rounded-lg"
                          >
                            <div className="flex items-center space-x-4">
                              <div>
                                <p className="font-medium">{alumno.nombre}</p>
                                <p className="text-sm text-gray-600">
                                  {alumno.seccion}
                                </p>
                              </div>
                            </div>
                            <div className="flex items-center space-x-6">
                              <div className="text-center">
                                <p className="text-sm font-medium">Promedio</p>
                                <p className="text-lg">
                                  {alumno.promedioGeneral}
                                </p>
                              </div>
                              <div className="text-center">
                                <p className="text-sm font-medium">
                                  Asistencia
                                </p>
                                <p className="text-lg">{alumno.asistencia}%</p>
                              </div>
                              <div className="text-center">
                                <Badge
                                  variant={
                                    alumno.estado === "Promociona"
                                      ? "default"
                                      : "destructive"
                                  }
                                >
                                  {alumno.estado}
                                </Badge>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="aprobacion" className="space-y-4">
            <div className="grid gap-4 md:grid-cols-3">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <TrendingUp className="h-5 w-5 mr-2 text-green-600" />
                    Aprobación General
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-center">
                    <div className="text-3xl font-bold text-green-600">
                      {porcentajeAprobacion}%
                    </div>
                    <p className="text-sm text-gray-600 mt-2">
                      {estadisticasAprobacion.materiasAprobadas} de{" "}
                      {estadisticasAprobacion.totalMaterias} materias
                    </p>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <AlertCircle className="h-5 w-5 mr-2 text-orange-600" />
                    Materia Crítica
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-center">
                    <div className="text-lg font-bold text-orange-600">
                      {estadisticasAprobacion.materiaConMasFallos}
                    </div>
                    <p className="text-sm text-gray-600 mt-2">
                      Mayor cantidad de desaprobaciones
                    </p>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Users className="h-5 w-5 mr-2 text-red-600" />
                    Alumnos con Materias
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-center">
                    <div className="text-3xl font-bold text-red-600">
                      {estadisticasAprobacion.alumnosConMaterias}
                    </div>
                    <p className="text-sm text-gray-600 mt-2">
                      Alumnos que adeudan materias
                    </p>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="asistencias" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Calendar className="h-5 w-5 mr-2" />
                  Reporte de Asistencias de Alumnos
                </CardTitle>
                <CardDescription>
                  Análisis detallado de asistencia por período
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <Label htmlFor="desde">Desde</Label>
                      <Input
                        id="desde"
                        type="date"
                        value={fechaDesde}
                        onChange={(e) => setFechaDesde(e.target.value)}
                      />
                    </div>
                    <div>
                      <Label htmlFor="hasta">Hasta</Label>
                      <Input
                        id="hasta"
                        type="date"
                        value={fechaHasta}
                        onChange={(e) => setFechaHasta(e.target.value)}
                      />
                    </div>
                    <div>
                      <Label htmlFor="seccion-asistencia">Sección</Label>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Seleccione sección" />
                        </SelectTrigger>
                        <SelectContent>
                          {secciones.map((seccion) => (
                            <SelectItem key={seccion} value={seccion}>
                              {seccion}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="mt-6">
                    <h4 className="font-medium mb-4">Detalle de Asistencias</h4>
                    <div className="space-y-3">
                      {asistenciasAlumnos.map((alumno) => (
                        <div
                          key={alumno.id}
                          className="flex items-center justify-between p-4 border rounded-lg"
                        >
                          <div>
                            <p className="font-medium">{alumno.nombre}</p>
                            <p className="text-sm text-gray-600">
                              {alumno.seccion}
                            </p>
                          </div>
                          <div className="flex items-center space-x-6">
                            <div className="text-center">
                              <p className="text-sm font-medium">
                                Días Asistidos
                              </p>
                              <p className="text-lg">{alumno.diasAsistidos}</p>
                            </div>
                            <div className="text-center">
                              <p className="text-sm font-medium">
                                Inasistencias
                              </p>
                              <p className="text-lg">{alumno.inasistencias}</p>
                            </div>
                            <div className="text-center">
                              <p className="text-sm font-medium">
                                Justificadas
                              </p>
                              <p className="text-lg text-green-600">
                                {alumno.justificadas}
                              </p>
                            </div>
                            <div className="text-center">
                              <p className="text-sm font-medium">Porcentaje</p>
                              <p className="text-lg font-bold">
                                {alumno.porcentaje}%
                              </p>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="inasistencias" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Reporte de Inasistencias de Profesores</CardTitle>
                <CardDescription>
                  Seguimiento de ausentismo docente
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8 text-gray-500">
                  <Users className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>Funcionalidad en desarrollo</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="actas" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <FileText className="h-5 w-5 mr-2" />
                  Reporte de Actas
                </CardTitle>
                <CardDescription>
                  Registro de actas de accidentes y incidentes
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div>
                      <Label htmlFor="desde-actas">Desde</Label>
                      <Input
                        id="desde-actas"
                        type="date"
                        value={fechaDesde}
                        onChange={(e) => setFechaDesde(e.target.value)}
                      />
                    </div>
                    <div>
                      <Label htmlFor="hasta-actas">Hasta</Label>
                      <Input
                        id="hasta-actas"
                        type="date"
                        value={fechaHasta}
                        onChange={(e) => setFechaHasta(e.target.value)}
                      />
                    </div>
                    <div>
                      <Label htmlFor="seccion-actas">Sección</Label>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Todas las secciones" />
                        </SelectTrigger>
                        <SelectContent>
                          {secciones.map((seccion) => (
                            <SelectItem key={seccion} value={seccion}>
                              {seccion}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label htmlFor="nivel-actas">Nivel</Label>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Todos los niveles" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="inicial">Inicial</SelectItem>
                          <SelectItem value="primario">Primario</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="bg-blue-50 p-4 rounded-lg">
                    <p className="text-center font-medium text-blue-800">
                      Total de actas encontradas: {actas.length}
                    </p>
                  </div>

                  <div className="space-y-3">
                    {actas.map((acta) => (
                      <div
                        key={acta.id}
                        className="flex items-center justify-between p-4 border rounded-lg"
                      >
                        <div>
                          <p className="font-medium">{acta.alumno}</p>
                          <p className="text-sm text-gray-600">
                            {acta.docente}
                          </p>
                        </div>
                        <div className="flex items-center space-x-6">
                          <div className="text-center">
                            <p className="text-sm font-medium">Fecha</p>
                            <p className="text-sm">{acta.fecha}</p>
                          </div>
                          <div className="text-center">
                            <p className="text-sm font-medium">Hora</p>
                            <p className="text-sm">{acta.hora}</p>
                          </div>
                          <div className="text-center">
                            <p className="text-sm font-medium">Estado</p>
                            <Badge
                              variant={acta.firmada ? "default" : "destructive"}
                            >
                              {acta.firmada ? (
                                <CheckCircle className="h-3 w-3 mr-1" />
                              ) : (
                                <X className="h-3 w-3 mr-1" />
                              )}
                              {acta.firmada ? "Firmada" : "Pendiente"}
                            </Badge>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </DashboardLayout>
  );
}
"use client";

import { useEffect, useMemo, useState } from "react";
import { api } from "@/services/api";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

const CONCEPTOS = [
  "EXCELENTE",
  "MUY_BUENO",
  "BUENO",
  "REGULAR",
  "INSUFICIENTE",
] as const;

type Row = {
  id?: number; // si existe en backend
  matriculaId: number;
  nombre: string;
  notaNumerica?: number | null;
  notaConceptual?: string | null;
  observaciones?: string | null;
};

export default function CierrePrimarioView({
  seccionId,
}: {
  seccionId: number;
}) {
  const hoy = new Date().toISOString().slice(0, 10);

  // catálogos
  const [trimestres, setTrimestres] = useState<any[]>([]);
  const [seccionMaterias, setSeccionMaterias] = useState<any[]>([]);
  const [alumnos, setAlumnos] = useState<any[]>([]);
  const [califs, setCalifs] = useState<any[]>([]);

  // UI
  const [triId, setTriId] = useState<string>("");
  const [smId, setSmId] = useState<string>("");
  const [rows, setRows] = useState<Row[]>([]);
  const [loading, setLoading] = useState(true);
  const [loadingRows, setLoadingRows] = useState(false);
  const [saving, setSaving] = useState(false);

  // carga base
  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        const [triRes, smRes, aluRes, cRes] = await Promise.all([
          api.trimestres.list(), // { id, orden, cerrado, fechaInicio, fechaFin, periodoEscolarId }
          api.seccionMaterias.list(), // { id, seccionId, materiaId, materia{nombre}? }
          api.seccionesAlumnos.bySeccionId(seccionId, hoy), // [{ matriculaId, nombre/nombreCompleto }]
          api.calificacionesTrimestrales.list(), // [{ id, trimestreId, seccionMateriaId, matriculaId, ... }]
        ]);
        if (!alive) return;
        setTrimestres(triRes.data ?? []);
        setSeccionMaterias(
          (smRes.data ?? []).filter(
            (sm: any) => (sm.seccionId ?? sm.seccion?.id) === seccionId,
          ),
        );
        setAlumnos(aluRes.data ?? []);
        setCalifs(cRes.data ?? []);
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, [seccionId, hoy]);

  const triOpts = useMemo(
    () =>
      (trimestres ?? [])
        .slice()
        .sort((a: any, b: any) => (a.orden ?? 0) - (b.orden ?? 0))
        .map((t: any) => ({
          id: t.id,
          label: `Trimestre ${t.orden}`,
          cerrado: !!t.cerrado,
        })),
    [trimestres],
  );

  const matOpts = useMemo(
    () =>
      (seccionMaterias ?? []).map((sm: any) => ({
        id: sm.id,
        label: sm.materia?.nombre ?? `Materia #${sm.materiaId ?? sm.id}`,
      })),
    [seccionMaterias],
  );

  const triCerrado = useMemo(() => {
    const t = trimestres.find((x) => x.id === Number(triId));
    return !!t?.cerrado;
  }, [trimestres, triId]);

  // sincroniza filas cuando el usuario elige tri/materia
  useEffect(() => {
    if (!triId || !smId || alumnos.length === 0) {
      setRows([]);
      return;
    }
    let alive = true;
    (async () => {
      try {
        setLoadingRows(true);
        // filtramos califs en memoria; si hay muchos, podés crear un endpoint search
        const current = (califs ?? []).filter(
          (c: any) =>
            c.trimestreId === Number(triId) &&
            c.seccionMateriaId === Number(smId),
        );
        const byMat = new Map<number, any>(
          current.map((c: any) => [c.matriculaId, c]),
        );

        const next: Row[] = (alumnos ?? [])
          .map((a: any) => {
            const ex = byMat.get(a.matriculaId);
            return {
              id: ex?.id,
              matriculaId: a.matriculaId,
              nombre:
                a.nombreCompleto ?? a.nombre ?? `Alumno #${a.matriculaId}`,
              notaConceptual: ex?.notaConceptual ?? null, // ← conceptual como principal
              notaNumerica: ex?.notaNumerica ?? null, // opcional
              observaciones: ex?.observaciones ?? "", // opcional
            };
          })
          .sort((a, b) => a.nombre.localeCompare(b.nombre));
        if (!alive) return;
        setRows(next);
      } finally {
        if (alive) setLoadingRows(false);
      }
    })();
    return () => {
      alive = false;
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [triId, smId, alumnos, califs]);

  const onSet = (matId: number, field: keyof Row, val: any) => {
    setRows((prev) =>
      prev.map((r) => (r.matriculaId === matId ? { ...r, [field]: val } : r)),
    );
  };

  const save = async () => {
    if (!triId || !smId) return;
    try {
      setSaving(true);

      // construyo “por cambios”
      const current = (califs ?? []).filter(
        (c: any) =>
          c.trimestreId === Number(triId) &&
          c.seccionMateriaId === Number(smId),
      );
      const byMat = new Map<number, any>(
        current.map((c: any) => [c.matriculaId, c]),
      );

      // 1) upserts
      for (const r of rows) {
        const existing = byMat.get(r.matriculaId);
        const payload = {
          trimestreId: Number(triId),
          seccionMateriaId: Number(smId),
          matriculaId: r.matriculaId,
          notaNumerica: r.notaNumerica ?? null,
          notaConceptual: r.notaConceptual ?? null,
          observaciones: r.observaciones ?? null,
        };

        if (!existing) {
          // create
          await api.calificacionesTrimestrales.create(payload);
        } else {
          // Si hay cambios, PUT
          const changed =
            (existing.notaNumerica ?? null) !== (r.notaNumerica ?? null) ||
            (existing.notaConceptual ?? null) !== (r.notaConceptual ?? null) ||
            (existing.observaciones ?? "") !== (r.observaciones ?? "");

          if (changed) {
            await api.calificacionesTrimestrales.update(existing.id, payload);
          }
        }
      }

      // 2) refresco base para ver IDs y estado real
      const { data: all } = await api.calificacionesTrimestrales.list();
      setCalifs(all ?? []);
      alert("Calificaciones guardadas.");
    } catch (e: any) {
      console.error(e);
      alert(e?.response?.data?.message ?? "No se pudo guardar.");
    } finally {
      setSaving(false);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Calificación Trimestral — Primario</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Filtros */}
        <div className="flex gap-2 flex-wrap">
          <Select value={triId} onValueChange={setTriId}>
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Trimestre" />
            </SelectTrigger>
            <SelectContent>
              {triOpts.map((o) => (
                <SelectItem key={o.id} value={String(o.id)}>
                  {o.label} {o.cerrado ? " (cerrado)" : ""}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>

          <Select value={smId} onValueChange={setSmId}>
            <SelectTrigger className="w-[260px]">
              <SelectValue placeholder="Materia" />
            </SelectTrigger>
            <SelectContent>
              {matOpts.map((o) => (
                <SelectItem key={o.id} value={String(o.id)}>
                  {o.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>

          {triCerrado && <Badge variant="destructive">Trimestre cerrado</Badge>}
        </div>

        {(loading || loadingRows) && <div className="text-sm">Cargando…</div>}

        {!loading && !loadingRows && triId && smId && (
          <div className="space-y-2">
            <div className="text-sm text-muted-foreground">
              {rows.length} alumnos.
            </div>

            <div className="border rounded-md">
              <div className="grid grid-cols-12 text-xs font-medium px-2 py-2 bg-muted/30">
                <div className="col-span-5">Alumno</div>
                <div className="col-span-3">Conceptual</div>
                <div className="col-span-2">Numérica</div>
                <div className="col-span-2">Observaciones</div>
              </div>

              <div className="max-h-[60vh] overflow-auto">
                {rows.map((r) => (
                  <div
                    key={r.matriculaId}
                    className="grid grid-cols-12 items-center gap-2 px-2 py-2 border-t"
                  >
                    <div className="col-span-5 text-sm">{r.nombre}</div>

                    <div className="col-span-3">
                      <Select
                        value={r.notaConceptual ?? ""}
                        onValueChange={(v) =>
                          onSet(r.matriculaId, "notaConceptual", v || null)
                        }
                        disabled={triCerrado}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="—" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="">—</SelectItem>
                          {CONCEPTOS.map((c) => (
                            <SelectItem key={c} value={c}>
                              {c.replace("_", " ")}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="col-span-2">
                      <Input
                        inputMode="numeric"
                        placeholder="0–10"
                        value={r.notaNumerica ?? ""}
                        onChange={(e) =>
                          onSet(
                            r.matriculaId,
                            "notaNumerica",
                            e.target.value === ""
                              ? null
                              : Number(e.target.value),
                          )
                        }
                        disabled={triCerrado}
                      />
                    </div>

                    <div className="col-span-2">
                      <Input
                        value={r.observaciones ?? ""}
                        onChange={(e) =>
                          onSet(r.matriculaId, "observaciones", e.target.value)
                        }
                        disabled={triCerrado}
                      />
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="flex justify-end pt-2">
              <Button onClick={save} disabled={saving || triCerrado}>
                Guardar
              </Button>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
// app/dashboard/calificaciones/seccion/[id]/_views/InformeInicialView.tsx
"use client";

import { useEffect, useMemo, useState } from "react";
import { api } from "@/services/api";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";

export default function InformeInicialView({
  seccionId,
}: {
  seccionId: number;
}) {
  const hoy = new Date().toISOString().slice(0, 10);
  const [trimestres, setTrimestres] = useState<any[]>([]);
  const [alumnos, setAlumnos] = useState<any[]>([]);
  const [informes, setInformes] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        const [triRes, aluRes, infRes] = await Promise.all([
          api.trimestres.list(),
          api.seccionesAlumnos.bySeccionId(seccionId, hoy),
          api.informes.list(),
        ]);
        if (!alive) return;
        setTrimestres(triRes.data ?? []);
        setAlumnos(aluRes.data ?? []);
        setInformes(infRes.data ?? []);
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, [seccionId, hoy]);

  const byKey = useMemo(() => {
    const m = new Map<string, any>();
    for (const i of informes) m.set(`${i.matriculaId}-${i.trimestreId}`, i);
    return m;
  }, [informes]);

  if (loading) return <div className="text-sm">Cargando…</div>;

  return (
    <div className="space-y-4">
      {alumnos.map((a) => (
        <Card key={a.matriculaId}>
          <CardHeader>
            <CardTitle>
              {a.nombre ?? a.nombreCompleto ?? `Alumno #${a.matriculaId}`}
            </CardTitle>
          </CardHeader>
          <CardContent className="grid gap-3 md:grid-cols-3">
            {trimestres
              .slice()
              .sort((x: any, y: any) => (x.orden ?? 0) - (y.orden ?? 0))
              .map((t) => {
                const ex = byKey.get(`${a.matriculaId}-${t.id}`);
                return (
                  <TrimestreInformeTile
                    key={`${a.matriculaId}-${t.id}`}
                    trimestre={t}
                    alumno={a}
                    existing={ex}
                    onUpsert={(obj) =>
                      setInformes((prev) => {
                        // replace or add
                        const idx = prev.findIndex((p) => p.id === obj.id);
                        if (idx >= 0) {
                          const next = prev.slice();
                          next[idx] = obj;
                          return next;
                        }
                        return [...prev, obj];
                      })
                    }
                  />
                );
              })}
          </CardContent>
        </Card>
      ))}
    </div>
  );
}

function TrimestreInformeTile({
  trimestre,
  alumno,
  existing,
  onUpsert,
}: {
  trimestre: any;
  alumno: any;
  existing?: any;
  onUpsert: (i: any) => void;
}) {
  const [open, setOpen] = useState(false);
  const [desc, setDesc] = useState(existing?.descripcion ?? "");
  const cerrado = !!trimestre?.cerrado;

  useEffect(() => {
    setDesc(existing?.descripcion ?? "");
  }, [existing?.descripcion]);

  const create = async () => {
    const { data: id } = await api.informesInicial.create({
      trimestreId: trimestre.id,
      matriculaId: alumno.matriculaId,
      descripcion: (desc ?? "").trim(),
    });
    onUpsert({
      id,
      trimestreId: trimestre.id,
      matriculaId: alumno.matriculaId,
      descripcion: (desc ?? "").trim(),
    });
    setOpen(false);
  };

  const update = async () => {
    // Si tu backend NO tiene PUT, esto fallará (405/404). Mostramos aviso.
    try {
      await api.informesInicial.update(existing.id, {
        descripcion: (desc ?? "").trim(),
      });
      onUpsert({ ...existing, descripcion: (desc ?? "").trim() });
      setOpen(false);
    } catch (e: any) {
      console.error(e);
      alert(
        e?.response?.data?.message ??
          "Tu backend aún no expone UPDATE para informes. Pedilo o habilítalo.",
      );
    }
  };

  return (
    <Card className="border-dashed">
      <CardHeader className="flex flex-row items-center justify-between">
        <CardTitle className="text-base">Trimestre {trimestre.orden}</CardTitle>
        {cerrado && <Badge variant="destructive">Cerrado</Badge>}
      </CardHeader>
      <CardContent>
        {existing ? (
          <>
            <div className="text-sm whitespace-pre-wrap">
              {existing.descripcion}
            </div>
            {!cerrado && (
              <div className="mt-2">
                <Dialog open={open} onOpenChange={setOpen}>
                  <DialogTrigger asChild>
                    <Button size="sm" variant="outline">
                      Editar informe
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>
                        Editar — {alumno.nombre ?? alumno.nombreCompleto}
                      </DialogTitle>
                    </DialogHeader>
                    <div className="space-y-3">
                      <Textarea
                        rows={6}
                        placeholder="Descripción del desarrollo observado…"
                        value={desc}
                        onChange={(e) => setDesc(e.target.value)}
                      />
                      <div className="flex justify-end gap-2">
                        <Button
                          variant="outline"
                          onClick={() => setOpen(false)}
                        >
                          Cancelar
                        </Button>
                        <Button onClick={update}>Guardar</Button>
                      </div>
                    </div>
                  </DialogContent>
                </Dialog>
              </div>
            )}
          </>
        ) : (
          <>
            {cerrado ? (
              <div className="text-sm text-muted-foreground">Sin informe.</div>
            ) : (
              <Dialog open={open} onOpenChange={setOpen}>
                <DialogTrigger asChild>
                  <Button size="sm">Cargar informe</Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>
                      Informe — {alumno.nombre ?? alumno.nombreCompleto}
                    </DialogTitle>
                  </DialogHeader>
                  <div className="space-y-3">
                    <Textarea
                      rows={6}
                      placeholder="Descripción del desarrollo observado…"
                      value={desc}
                      onChange={(e) => setDesc(e.target.value)}
                    />
                    <div className="flex justify-end gap-2">
                      <Button variant="outline" onClick={() => setOpen(false)}>
                        Cancelar
                      </Button>
                      <Button onClick={create} disabled={!desc.trim()}>
                        Guardar
                      </Button>
                    </div>
                  </div>
                </DialogContent>
              </Dialog>
            )}
          </>
        )}
      </CardContent>
    </Card>
  );
}
"use client";

import { useEffect, useMemo, useState } from "react";
import { useParams } from "next/navigation";
import { DashboardLayout } from "@/app/dashboard/dashboard-layout";
import { api } from "@/services/api";
import CierrePrimarioView from "./_views/CierrePrimarioView";
import InformeInicialView from "./_views/InformeInicialView";

export default function CalificacionesSeccionPage() {
  const { id } = useParams<{ id: string }>();
  const seccionId = Number(id);
  const [loading, setLoading] = useState(true);
  const [seccion, setSeccion] = useState<any | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        setError(null);
        const { data } = await api.secciones.list();
        if (!alive) return;
        setSeccion((data ?? []).find((x: any) => x.id === seccionId) ?? null);
      } catch (e: any) {
        if (alive) setError(e?.message ?? "No se pudo cargar la sección");
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, [seccionId]);

  const nivel = useMemo(
    () => (seccion?.nivel ?? "").toUpperCase() as "PRIMARIO" | "INICIAL" | "",
    [seccion],
  );

  return (
    <DashboardLayout>
      <div className="p-4 md:p-8 space-y-4">
        <h2 className="text-2xl font-semibold">
          {nivel === "PRIMARIO"
            ? "Calificación Trimestral"
            : "Informes de Inicial"}{" "}
          — Sección{" "}
          {seccion
            ? `${seccion.gradoSala} ${seccion.division}`
            : `#${seccionId}`}
        </h2>

        {loading && <div className="text-sm">Cargando…</div>}
        {error && <div className="text-sm text-red-600">{error}</div>}

        {!loading && !error && (
          <>
            {nivel === "PRIMARIO" ? (
              <CierrePrimarioView seccionId={seccionId} />
            ) : (
              <InformeInicialView seccionId={seccionId} />
            )}
          </>
        )}
      </div>
    </DashboardLayout>
  );
}
"use client";

import { useEffect, useMemo, useState } from "react";
import { useRouter } from "next/navigation";
import { DashboardLayout } from "@/app/dashboard/dashboard-layout";
import { api } from "@/services/api";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";

export default function CalificacionesIndexPage() {
  const router = useRouter();
  const [secciones, setSecciones] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        const { data } = await api.secciones.list();
        if (!alive) return;
        setSecciones(data ?? []);
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, []);

  const primario = useMemo(
    () =>
      (secciones ?? []).filter(
        (s: any) => String(s.nivel ?? "").toUpperCase() === "PRIMARIO",
      ),
    [secciones],
  );
  const inicial = useMemo(
    () =>
      (secciones ?? []).filter(
        (s: any) => String(s.nivel ?? "").toUpperCase() === "INICIAL",
      ),
    [secciones],
  );

  return (
    <DashboardLayout>
      <div className="p-4 md:p-8 space-y-6">
        <h2 className="text-3xl font-bold tracking-tight">Calificaciones</h2>
        {loading && <div className="text-sm">Cargando…</div>}

        {!loading && (
          <>
            <section className="space-y-2">
              <h3 className="text-lg font-medium">Primario</h3>
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {primario.map((s: any) => (
                  <Card
                    key={s.id}
                    className="hover:shadow-md transition cursor-pointer"
                    onClick={() =>
                      router.push(`/dashboard/calificaciones/seccion/${s.id}`)
                    }
                  >
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <span>
                          {s.gradoSala} {s.division}
                        </span>
                        <Badge variant="outline">{s.turno ?? "—"}</Badge>
                      </CardTitle>
                      <CardDescription>
                        Cierre trimestral por materia (nota conceptual)
                      </CardDescription>
                    </CardHeader>
                  </Card>
                ))}
              </div>
            </section>

            <section className="space-y-2">
              <h3 className="text-lg font-medium">Inicial</h3>
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {inicial.map((s: any) => (
                  <Card
                    key={s.id}
                    className="hover:shadow-md transition cursor-pointer"
                    onClick={() =>
                      router.push(`/dashboard/calificaciones/seccion/${s.id}`)
                    }
                  >
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <span>
                          {s.gradoSala} {s.division}
                        </span>
                        <Badge variant="outline">{s.turno ?? "—"}</Badge>
                      </CardTitle>
                      <CardDescription>Informes por trimestre</CardDescription>
                    </CardHeader>
                  </Card>
                ))}
              </div>
            </section>
          </>
        )}
      </div>
    </DashboardLayout>
  );
}
"use client";

import { useEffect, useMemo, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { DashboardLayout } from "@/app/dashboard/dashboard-layout";
import { api } from "@/services/api";
import type {
  SeccionDTO,
  TrimestreDTO,
  MateriaDTO,
  SeccionMateriaDTO,
  EvaluacionDTO,
} from "@/types/api-generated";
import { useActivePeriod } from "@/hooks/scope/useActivePeriod";

import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Dialog,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogContent,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Calendar, Edit, Plus, ArrowLeft } from "lucide-react";
import NotasExamenDialog from "@/app/dashboard/evaluaciones/_components/NotasExamenDialog";

export default function SeccionEvaluacionesPage() {
  const { id } = useParams<{ id: string }>();
  const seccionId = Number(id);
  const router = useRouter();
  const { trimestres } = useActivePeriod();

  // Data
  const [loading, setLoading] = useState(true);
  const [seccion, setSeccion] = useState<SeccionDTO | null>(null);
  const [materias, setMaterias] = useState<MateriaDTO[]>([]);
  const [secMats, setSecMats] = useState<SeccionMateriaDTO[]>([]);
  const [evaluaciones, setEvaluaciones] = useState<EvaluacionDTO[]>([]);

  // UI
  const [filterMateriaId, setFilterMateriaId] = useState<string>("all");

  // Nuevo examen
  const [openNew, setOpenNew] = useState(false);
  const [fecha, setFecha] = useState<string>(() =>
    new Date().toISOString().slice(0, 10),
  );
  const [titulo, setTitulo] = useState("");
  const [temas, setTemas] = useState("");
  const [creating, setCreating] = useState(false);
  const [newMateriaId, setNewMateriaId] = useState<string>("");

  // Notas
  const [openNotas, setOpenNotas] = useState(false);
  const [selEval, setSelEval] = useState<EvaluacionDTO | null>(null);

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        // Sección
        let sec: SeccionDTO | null = null;
        try {
          sec = (await api.secciones.byId?.(seccionId))?.data ?? null;
        } catch {
          const list = (await api.secciones.list()).data ?? [];
          sec = list.find((s) => s.id === seccionId) ?? null;
        }
        // Catálogos
        const [mats, sms] = await Promise.all([
          api.materias.list().then((r) => r.data ?? []),
          api.seccionMaterias.list().then((r) => r.data ?? []),
        ]);

        // Evaluaciones (filtra por seccion mediante seccionMateria)
        const all = (await api.evaluaciones.list()).data ?? [];
        const smIds = (sms as SeccionMateriaDTO[])
          .filter((x: any) => x.seccionId === seccionId)
          .map((x) => x.id);
        const evs = all.filter((e: any) => smIds.includes(e.seccionMateriaId));

        if (!alive) return;
        setSeccion(sec);
        setMaterias(mats);
        setSecMats(sms);
        setEvaluaciones(evs);

        if (filterMateriaId === "" && smIds.length > 0)
          setFilterMateriaId("all");
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [seccionId]);

  const materiaNombreById = useMemo(() => {
    const m = new Map<number, string>();
    for (const it of materias) m.set(it.id, it.nombre);
    return m;
  }, [materias]);

  const materiasDeSeccion = useMemo(() => {
    const ids = new Set(
      (secMats ?? [])
        .filter((sm: any) => sm.seccionId === seccionId)
        .map((sm) => (sm as any).materiaId as number),
    );
    return materias.filter((m) => ids.has(m.id));
  }, [secMats, materias, seccionId]);

  const filteredEvals = useMemo(() => {
    if (filterMateriaId === "all") return evaluaciones;
    const wanted = Number(filterMateriaId);
    return evaluaciones.filter((e: any) => {
      const sm = (secMats ?? []).find(
        (x) => x.id === e.seccionMateriaId,
      ) as any;
      return sm?.materiaId === wanted;
    });
  }, [evaluaciones, filterMateriaId, secMats]);

  const createExamen = async () => {
    try {
      setCreating(true);

      // Resolver trimestre por fecha
      const tri = trimestres.find(
        (t) =>
          fecha >= ((t as any).fechaInicio ?? "0000-00-00") &&
          fecha <= ((t as any).fechaFin ?? "9999-12-31"),
      );
      if (!tri || (tri as any).cerrado) {
        alert("La fecha seleccionada no cae en un trimestre activo.");
        return;
      }

      // Resolver seccionMateriaId de la materia seleccionada
      const materiaIdNum =
        newMateriaId && newMateriaId !== "all" ? Number(newMateriaId) : NaN;
      if (!materiaIdNum || Number.isNaN(materiaIdNum)) {
        alert("Seleccioná una materia.");
        return;
      }
      const sm = (secMats ?? []).find(
        (x: any) => x.seccionId === seccionId && x.materiaId === materiaIdNum,
      );
      if (!sm) {
        alert("No se encontró la materia para esta sección.");
        return;
      }

      const body = {
        seccionMateriaId: (sm as any).id,
        trimestreId: tri.id,
        fecha,
        titulo: titulo || "Evaluación",
        descripcion: temas || null,
      } as any;

      await api.evaluaciones.create(body);

      // refresh
      const all = (await api.evaluaciones.list()).data ?? [];
      const smIds = (secMats ?? [])
        .filter((x: any) => x.seccionId === seccionId)
        .map((x) => x.id);
      setEvaluaciones(
        all.filter((e: any) => smIds.includes(e.seccionMateriaId)),
      );

      setOpenNew(false);
      setTitulo("");
      setTemas("");
    } finally {
      setCreating(false);
    }
  };

  if (loading) {
    return (
      <DashboardLayout>
        <div className="p-6 text-sm">Cargando…</div>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout>
      <div className="p-4 md:p-8 space-y-6">
        <div className="flex flex-col gap-3 md:flex-row md:items-center md:justify-between">
          <div>
            <h2 className="text-2xl font-semibold">
              Evaluaciones — Sección{" "}
              {seccion
                ? `${seccion.gradoSala} ${seccion.division}`
                : `#${seccionId}`}
            </h2>
            <div className="text-sm text-muted-foreground">
              Turno {seccion?.turno ?? "—"} • Sólo Primario
            </div>
          </div>
          <div className="flex items-center gap-2">
            {/* Filtro materia */}
            {materiasDeSeccion.length > 0 && (
              <Select
                value={filterMateriaId}
                onValueChange={(v) => setFilterMateriaId(v)}
              >
                <SelectTrigger className="w-[220px]">
                  <SelectValue placeholder="Filtrar por materia" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Todas las materias</SelectItem>
                  {materiasDeSeccion.map((m) => (
                    <SelectItem key={m.id} value={String(m.id)}>
                      {m.nombre}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            )}

            {/* Nuevo examen */}
            <Dialog
              open={openNew}
              onOpenChange={(o) => {
                setOpenNew(o);
                if (o)
                  setNewMateriaId(
                    filterMateriaId !== "all" ? filterMateriaId : "",
                  );
              }}
            >
              <DialogTrigger asChild>
                <Button>
                  <Plus className="h-4 w-4 mr-1" /> Nuevo examen
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Nuevo examen</DialogTitle>
                  <DialogDescription>Ingresá fecha y temas</DialogDescription>
                </DialogHeader>

                <div className="space-y-3">
                  <div className="grid gap-2">
                    <label className="text-sm">Materia</label>
                    <Select
                      value={newMateriaId}
                      onValueChange={setNewMateriaId}
                    >
                      <SelectTrigger className="w-full">
                        <SelectValue placeholder="Seleccioná materia" />
                      </SelectTrigger>
                      <SelectContent>
                        {materiasDeSeccion.map((m) => (
                          <SelectItem key={m.id} value={String(m.id)}>
                            {m.nombre}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <label className="text-sm mb-1 block">Fecha</label>
                    <Input
                      type="date"
                      value={fecha}
                      onChange={(e) => setFecha(e.target.value)}
                    />
                  </div>

                  <div>
                    <label className="text-sm mb-1 block">Título</label>
                    <Input
                      value={titulo}
                      onChange={(e) => setTitulo(e.target.value)}
                      placeholder="p. ej. Fracciones"
                    />
                  </div>
                  <div>
                    <label className="text-sm mb-1 block">Temas</label>
                    <Textarea
                      value={temas}
                      onChange={(e) => setTemas(e.target.value)}
                      rows={3}
                    />
                  </div>

                  <div className="flex justify-end gap-2">
                    <Button variant="outline" onClick={() => setOpenNew(false)}>
                      Cancelar
                    </Button>
                    <Button onClick={createExamen} disabled={creating}>
                      {creating ? "Creando…" : "Crear"}
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>

            <Button
              variant="outline"
              onClick={() => router.push("/dashboard/evaluaciones")}
            >
              <ArrowLeft className="h-4 w-4 mr-1" /> Volver
            </Button>
          </div>
        </div>

        {/* Listado */}
        <Card>
          <CardHeader>
            <CardTitle>Exámenes de la sección</CardTitle>
            <CardDescription>
              Filtrá por materia para acotar el listado
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-2">
            {filteredEvals.length === 0 && (
              <div className="text-sm text-muted-foreground">
                No hay exámenes para el filtro seleccionado.
              </div>
            )}
            {filteredEvals.map((e) => {
              // muestra materia
              const sm = (secMats ?? []).find(
                (x) => x.id === (e as any).seccionMateriaId,
              ) as any;
              const matNom = sm
                ? materiaNombreById.get(sm.materiaId)
                : undefined;
              return (
                <div
                  key={e.id}
                  className="flex items-center justify-between border rounded-md p-3"
                >
                  <div>
                    <div className="font-medium">
                      {(e as any).titulo ?? "Examen"}
                    </div>
                    <div className="text-xs text-muted-foreground flex items-center gap-2">
                      <span className="inline-flex items-center">
                        <Calendar className="h-3 w-3 mr-1" />
                        {(e as any).fecha}
                      </span>
                      <span>• Tri {(e as any).trimestreId ?? "?"}</span>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    {matNom && <Badge variant="outline">{matNom}</Badge>}
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setSelEval(e);
                        setOpenNotas(true);
                      }}
                    >
                      <Edit className="h-4 w-4 mr-1" />
                      Notas
                    </Button>
                  </div>
                </div>
              );
            })}
          </CardContent>
        </Card>

        {selEval && (
          <NotasExamenDialog
            open={openNotas}
            onOpenChange={(v) => {
              setOpenNotas(v);
              if (!v) setSelEval(null);
            }}
            evaluacion={selEval}
          />
        )}
      </div>
    </DashboardLayout>
  );
}
"use client";

import { useEffect, useMemo, useState } from "react";
import { api } from "@/services/api";
import type {
  EvaluacionDTO,
  ResultadoEvaluacionDTO,
  ResultadoEvaluacionCreateDTO,
  AlumnoLiteDTO,
  TrimestreDTO,
  SeccionMateriaDTO,
} from "@/types/api-generated";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";

type Row = {
  matriculaId: number;
  nombre: string;
  nota?: number | null;
  observacion?: string | null;
  resultadoId?: number;
};

export default function NotasExamenDialog({
  open,
  onOpenChange,
  evaluacion,
}: {
  open: boolean;
  onOpenChange: (v: boolean) => void;
  evaluacion: EvaluacionDTO;
}) {
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [rows, setRows] = useState<Row[]>([]);
  const [trimestres, setTrimestres] = useState<TrimestreDTO[]>([]);
  const [errorMsg, setErrorMsg] = useState<string | null>(null);

  const fecha = (evaluacion as any)?.fecha as string | undefined;

  const trimestreId = useMemo(() => {
    const triId = (evaluacion as any)?.trimestreId as number | undefined;
    if (triId) return triId;
    if (!fecha) return undefined;
    const tri = trimestres.find(
      (t) =>
        fecha >= ((t as any).fechaInicio ?? "0000-00-00") &&
        fecha <= ((t as any).fechaFin ?? "9999-12-31"),
    );
    return tri?.id;
  }, [evaluacion, trimestres, fecha]);

  const trimestreCerrado = useMemo(() => {
    if (!trimestreId) return false;
    const tri = trimestres.find((t) => t.id === trimestreId);
    return !!tri?.cerrado;
  }, [trimestres, trimestreId]);

  const fetchSeccionIdFromEval = async (): Promise<number> => {
    const smId = (evaluacion as any)?.seccionMateriaId as number | undefined;
    if (!smId) throw new Error("La evaluación no tiene seccionMateriaId.");
    // byId si existe
    try {
      const sm = (await (api.seccionMaterias as any).byId?.(smId))?.data as
        | SeccionMateriaDTO
        | undefined;
      if (sm && (sm as any).seccionId) return (sm as any).seccionId as number;
    } catch {}
    // fallback list
    const all: SeccionMateriaDTO[] =
      (await api.seccionMaterias.list()).data ?? [];
    const found = all.find((x) => x.id === smId);
    const seccionId = (found as any)?.seccionId as number | undefined;
    if (!seccionId)
      throw new Error("No se pudo resolver la sección del examen.");
    return seccionId;
  };

  useEffect(() => {
    if (!open) return;
    (async () => {
      try {
        setErrorMsg(null);
        setLoading(true);

        const tri = (await api.trimestres.list()).data ?? [];
        setTrimestres(tri);

        const seccionId = await fetchSeccionIdFromEval();

        // roster de la sección en la fecha del examen
        const alumnos: AlumnoLiteDTO[] =
          (await api.seccionesAlumnos.bySeccionId(seccionId, fecha)).data ?? [];

        // resultados existentes
        let existentes: ResultadoEvaluacionDTO[] = [];
        try {
          const fn = (api.resultadosEvaluacion as any).byEvaluacion;
          if (typeof fn === "function") {
            existentes = (await fn(evaluacion.id)).data ?? [];
          } else {
            const todos: ResultadoEvaluacionDTO[] =
              (await api.resultadosEvaluacion.list()).data ?? [];
            existentes = todos.filter(
              (r: any) => r.evaluacionId === (evaluacion as any).id,
            );
          }
        } catch {
          existentes = [];
        }

        const byMat = new Map<number, ResultadoEvaluacionDTO>();
        for (const r of existentes) byMat.set((r as any).matriculaId, r);

        const rws: Row[] = alumnos
          .map((a) => {
            const ex = byMat.get(a.matriculaId);
            const name =
              (a as any).nombreCompleto ??
              ([(a as any).apellido ?? "", (a as any).nombre ?? ""]
                .join(" ")
                .trim() ||
                `Alumno #${a.matriculaId}`);
            return {
              matriculaId: a.matriculaId,
              nombre: name,
              nota: (ex as any)?.nota ?? null,
              observacion: (ex as any)?.observaciones ?? "",
              resultadoId: (ex as any)?.id,
            };
          })
          .sort((a, b) => a.nombre.localeCompare(b.nombre));

        setRows(rws);
      } catch (e: any) {
        setErrorMsg(
          e?.response?.data?.message ??
            e?.message ??
            "Fallo al cargar las notas.",
        );
      } finally {
        setLoading(false);
      }
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [open, (evaluacion as any)?.id]);

  const setNota = (matriculaId: number, value: string) => {
    const n = value === "" ? null : Number(value);
    setRows((prev) =>
      prev.map((r) =>
        r.matriculaId === matriculaId ? { ...r, nota: isNaN(n) ? null : n } : r,
      ),
    );
  };
  const setObs = (matriculaId: number, value: string) => {
    setRows((prev) =>
      prev.map((r) =>
        r.matriculaId === matriculaId ? { ...r, observacion: value } : r,
      ),
    );
  };

  const save = async () => {
    if (trimestreCerrado) {
      alert("Trimestre cerrado. Solo lectura.");
      return;
    }
    try {
      setSaving(true);
      for (const r of rows) {
        if (r.resultadoId) {
          try {
            const upd = (api.resultadosEvaluacion as any).update;
            if (typeof upd === "function") {
              await upd(r.resultadoId, {
                nota: r.nota ?? null,
                observaciones: r.observacion ?? null,
              } as any);
            } else {
              throw new Error("update no disponible");
            }
          } catch {
            try {
              const del = (api.resultadosEvaluacion as any).delete;
              if (typeof del === "function") await del(r.resultadoId);
            } catch {}
            const body: ResultadoEvaluacionCreateDTO = {
              evaluacionId: (evaluacion as any).id,
              matriculaId: r.matriculaId,
              nota: r.nota ?? null,
              observaciones: r.observacion ?? null,
            } as any;
            await api.resultadosEvaluacion.create(body);
          }
        } else {
          const body: ResultadoEvaluacionCreateDTO = {
            evaluacionId: (evaluacion as any).id,
            matriculaId: r.matriculaId,
            nota: r.nota ?? null,
            observaciones: r.observacion ?? null,
          } as any;
          await api.resultadosEvaluacion.create(body);
        }
      }
      alert("Notas guardadas.");
      onOpenChange(false);
    } catch (e: any) {
      alert(
        e?.response?.data?.message ??
          e?.message ??
          "No se pudieron guardar las notas.",
      );
    } finally {
      setSaving(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>
            Notas — {(evaluacion as any).titulo ?? "Examen"}
          </DialogTitle>
        </DialogHeader>

        {loading ? (
          <div className="text-sm p-2">Cargando…</div>
        ) : errorMsg ? (
          <div className="text-sm text-red-600">{errorMsg}</div>
        ) : (
          <>
            {trimestreCerrado && (
              <div className="rounded-md bg-amber-50 border border-amber-200 text-amber-800 text-sm p-2 mb-2">
                Este trimestre está cerrado. Solo lectura.
              </div>
            )}

            <div className="space-y-2 max-h-[55vh] overflow-auto pr-1">
              {rows.map((r) => (
                <div
                  key={r.matriculaId}
                  className="grid grid-cols-12 items-start gap-2 border rounded-md p-2"
                >
                  <div className="col-span-4 text-sm">{r.nombre}</div>
                  <div className="col-span-2">
                    <Input
                      inputMode="numeric"
                      placeholder="Nota"
                      value={r.nota ?? ""}
                      onChange={(e) => setNota(r.matriculaId, e.target.value)}
                      disabled={trimestreCerrado}
                    />
                  </div>
                  <div className="col-span-6">
                    <Textarea
                      rows={2}
                      placeholder="Observación"
                      value={r.observacion ?? ""}
                      onChange={(e) => setObs(r.matriculaId, e.target.value)}
                      disabled={trimestreCerrado}
                    />
                  </div>
                </div>
              ))}
            </div>

            <div className="flex justify-end gap-2 pt-3">
              <Button variant="outline" onClick={() => onOpenChange(false)}>
                Cancelar
              </Button>
              <Button onClick={save} disabled={saving || trimestreCerrado}>
                {saving ? "Guardando…" : "Guardar"}
              </Button>
            </div>
          </>
        )}
      </DialogContent>
    </Dialog>
  );
}
"use client";

import { useEffect, useMemo, useState } from "react";
import { useRouter } from "next/navigation";
import { DashboardLayout } from "@/app/dashboard/dashboard-layout";
import { api } from "@/services/api";
import type {
  SeccionDTO,
  SeccionMateriaDTO,
  MateriaDTO,
  EvaluacionDTO,
  NivelAcademico,
} from "@/types/api-generated";
import { useActivePeriod } from "@/hooks/scope/useActivePeriod";
import { useScopedIndex } from "@/hooks/scope/useScopedIndex";

import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

function isPrimario(s: SeccionDTO): boolean {
  const n = (s as any)?.nivel as NivelAcademico | undefined;
  if (n) return n === "PRIMARIO";
  const gs = String((s as any)?.gradoSala ?? "").toLowerCase();
  return !gs.includes("sala");
}

export default function EvaluacionesIndexPage() {
  const router = useRouter();
  const { periodoEscolarId } = useActivePeriod();

  // Del scope: trae secciones visibles según rol (staff/teacher/family).
  // Evaluaciones solo aplica a staff/teacher -> family no aparece acá.
  const {
    scope,
    loading: loadingScope,
    error: errorScope,
    secciones,
    titularBySeccionId,
  } = useScopedIndex({ includeTitularSec: true });

  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const [secMats, setSecMats] = useState<SeccionMateriaDTO[]>([]);
  const [evaluaciones, setEvaluaciones] = useState<EvaluacionDTO[]>([]);
  const [materias, setMaterias] = useState<MateriaDTO[]>([]);

  const [q, setQ] = useState("");

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setError(null);
        setLoading(true);
        const [sms, evs, mats] = await Promise.all([
          api.seccionMaterias.list().then((r) => r.data ?? []),
          api.evaluaciones.list().then((r) => r.data ?? []),
          api.materias.list().then((r) => r.data ?? []),
        ]);
        if (!alive) return;
        setSecMats(sms);
        setEvaluaciones(evs);
        setMaterias(mats);
      } catch (e: any) {
        if (alive) setError(e?.message ?? "No se pudo cargar la información.");
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, []);

  // Filtramos secciones del scope por Primario y (si corresponde) por período activo
  const seccionesPrimario = useMemo(() => {
    const base = (secciones ?? []).filter(isPrimario);
    if (!periodoEscolarId) return base;
    return base.filter((s) => (s as any).periodoEscolarId === periodoEscolarId);
  }, [secciones, periodoEscolarId]);

  // seccionId -> seccionMateriaIds
  const smIdsBySeccion = useMemo(() => {
    const map = new Map<number, number[]>();
    for (const sm of secMats) {
      const sid = (sm as any).seccionId as number;
      const arr = map.get(sid) ?? [];
      arr.push(sm.id);
      map.set(sid, arr);
    }
    return map;
  }, [secMats]);

  // materiaId -> nombre
  const materiaNombreById = useMemo(() => {
    const m = new Map<number, string>();
    for (const it of materias) m.set(it.id, it.nombre);
    return m;
  }, [materias]);

  // seccionId -> count evaluaciones
  const evalCountBySeccion = useMemo(() => {
    const map = new Map<number, number>();
    const smToSeccion = new Map<number, number>();
    for (const sm of secMats) smToSeccion.set(sm.id, (sm as any).seccionId);
    for (const e of evaluaciones) {
      const sid = smToSeccion.get((e as any).seccionMateriaId);
      if (!sid) continue;
      map.set(sid, (map.get(sid) ?? 0) + 1);
    }
    return map;
  }, [secMats, evaluaciones]);

  // Búsqueda global
  const filtered = useMemo(() => {
    const term = q.trim().toLowerCase();
    if (!term) return seccionesPrimario;

    return seccionesPrimario.filter((s) => {
      const base =
        `${s.gradoSala ?? ""} ${s.division ?? ""} ${s.turno ?? ""}`.toLowerCase();
      if (base.includes(term)) return true;

      // Materias/evaluaciones: si hay evals de esta sección y alguna coincide por título o materia
      const smIds = smIdsBySeccion.get(s.id) ?? [];
      const evs = evaluaciones.filter((e) =>
        smIds.includes((e as any).seccionMateriaId),
      );
      return evs.some((e) => {
        const titulo = String((e as any).titulo ?? "").toLowerCase();
        if (titulo.includes(term)) return true;
        const matId = (e as any).seccionMateriaId
          ? (secMats.find((x) => x.id === (e as any).seccionMateriaId) as any)
              ?.materiaId
          : undefined;
        const matNom = matId ? (materiaNombreById.get(matId) ?? "") : "";
        return matNom.toLowerCase().includes(term);
      });
    });
  }, [
    q,
    seccionesPrimario,
    smIdsBySeccion,
    evaluaciones,
    secMats,
    materiaNombreById,
  ]);

  const title =
    scope === "teacher"
      ? "Mis secciones — Evaluaciones (Primario)"
      : "Evaluaciones por sección (Primario)";

  return (
    <DashboardLayout>
      <div className="p-4 md:p-8 space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-3xl font-bold tracking-tight">{title}</h2>
            <div className="text-muted-foreground">
              Período activo: #{periodoEscolarId ?? "—"}
            </div>
          </div>
        </div>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle>Filtro</CardTitle>
            <CardDescription>
              Buscá por sección, materia o título de examen
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Input
              placeholder="Ej.: 4° A tarde, Matemática, Fracciones…"
              value={q}
              onChange={(e) => setQ(e.target.value)}
            />
          </CardContent>
        </Card>

        {(loading || loadingScope) && <div className="text-sm">Cargando…</div>}
        {(error || errorScope) && (
          <div className="text-sm text-red-600">
            {String(error ?? errorScope)}
          </div>
        )}

        {!loading && !loadingScope && !error && !errorScope && (
          <div className="grid gap-4 md:grid-cols-2 xl:grid-cols-3">
            {filtered.map((s) => {
              const titular = titularBySeccionId.get(s.id);
              const count = evalCountBySeccion.get(s.id) ?? 0;
              return (
                <Card
                  key={s.id}
                  className="hover:shadow-md transition-shadow cursor-pointer"
                  onClick={() =>
                    router.push(`/dashboard/evaluaciones/seccion/${s.id}`)
                  }
                  title="Abrir sección"
                >
                  <CardHeader>
                    <CardTitle className="flex items-center justify-between">
                      <span>
                        {s.gradoSala} {s.division}
                      </span>
                      <Badge variant="outline">{s.turno}</Badge>
                    </CardTitle>
                    <CardDescription>
                      {titular ? `Titular: ${titular}` : " "}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="text-sm text-muted-foreground">
                      {count
                        ? `${count} evaluación${count === 1 ? "" : "es"}`
                        : "Sin evaluaciones"}
                    </div>
                    <div className="mt-3">
                      <Button className="w-full">Ver sección</Button>
                    </div>
                  </CardContent>
                </Card>
              );
            })}

            {!filtered.length && (
              <div className="text-sm text-muted-foreground">
                No hay secciones que coincidan con el filtro.
              </div>
            )}
          </div>
        )}
      </div>
    </DashboardLayout>
  );
}
"use client";

import { useEffect, useMemo, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { DashboardLayout } from "@/app/dashboard/dashboard-layout";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardDescription,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { ArrowLeft, Plus, UserPlus } from "lucide-react";
import { api } from "@/services/api";
import type {
  SeccionDTO,
  SeccionMateriaDTO,
  MateriaDTO,
  NivelAcademico,
} from "@/types/api-generated";
import AddMateriaToSeccionDialog from "@/app/dashboard/materias/_components/AddMateriaToSeccionDialog";
import AsignarDocenteMateriaDialog from "@/app/dashboard/materias/_components/AsignarDocenteMateriaDialog";

type Seccion = SeccionDTO;
type SM = SeccionMateriaDTO;
type Materia = MateriaDTO;
type Asignacion = {
  id: number;
  seccionMateriaId: number;
  personalId: number;
  rol: "TITULAR" | "SUPLENTE";
  vigenciaDesde: string; // YYYY-MM-DD
  vigenciaHasta?: string | null;
};
type Personal = {
  id: number;
  nombre?: string | null;
  apellido?: string | null;
};

function fmtSeccion(s: Seccion) {
  const base =
    `${s.gradoSala ?? ""} ${s.division ?? ""}`.trim() || `Sección #${s.id}`;
  return s.turno ? `${base} (${s.turno})` : base;
}
function fmtPersonal(p?: Personal) {
  if (!p) return "—";
  const ap = (p.apellido ?? "").trim();
  const no = (p.nombre ?? "").trim();
  return ap || no ? `${ap}${ap && no ? ", " : ""}${no}` : `#${p.id}`;
}
function todayKey(d = new Date()) {
  return d.toISOString().slice(0, 10);
}
function vigenteHoy(a: Asignacion, key = todayKey()) {
  const d = a.vigenciaDesde ?? "0001-01-01";
  const h = a.vigenciaHasta ?? "9999-12-31";
  return d <= key && key <= h;
}
function isPrimario(s: Seccion) {
  const n = (s.nivel as NivelAcademico | undefined) ?? (s as any).nivel;
  if (n) return String(n).toUpperCase() === "PRIMARIO";
  const gs = `${s.gradoSala ?? ""}`.toLowerCase();
  return !gs.includes("sala");
}

export default function MateriasSeccionPage() {
  const { id } = useParams<{ id: string }>();
  const seccionId = Number(id);
  const router = useRouter();

  const [loading, setLoading] = useState(true);
  const [seccion, setSeccion] = useState<Seccion | null>(null);
  const [materias, setMaterias] = useState<Materia[]>([]);
  const [sms, setSms] = useState<SM[]>([]);
  const [asignaciones, setAsignaciones] = useState<Asignacion[]>([]);
  const [personales, setPersonales] = useState<Personal[]>([]);

  const [openAdd, setOpenAdd] = useState(false);
  const [openAsignar, setOpenAsignar] = useState<{
    sm: SM;
    materia: Materia;
  } | null>(null);

  const materiasById = useMemo(
    () => new Map(materias.map((m) => [m.id, m])),
    [materias],
  );
  const personalById = useMemo(
    () => new Map(personales.map((p) => [p.id, p] as const)),
    [personales],
  );
  const asignacionesBySm = useMemo(() => {
    const m = new Map<number, Asignacion[]>();
    for (const a of asignaciones) {
      const arr = m.get(a.seccionMateriaId) ?? [];
      arr.push(a);
      m.set(a.seccionMateriaId, arr);
    }
    // ordenar por desde desc
    for (const arr of m.values()) {
      arr.sort((a, b) =>
        (b.vigenciaDesde ?? "").localeCompare(a.vigenciaDesde ?? ""),
      );
    }
    return m;
  }, [asignaciones]);

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        // Traemos todo y filtramos client-side
        const [secRes, matRes, smRes, asgRes, perRes] = await Promise.all([
          api.secciones.list(),
          api.materias.list(),
          api.seccionMaterias.list(),
          // ⚠️ nombre correcto según tu módulo docencia.ts
          api.asignacionDocenteMateria.list(),
          api.personal.list(), // módulo RRHH
        ]);

        const allSec = (secRes.data ?? []) as Seccion[];
        const sec = allSec.find((x) => x.id === seccionId) ?? null;
        if (!sec) throw new Error("No existe la sección.");
        if (!isPrimario(sec))
          throw new Error("La sección no pertenece a PRIMARIO.");

        const allMat = (matRes.data ?? []) as Materia[];
        const allSm = ((smRes.data ?? []) as SM[]).filter(
          (x) => x.seccionId === seccionId,
        );
        const allAsg = (asgRes.data ?? []) as Asignacion[];
        const per = (perRes.data ?? []).map((p: any) => ({
          id: p.id,
          nombre: p.nombre ?? null,
          apellido: p.apellido ?? null,
        })) as Personal[];

        if (!alive) return;
        setSeccion(sec);
        setMaterias(allMat);
        setSms(allSm);
        setAsignaciones(allAsg);
        setPersonales(per);
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, [seccionId]);

  const titularVigente = (smId: number) =>
    (asignacionesBySm.get(smId) ?? []).find(
      (a) => a.rol === "TITULAR" && vigenteHoy(a),
    );
  const suplenteVigente = (smId: number) =>
    (asignacionesBySm.get(smId) ?? []).find(
      (a) => a.rol === "SUPLENTE" && vigenteHoy(a),
    );

  return (
    <DashboardLayout>
      <div className="p-4 md:p-8 space-y-6">
        <Button
          variant="outline"
          onClick={() => router.push("/dashboard/materias")}
        >
          <ArrowLeft className="h-4 w-4 mr-1" />
          Volver
        </Button>

        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold">
              Materias —{" "}
              {seccion ? fmtSeccion(seccion) : `Sección #${seccionId}`}
            </h2>
            <p className="text-sm text-muted-foreground">
              Asignaciones y vigencias
            </p>
          </div>
          <div>
            <Button onClick={() => setOpenAdd(true)}>
              <Plus className="h-4 w-4 mr-1" /> Agregar materia
            </Button>
          </div>
        </div>

        {loading ? (
          <div className="text-sm">Cargando…</div>
        ) : (
          <Card>
            <CardHeader>
              <CardTitle>Listado</CardTitle>
              <CardDescription>
                Docente titular y suplente vigentes
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              {sms.length === 0 && (
                <div className="text-sm text-muted-foreground">
                  Sin materias aún.
                </div>
              )}

              {sms.map((sm) => {
                const mat = materiasById.get(sm.materiaId);
                const tit = titularVigente(sm.id);
                const sup = suplenteVigente(sm.id);

                return (
                  <div key={sm.id} className="border rounded p-3">
                    <div className="flex items-center justify-between">
                      <div className="font-medium">
                        {mat?.nombre ?? `Materia #${sm.materiaId}`}
                      </div>
                      <div className="flex gap-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() =>
                            mat && setOpenAsignar({ sm, materia: mat })
                          }
                        >
                          <UserPlus className="h-4 w-4 mr-1" />
                          Asignar docente
                        </Button>
                        {/* Si luego agregás DELETE en /api/secciones-materias, activás esto */}
                        {/* <Button size="sm" variant="destructive" onClick={() => unlink(sm.id)}>Quitar</Button> */}
                      </div>
                    </div>

                    <Separator className="my-2" />

                    <div className="grid gap-2 sm:grid-cols-2 text-sm">
                      <div className="flex items-center gap-2">
                        <Badge variant="default">Titular</Badge>
                        <span className="truncate">
                          {fmtPersonal(personalById.get(tit?.personalId ?? 0))}
                        </span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge variant="secondary">Suplente</Badge>
                        <span className="truncate">
                          {fmtPersonal(personalById.get(sup?.personalId ?? 0))}
                        </span>
                      </div>
                    </div>
                  </div>
                );
              })}
            </CardContent>
          </Card>
        )}
      </div>

      {openAdd && seccion && (
        <AddMateriaToSeccionDialog
          seccion={seccion}
          materias={materias /* siempre [] o array */}
          onClose={() => setOpenAdd(false)}
          onCreated={() => {
            // recargar SMS después de crear
            (async () => {
              const smRes = await api.seccionMaterias.list();
              setSms(
                (smRes.data ?? []).filter(
                  (x: any) => x.seccionId === seccionId,
                ),
              );
            })();
          }}
        />
      )}

      {openAsignar && (
        <AsignarDocenteMateriaDialog
          seccionMateria={openAsignar.sm}
          materia={openAsignar.materia}
          personales={personales /* siempre [] o array */}
          onClose={() => setOpenAsignar(null)}
          onCreated={async () => {
            const asgRes = await api.asignacionDocenteMateria.list();
            setAsignaciones(asgRes.data ?? []);
          }}
        />
      )}
    </DashboardLayout>
  );
}
"use client";

import { useMemo, useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { api } from "@/services/api";
import type { SeccionMateriaDTO, MateriaDTO } from "@/types/api-generated";

type Materia = MateriaDTO;
type SeccionMateria = SeccionMateriaDTO;
type Personal = {
  id: number;
  nombre?: string | null;
  apellido?: string | null;
};

function today(): string {
  return new Date().toISOString().slice(0, 10);
}
function fmtPersonal(p?: Personal) {
  if (!p) return "—";
  const ap = (p.apellido ?? "").trim();
  const no = (p.nombre ?? "").trim();
  return ap || no ? `${ap}${ap && no ? ", " : ""}${no}` : `#${p.id}`;
}

export default function AsignarDocenteMateriaDialog({
  seccionMateria,
  materia,
  personales = [], // default seguro
  onClose,
  onCreated,
}: {
  seccionMateria: SeccionMateria;
  materia: Materia;
  personales?: Personal[];
  onClose: () => void;
  onCreated: () => void;
}) {
  const [personalId, setPersonalId] = useState<string>("");
  const [rol, setRol] = useState<"TITULAR" | "SUPLENTE">("TITULAR");
  const [desde, setDesde] = useState<string>(today());
  const [hasta, setHasta] = useState<string>("");

  const opciones = useMemo(
    () =>
      (personales ?? []).map((p) => ({
        id: p.id,
        label: fmtPersonal(p),
      })),
    [personales],
  );

  const canSubmit = !!personalId && !!rol && !!desde;

  const guardar = async () => {
    await api.asignacionDocenteMateria.create({
      seccionMateriaId: seccionMateria.id,
      personalId: Number(personalId),
      rol,
      vigenciaDesde: desde,
      vigenciaHasta: hasta || null,
    } as any);
    onCreated();
    onClose();
  };

  return (
    <Dialog open onOpenChange={(v) => !v && onClose()}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Asignar docente</DialogTitle>
          <DialogDescription>Materia: {materia.nombre}</DialogDescription>
        </DialogHeader>

        <div className="space-y-3">
          <Select value={personalId} onValueChange={setPersonalId}>
            <SelectTrigger>
              <SelectValue placeholder="Seleccioná docente" />
            </SelectTrigger>
            <SelectContent>
              {opciones.map((o) => (
                <SelectItem key={o.id} value={String(o.id)}>
                  {o.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>

          <Select value={rol} onValueChange={(v) => setRol(v as any)}>
            <SelectTrigger>
              <SelectValue placeholder="Rol" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="TITULAR">Titular</SelectItem>
              <SelectItem value="SUPLENTE">Suplente (con fecha fin)</SelectItem>
            </SelectContent>
          </Select>

          <div className="grid grid-cols-2 gap-3">
            <div>
              <label className="text-sm mb-1 block">Desde</label>
              <Input
                type="date"
                value={desde}
                onChange={(e) => setDesde(e.target.value)}
              />
            </div>
            <div>
              <label className="text-sm mb-1 block">Hasta (opcional)</label>
              <Input
                type="date"
                value={hasta}
                onChange={(e) => setHasta(e.target.value)}
              />
            </div>
          </div>

          <div className="flex justify-end gap-2">
            <Button variant="outline" onClick={onClose}>
              Cancelar
            </Button>
            <Button onClick={guardar} disabled={!canSubmit}>
              Guardar
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
"use client";

import { useMemo, useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import { api } from "@/services/api";
import type { MateriaDTO, SeccionDTO } from "@/types/api-generated";

type Materia = MateriaDTO;
type Seccion = SeccionDTO;

export default function AddMateriaToSeccionDialog({
  seccion,
  materias = [], // <-- default seguro
  onClose,
  onCreated,
}: {
  seccion: Seccion;
  materias?: Materia[];
  onClose: () => void;
  onCreated: () => void;
}) {
  const [modo, setModo] = useState<"nueva" | "existente">("nueva");
  const [nombre, setNombre] = useState("");
  const [materiaId, setMateriaId] = useState<string>("");

  const canSubmit =
    (modo === "nueva" && nombre.trim().length >= 2) ||
    (modo === "existente" && !!materiaId);

  const materiaOptions = useMemo(
    () => (materias ?? []).map((m) => ({ id: m.id, label: m.nombre })),
    [materias],
  );

  const crear = async () => {
    if (modo === "nueva") {
      const id = (await api.materias.create({ nombre })).data as number;
      await api.seccionMaterias.create({
        seccionId: seccion.id,
        materiaId: id,
      });
    } else {
      await api.seccionMaterias.create({
        seccionId: seccion.id,
        materiaId: Number(materiaId),
      });
    }
    onCreated();
    onClose();
  };

  const labelSec =
    `${seccion.gradoSala ?? ""} ${seccion.division ?? ""}`.trim() ||
    `Sección #${seccion.id}`;

  return (
    <Dialog open onOpenChange={(v) => !v && onClose()}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Agregar materia</DialogTitle>
          <DialogDescription>Sección: {labelSec}</DialogDescription>
        </DialogHeader>

        <div className="space-y-3">
          <Select value={modo} onValueChange={(v) => setModo(v as any)}>
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="nueva">Crear materia nueva</SelectItem>
              <SelectItem value="existente">
                Elegir materia existente
              </SelectItem>
            </SelectContent>
          </Select>

          {modo === "nueva" ? (
            <Input
              placeholder="Nombre de la materia"
              value={nombre}
              onChange={(e) => setNombre(e.target.value)}
            />
          ) : (
            <Select value={materiaId} onValueChange={setMateriaId}>
              <SelectTrigger>
                <SelectValue placeholder="Seleccioná materia" />
              </SelectTrigger>
              <SelectContent>
                {materiaOptions.map((o) => (
                  <SelectItem key={o.id} value={String(o.id)}>
                    {o.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          )}

          <div className="flex justify-end gap-2">
            <Button variant="outline" onClick={onClose}>
              Cancelar
            </Button>
            <Button onClick={crear} disabled={!canSubmit}>
              Guardar
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
"use client";

import { useEffect, useMemo, useState } from "react";
import { useRouter } from "next/navigation";
import { DashboardLayout } from "@/app/dashboard/dashboard-layout";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardDescription,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { useViewerScope } from "@/hooks/scope/useViewerScope";
import { useActivePeriod } from "@/hooks/scope/useActivePeriod";
import { api } from "@/services/api";
import type { SeccionDTO, NivelAcademico } from "@/types/api-generated";

type Seccion = SeccionDTO;

function fmtSeccion(s: Seccion) {
  const base =
    `${s.gradoSala ?? ""} ${s.division ?? ""}`.trim() || `Sección #${s.id}`;
  return base;
}

function isPrimario(s: Seccion) {
  const n = (s.nivel as NivelAcademico | undefined) ?? (s as any).nivel;
  if (n) return String(n).toUpperCase() === "PRIMARIO";
  // fallback por si falta `nivel`
  const gs = `${s.gradoSala ?? ""}`.toLowerCase();
  return !gs.includes("sala");
}

export default function MateriasPage() {
  const router = useRouter();
  const { roles } = useViewerScope();
  const { periodoEscolarId } = useActivePeriod();

  const isDirector = roles.includes("DIRECTOR");
  const isSecret = roles.includes("SECRETARY");
  const isAdmin = roles.includes("ADMIN");
  if (!isDirector && !isSecret && !isAdmin) {
    return (
      <DashboardLayout>
        <div className="p-6">
          <Card>
            <CardHeader>
              <CardTitle>Acceso restringido</CardTitle>
              <CardDescription>
                Solo Dirección / Secretaría / Admin
              </CardDescription>
            </CardHeader>
          </Card>
        </div>
      </DashboardLayout>
    );
  }

  const [q, setQ] = useState("");
  const [loading, setLoading] = useState(true);
  const [secciones, setSecciones] = useState<Seccion[]>([]);

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        const res = await api.secciones.list();
        const all: Seccion[] = res.data ?? [];
        const delPeriodo = periodoEscolarId
          ? all.filter(
              (s: any) =>
                (s.periodoEscolarId ?? (s as any).periodoId) ===
                periodoEscolarId,
            )
          : all;
        const primario = delPeriodo.filter(isPrimario);
        if (alive) setSecciones(primario);
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, [periodoEscolarId]);

  const filtered = useMemo(() => {
    const t = q.trim().toLowerCase();
    if (!t) return secciones;
    return secciones.filter((s) => fmtSeccion(s).toLowerCase().includes(t));
  }, [q, secciones]);

  return (
    <DashboardLayout>
      <div className="p-4 md:p-8 space-y-6">
        <div className="flex items-center justify-between gap-3">
          <div>
            <h2 className="text-3xl font-bold tracking-tight">Materias</h2>
            <div className="text-sm text-muted-foreground">
              Secciones de PRIMARIO{" "}
              {periodoEscolarId ? `— Período #${periodoEscolarId}` : ""}
            </div>
          </div>
          <div className="w-full max-w-sm">
            <Input
              placeholder="Buscar sección…"
              value={q}
              onChange={(e) => setQ(e.target.value)}
            />
          </div>
        </div>

        {loading ? (
          <div className="text-sm">Cargando…</div>
        ) : (
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {filtered.map((s) => (
              <Card key={s.id} className="hover:shadow-md transition-shadow">
                <CardHeader className="pb-3">
                  <CardTitle className="text-lg">{fmtSeccion(s)}</CardTitle>
                  <CardDescription>
                    Gestioná las materias y docentes
                  </CardDescription>
                </CardHeader>
                <CardContent className="flex items-center justify-between">
                  <Badge variant="secondary">{s.turno}</Badge>
                  <Button
                    onClick={() =>
                      router.push(`/dashboard/materias/seccion/${s.id}`)
                    }
                  >
                    Ver materias
                  </Button>
                </CardContent>
              </Card>
            ))}
            {!filtered.length && (
              <div className="text-sm text-muted-foreground">
                No hay secciones.
              </div>
            )}
          </div>
        )}
      </div>
    </DashboardLayout>
  );
}
"use client";

import { useEffect, useMemo, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { DashboardLayout } from "@/app/dashboard/dashboard-layout";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { api } from "@/services/api";
import { useActivePeriod } from "@/hooks/scope/useActivePeriod";
import type { AlumnoLiteDTO } from "@/types/api-generated";

export default function SeccionAlumnosPage() {
  const params = useParams<{ id: string }>();
  const seccionId = Number(params.id);
  const router = useRouter();

  const { trimestresDelPeriodo, hoyISO } = useActivePeriod();

  const rango = useMemo(() => {
    if (!trimestresDelPeriodo.length) return { min: hoyISO, max: hoyISO };
    const starts = trimestresDelPeriodo
      .map((t: any) => t.fechaInicio ?? t.inicio ?? "2999-12-31")
      .sort();
    const ends = trimestresDelPeriodo
      .map((t: any) => t.fechaFin ?? t.fin ?? "0001-01-01")
      .sort();
    const min = starts[0]!;
    const endMax = ends.at(-1)!;
    const max = hoyISO <= endMax ? hoyISO : endMax;
    return { min, max };
  }, [trimestresDelPeriodo, hoyISO]);

  const [fecha, setFecha] = useState(rango.min);
  const [search, setSearch] = useState("");
  const [items, setItems] = useState<AlumnoLiteDTO[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => setFecha(rango.min), [rango.min]);

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        const res = await api.seccionesAlumnos.bySeccionId(seccionId, fecha);
        if (alive) setItems(res.data ?? []);
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, [seccionId, fecha]);

  const filtered = useMemo(() => {
    const q = search.trim().toLowerCase();
    if (!q) return items;
    return items.filter(
      (a) =>
        (a.nombreCompleto ?? "").toLowerCase().includes(q) ||
        String(a.matriculaId ?? "").includes(q),
    );
  }, [items, search]);

  return (
    <DashboardLayout>
      <div className="p-4 md:p-8 space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-3xl font-bold tracking-tight">
              Alumnos por sección
            </h2>
            <div className="text-muted-foreground">
              Sección #{seccionId} — Fecha de corte: {fecha}
            </div>
          </div>
          <Button
            variant="outline"
            onClick={() => router.push("/dashboard/alumnos")}
          >
            Volver
          </Button>
        </div>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle>Filtro</CardTitle>
            <CardDescription>Buscá por nombre o matrícula</CardDescription>
          </CardHeader>
          <CardContent className="flex flex-wrap gap-3">
            <div>
              <label className="text-sm block mb-1">
                Fecha (dentro del período activo)
              </label>
              <Input
                type="date"
                min={rango.min}
                max={rango.max}
                value={fecha}
                onChange={(e) => setFecha(e.target.value)}
              />
            </div>
            <div className="flex-1 min-w-[220px]">
              <label className="text-sm block mb-1">Buscar</label>
              <Input
                placeholder="Nombre o matrícula…"
                value={search}
                onChange={(e) => setSearch(e.target.value)}
              />
            </div>
          </CardContent>
        </Card>

        {loading ? (
          <div className="text-sm">Cargando…</div>
        ) : (
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {filtered.map((a) => (
              <Card
                key={a.matriculaId}
                className="hover:shadow-md transition-shadow"
              >
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg">
                      {a.nombreCompleto}
                    </CardTitle>
                    <Badge variant="outline">#{a.matriculaId}</Badge>
                  </div>
                  <div className="text-sm text-muted-foreground">
                    DNI: {(a as any).dni ?? "—"}{" "}
                    {(a as any).sexo ? `• ${(a as any).sexo}` : ""}
                  </div>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      className="flex-1"
                      onClick={() =>
                        router.push(`/dashboard/alumno/${a.alumnoId ?? ""}`)
                      }
                    >
                      Ver Perfil
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
            {!filtered.length && (
              <div className="text-sm text-muted-foreground">
                Sin alumnos para los filtros aplicados.
              </div>
            )}
          </div>
        )}
      </div>
    </DashboardLayout>
  );
}
"use client";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import type { AlumnoLiteDTO } from "@/types/api-generated";
import { useRouter } from "next/navigation";

export default function FamilyView({
  hijos,
  title = "Mis hijos/as",
}: {
  hijos: AlumnoLiteDTO[];
  title?: string;
}) {
  const router = useRouter();

  if (!hijos?.length) {
    return (
      <div className="text-sm text-muted-foreground">
        No hay alumnos asociados a esta cuenta familiar.
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">{title}</h3>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {hijos.map((hijo) => (
          <Card
            key={`${hijo.matriculaId}-${hijo.alumnoId}`}
            className="hover:shadow-md transition-shadow"
          >
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <CardTitle className="text-lg">{hijo.nombreCompleto}</CardTitle>
                <Badge variant="outline">#{hijo.matriculaId}</Badge>
              </div>
              {/* Evitamos <div> dentro de <p> (no usamos CardDescription) */}
              <div className="text-sm text-muted-foreground">
                Alumno ID: {hijo.alumnoId}
              </div>
            </CardHeader>
            <CardContent>
              <Button
                variant="outline"
                className="w-full"
                onClick={() =>
                  router.push(`/dashboard/alumno/${hijo.alumnoId}`)
                }
              >
                Ver perfil
              </Button>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}
"use client";

import { useMemo } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Calendar,
  CheckCircle,
  Clock,
  FileText,
  Mail,
  Phone,
  X,
} from "lucide-react";
import { Curso, SolicitudAdmision } from "@/types/api-generated";

type Props = {
  searchTerm: string;
};

// Etiquetas de curso
const getCursoLabel = (courseType: Curso): string => {
  const labels = {
    [Curso.SALA_4]: "Sala 4",
    [Curso.SALA_5]: "Sala 5",
    [Curso.PRIMERO]: "1° Grado",
    [Curso.SEGUNDO]: "2° Grado",
    [Curso.TERCERO]: "3° Grado",
    [Curso.CUARTO]: "4° Grado",
    [Curso.QUINTO]: "5° Grado",
    [Curso.SEXTO]: "6° Grado",
  } as Record<string, string>;
  return (labels as any)[courseType] ?? String(courseType);
};

enum ApplicationStatus {
  PENDIENTE = "PENDIENTE",
  ENTREVISTA_PROGRAMADA = "ENTREVISTA_PROGRAMADA",
  ACEPTADO = "ACEPTADO",
  RECHAZADO = "RECHAZADO",
}

const getEstadoBadge = (estado: ApplicationStatus) => {
  switch (estado) {
    case ApplicationStatus.PENDIENTE:
      return (
        <Badge variant="secondary">
          <Clock className="h-3 w-3 mr-1" />
          Pendiente
        </Badge>
      );
    case ApplicationStatus.ENTREVISTA_PROGRAMADA:
      return (
        <Badge variant="outline">
          <Calendar className="h-3 w-3 mr-1" />
          Entrevista
        </Badge>
      );
    case ApplicationStatus.ACEPTADO:
      return (
        <Badge variant="default">
          <CheckCircle className="h-3 w-3 mr-1" />
          Aceptado
        </Badge>
      );
    case ApplicationStatus.RECHAZADO:
      return (
        <Badge variant="destructive">
          <X className="h-3 w-3 mr-1" />
          Rechazado
        </Badge>
      );
    default:
      return <Badge variant="secondary">{estado}</Badge>;
  }
};

// Por ahora usamos un mock local (podés reemplazar por tu API)
const useAspirantesMock = (): SolicitudAdmision[] => {
  return [
    {
      id: 1,
      aspirante: {
        id: 1,
        nombre: "María",
        apellido: "González",
        dni: "12345678",
        cursoSolicitado: Curso.TERCERO,
        emailContacto: "maria.gonzalez@email.com",
        telefono: "11-1234-5678",
      } as any,
      estado: ApplicationStatus.PENDIENTE as any,
      fechaCreacion: "2025-01-15T10:00:00",
      emailConfirmacionEnviado: false,
      entrevistaRealizada: false,
    },
    {
      id: 2,
      aspirante: {
        id: 2,
        nombre: "Carlos",
        apellido: "Rodríguez",
        dni: "87654321",
        cursoSolicitado: Curso.SALA_4,
        emailContacto: "carlos.rodriguez@email.com",
        telefono: "11-9876-5432",
      } as any,
      estado: ApplicationStatus.ENTREVISTA_PROGRAMADA as any,
      fechaCreacion: "2025-01-12T14:30:00",
      emailConfirmacionEnviado: true,
      entrevistaRealizada: false,
    },
    {
      id: 3,
      aspirante: {
        id: 3,
        nombre: "Ana",
        apellido: "Martínez",
        dni: "11223344",
        cursoSolicitado: Curso.PRIMERO,
        emailContacto: "ana.martinez@email.com",
        telefono: "11-5555-1234",
      } as any,
      estado: ApplicationStatus.ACEPTADO as any,
      fechaCreacion: "2025-01-10T09:15:00",
      emailConfirmacionEnviado: true,
      entrevistaRealizada: true,
    },
  ] as unknown as SolicitudAdmision[];
};

export default function AspirantesTab({ searchTerm }: Props) {
  // Si tenés API: reemplazá este hook mock por api.solicitudesAdmision.list()
  const aspirantes = useAspirantesMock();

  const filtered = useMemo(() => {
    const q = searchTerm.trim().toLowerCase();
    if (!q) return aspirantes;
    return aspirantes.filter(
      (a) =>
        `${a.aspirante?.nombre ?? ""} ${a.aspirante?.apellido ?? ""}`
          .toLowerCase()
          .includes(q) ||
        getCursoLabel(a.aspirante?.cursoSolicitado as any)
          .toLowerCase()
          .includes(q),
    );
  }, [aspirantes, searchTerm]);

  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
      {filtered.map((solicitud) => (
        <Card key={solicitud.id} className="hover:shadow-md transition-shadow">
          <CardHeader className="pb-3">
            <div className="flex items-center justify-between">
              <CardTitle className="text-lg">
                {solicitud.aspirante?.nombre} {solicitud.aspirante?.apellido}
              </CardTitle>
              {getEstadoBadge(solicitud.estado as any)}
            </div>
            <CardDescription>
              {getCursoLabel(solicitud.aspirante?.cursoSolicitado as any)} —
              Postulación:{" "}
              {new Date(solicitud.fechaCreacion!).toLocaleDateString()}
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="flex items-center text-sm text-gray-600">
              <Mail className="h-4 w-4 mr-2" />
              {solicitud.aspirante?.emailContacto}
            </div>
            <div className="flex items-center text-sm text-gray-600">
              <Clock className="h-4 w-4 mr-2" />
              DNI: {solicitud.aspirante?.dni}
            </div>
            <div className="flex items-center text-sm text-gray-600">
              <Phone className="h-4 w-4 mr-2" />
              {solicitud.aspirante?.telefono}
            </div>

            <div className="flex space-x-2 pt-2">
              <Dialog>
                <DialogTrigger asChild>
                  <Button variant="outline" size="sm" className="flex-1">
                    <FileText className="h-4 w-4 mr-2" />
                    Ver Detalles
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-2xl">
                  <DialogHeader>
                    <DialogTitle>
                      Postulación de {solicitud.aspirante?.nombre}{" "}
                      {solicitud.aspirante?.apellido}
                    </DialogTitle>
                    <DialogDescription>
                      Información completa del aspirante
                    </DialogDescription>
                  </DialogHeader>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <h4 className="font-medium">Datos del Aspirante</h4>
                      <p className="text-sm text-gray-600">
                        Nombre: {solicitud.aspirante?.nombre}{" "}
                        {solicitud.aspirante?.apellido}
                      </p>
                      <p className="text-sm text-gray-600">
                        Curso:{" "}
                        {getCursoLabel(
                          solicitud.aspirante?.cursoSolicitado as any,
                        )}
                      </p>
                      <p className="text-sm text-gray-600">
                        DNI: {solicitud.aspirante?.dni}
                      </p>
                    </div>
                    <div>
                      <h4 className="font-medium">Contacto</h4>
                      <p className="text-sm text-gray-600">
                        Email: {solicitud.aspirante?.emailContacto}
                      </p>
                      <p className="text-sm text-gray-600">
                        Teléfono: {solicitud.aspirante?.telefono}
                      </p>
                    </div>
                  </div>

                  {solicitud.estado === ("PENDIENTE" as any) && (
                    <div className="flex space-x-2 pt-4">
                      <Button variant="outline" className="flex-1">
                        <X className="h-4 w-4 mr-2" />
                        Rechazar
                      </Button>
                      <Button className="flex-1">
                        <Calendar className="h-4 w-4 mr-2" />
                        Programar Cita
                      </Button>
                    </div>
                  )}
                </DialogContent>
              </Dialog>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}
"use client";

import { useMemo, useState } from "react";
import { useRouter } from "next/navigation";
import { DashboardLayout } from "@/app/dashboard/dashboard-layout";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Search, UserPlus } from "lucide-react";
import { useScopedIndex } from "@/hooks/scope/useScopedIndex";
import { useActivePeriod } from "@/hooks/scope/useActivePeriod";
import FamilyView from "./_components/FamilyView";
import AspirantesTab from "./_components/AspirantesTabs";

export default function AlumnosIndexPage() {
  const router = useRouter();
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedTab, setSelectedTab] = useState<
    "secciones" | "aspirantes" | "historial"
  >("secciones");

  const {
    scope,
    loading,
    error,
    secciones,
    hijos,
    titularBySeccionId,
    periodoEscolarId,
  } = useScopedIndex({ includeTitularSec: true });

  // Mostramos período activo con el hook (evita UTC vs local)
  const { hoyISO } = useActivePeriod();

  const titulo = useMemo(() => {
    if (scope === "family") return "Alumnos (familia)";
    if (scope === "teacher") return "Mis secciones (alumnos)";
    return "Secciones del período activo";
  }, [scope]);

  return (
    <DashboardLayout>
      <div className="flex-1 space-y-4 p-4 md:p-8 pt-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-3xl font-bold tracking-tight">Alumnos</h2>
            <div className="text-muted-foreground">
              {scope === "staff"
                ? `Período escolar activo: #${periodoEscolarId ?? "—"} • Hoy: ${hoyISO}`
                : scope === "teacher"
                  ? "Gestión de alumnos por sección"
                  : "Vista de hijos y perfiles"}
            </div>
          </div>
          {scope !== "family" && (
            <div className="flex items-center space-x-2">
              <Button onClick={() => router.push("/dashboard/alumnos/alta")}>
                <UserPlus className="h-4 w-4 mr-2" />
                Alta Manual
              </Button>
            </div>
          )}
        </div>

        {/* Search global (para Aspirantes / Historial) */}
        {scope !== "family" && (
          <div className="flex items-center space-x-2">
            <div className="relative flex-1 max-w-sm">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Buscar por nombre, curso o sección…"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
          </div>
        )}

        {loading && <div className="text-sm">Cargando…</div>}
        {error && <div className="text-sm text-red-600">{String(error)}</div>}

        {/* FAMILY: lista de hijos */}
        {!loading && !error && scope === "family" && (
          <FamilyView hijos={hijos} />
        )}

        {/* STAFF / TEACHER: Tabs */}
        {!loading && !error && scope !== "family" && (
          <Tabs
            value={selectedTab}
            onValueChange={(v) => setSelectedTab(v as any)}
            className="space-y-4"
          >
            <TabsList>
              <TabsTrigger value="secciones">Por Secciones</TabsTrigger>
              <TabsTrigger value="aspirantes">Aspirantes</TabsTrigger>
              <TabsTrigger value="historial">Historial</TabsTrigger>
            </TabsList>

            {/* Secciones → navega a /alumnos/seccion/[id] */}
            <TabsContent value="secciones" className="space-y-4">
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {secciones
                  .filter((s) => {
                    const q = searchTerm.trim().toLowerCase();
                    if (!q) return true;
                    const txt =
                      `${s.gradoSala ?? ""} ${s.division ?? ""} ${s.turno ?? ""}`.toLowerCase();
                    return txt.includes(q);
                  })
                  .map((s) => {
                    const titular = titularBySeccionId.get(s.id);
                    return (
                      <Card
                        key={s.id}
                        className="hover:shadow-md transition-shadow"
                      >
                        <CardHeader className="pb-3">
                          <div className="flex items-center justify-between">
                            <CardTitle className="text-lg">
                              {s.gradoSala} {s.division}
                            </CardTitle>
                            <Badge variant="secondary">{s.turno}</Badge>
                          </div>
                          <div className="text-sm text-muted-foreground">
                            {titular ? (
                              <>
                                Titular:{" "}
                                <span className="font-medium">{titular}</span>
                              </>
                            ) : (
                              " "
                            )}
                          </div>
                        </CardHeader>
                        <CardContent className="space-y-3">
                          <div className="flex gap-2">
                            <Button
                              className="flex-1"
                              onClick={() =>
                                router.push(
                                  `/dashboard/alumnos/seccion/${s.id}`,
                                )
                              }
                            >
                              Ver alumnos
                            </Button>
                          </div>
                        </CardContent>
                      </Card>
                    );
                  })}
              </div>
            </TabsContent>

            {/* Aspirantes (placeholder / mock) */}
            <TabsContent value="aspirantes" className="space-y-4">
              <AspirantesTab searchTerm={searchTerm} />
            </TabsContent>

            {/* Historial (placeholder) */}
            <TabsContent value="historial" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>Historial de Alumnos</CardTitle>
                  <CardDescription>Registro de egresos y bajas</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="text-center py-8 text-gray-500">
                    No hay registros por ahora.
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        )}
      </div>
    </DashboardLayout>
  );
}
"use client";

import { useEffect, useMemo, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { DashboardLayout } from "@/app/dashboard/dashboard-layout";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Search,
  Calendar,
  Clock,
  MapPin,
  CheckCircle,
  X,
  ArrowLeft,
  Plus,
  Eye,
} from "lucide-react";
import { api } from "@/services/api";
import type {
  ActaAccidenteDTO,
  AlumnoLiteDTO,
  EstadoActaAccidente,
  SeccionDTO,
  AsignacionDocenteSeccionDTO,
  PersonalDTO,
} from "@/types/api-generated";
import { useActivePeriod } from "@/hooks/scope/useActivePeriod";
import ViewActaDialog from "../../_components/ViewActaDialog";
import NewActaDialog from "../../_components/NewActaDialog";

type ActaVM = {
  id: number;
  alumnoId: number;
  alumno: string;
  seccionId?: number | null;
  docente?: string | null;
  fecha: string;
  firmada: boolean;
  creadoPor?: string | null;
  descripcion: string;
};

function vigente(
  desde?: string | null,
  hasta?: string | null,
  hoyISO?: string,
) {
  const today = hoyISO ?? new Date().toISOString().slice(0, 10);
  const okD = !desde || today >= desde;
  const okH = !hasta || today <= hasta;
  return okD && okH;
}

export default function AccidentesSeccionPage() {
  const params = useParams<{ id: string }>();
  const seccionId = Number(params.id);
  const router = useRouter();
  const { hoyISO } = useActivePeriod();

  const [loading, setLoading] = useState(true);
  const [seccion, setSeccion] = useState<SeccionDTO | null>(null);
  const [alumnos, setAlumnos] = useState<AlumnoLiteDTO[]>([]);
  const [actas, setActas] = useState<ActaAccidenteDTO[]>([]);
  const [asignaciones, setAsignaciones] = useState<
    AsignacionDocenteSeccionDTO[]
  >([]);
  const [personal, setPersonal] = useState<PersonalDTO[]>([]);

  // Filtros
  const [q, setQ] = useState("");
  const [fecha, setFecha] = useState(() =>
    new Date().toISOString().slice(0, 10),
  );

  // Modales
  const [viewActa, setViewActa] = useState<ActaVM | null>(null);
  const [openNew, setOpenNew] = useState(false);

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        // Sección
        let sec: SeccionDTO | null = null;
        try {
          sec = (await api.secciones.byId(seccionId)).data ?? null;
        } catch {
          const list = (await api.secciones.list()).data ?? [];
          sec = list.find((s) => s.id === seccionId) ?? null;
        }
        if (!alive) return;
        setSeccion(sec);

        // Alumnos activos en fecha (para alta)
        const als =
          (await api.seccionesAlumnos.bySeccionId(seccionId, fecha)).data ?? [];
        if (!alive) return;
        setAlumnos(als);

        // Actas (de toda la escuela, luego filtramos por sección según alumno actual)
        const allActas = (await api.actasAccidente.list()).data ?? [];
        if (!alive) return;
        setActas(allActas);

        // Asignaciones + personal para titular
        const [asigs, pers] = await Promise.all([
          api.asignacionDocenteSeccion.list().then((r) => r.data ?? []),
          api.personal.list().then((r) => r.data ?? []),
        ]);
        if (!alive) return;
        setAsignaciones(asigs);
        setPersonal(pers);
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, [seccionId, fecha]);

  // Índice alumnoId -> displayName + seccionId actual
  const alumnoNameById = useMemo(() => {
    const m = new Map<number, { name: string; seccionId: number | null }>();
    for (const a of alumnos) {
      const name =
        (a as any).nombreCompleto ??
        (a as any).nombre ??
        ([(a as any).apellido ?? "", (a as any).nombre ?? ""]
          .join(" ")
          .trim() ||
          `Alumno #${a.matriculaId}`);
      m.set(a.alumnoId ?? (a as any).id ?? 0, { name, seccionId: seccionId });
    }
    return m;
  }, [alumnos, seccionId]);

  // Titular de sección
  const titular = useMemo(() => {
    const a = asignaciones.find(
      (x: any) =>
        (x.seccionId ?? x.seccion?.id) === seccionId &&
        String(x.rol ?? "").toUpperCase() === "MAESTRO_TITULAR" &&
        vigente(x.vigenciaDesde, x.vigenciaHasta, hoyISO),
    );
    if (!a) return null;
    const pid = (a as any).personalId ?? (a as any).personal?.id;
    const p = personal.find((pp) => pp.id === pid);
    return p ? `${p.apellido ?? ""} ${p.nombre ?? ""}`.trim() : null;
  }, [asignaciones, personal, seccionId, hoyISO]);

  // VM filtrada a la sección actual
  const items: ActaVM[] = useMemo(() => {
    const list: ActaVM[] = [];
    for (const a of actas) {
      const idx = alumnoNameById.get(a.alumnoId);
      // si no está en roster activo, igual mostramos si el acta pertenece a esta sección por el seccionId guardado (si lo tuvieras);
      // como fallback, solo mostramos si está en alumnos activos (fecha seleccionada)
      if (!idx) continue;
      list.push({
        id: a.id,
        alumnoId: a.alumnoId,
        alumno: idx.name,
        seccionId: idx.seccionId,
        docente: a.creadoPor ?? null,
        fecha: a.fechaSuceso,
        firmada: (a as any).estado === "CERRADA",
        creadoPor: a.creadoPor ?? null,
        descripcion: a.descripcion ?? "",
      });
    }
    const term = q.trim().toLowerCase();
    return list
      .filter(
        (x) =>
          !term ||
          x.alumno.toLowerCase().includes(term) ||
          (x.docente ?? "").toLowerCase().includes(term),
      )
      .sort((a, b) => (b.fecha ?? "").localeCompare(a.fecha ?? ""));
  }, [actas, alumnoNameById, q]);

  if (loading) {
    return (
      <DashboardLayout>
        <div className="p-6 text-sm">Cargando…</div>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout>
      <div className="p-4 md:p-8 space-y-6">
        <div className="flex items-start md:items-center justify-between gap-3 flex-col md:flex-row">
          <div>
            <h2 className="text-2xl font-semibold">
              Actas de Accidentes — Sección{" "}
              {seccion
                ? `${seccion.gradoSala} ${seccion.division}`
                : `#${seccionId}`}
            </h2>
            <p className="text-muted-foreground text-sm">
              Turno {seccion?.turno ?? "—"}{" "}
              {titular ? (
                <>
                  — Titular: <span className="font-medium">{titular}</span>
                </>
              ) : null}
            </p>
          </div>
          <div className="flex items-center gap-2">
            <div className="hidden md:block">
              <label className="text-xs block mb-1">
                Fecha (roster activo)
              </label>
              <Input
                type="date"
                value={fecha}
                onChange={(e) => setFecha(e.target.value)}
              />
            </div>
            <div className="relative w-[220px]">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Buscar alumno/docente…"
                value={q}
                onChange={(e) => setQ(e.target.value)}
                className="pl-10"
              />
            </div>
            <Button
              variant="outline"
              onClick={() => router.push("/dashboard/accidentes")}
            >
              <ArrowLeft className="h-4 w-4 mr-1" /> Volver
            </Button>
            <NewActaDialog
              open={openNew}
              onOpenChange={setOpenNew}
              seccionId={seccionId}
              fechaRoster={fecha}
              onCreated={async () => {
                const all = (await api.actasAccidente.list()).data ?? [];
                setActas(all);
              }}
            >
              <Button>
                <Plus className="h-4 w-4 mr-1" /> Nueva acta
              </Button>
            </NewActaDialog>
          </div>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>Registro de actas</CardTitle>
            <CardDescription>Historial por sección</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {items.map((a) => (
                <div
                  key={a.id}
                  className="flex items-center justify-between border rounded p-3"
                >
                  <div className="flex flex-col gap-1">
                    <div className="font-medium">{a.alumno}</div>
                    <div className="text-xs text-muted-foreground flex items-center gap-4">
                      <span className="inline-flex items-center">
                        <Calendar className="h-3 w-3 mr-1" /> {a.fecha}
                      </span>
                      <span className="inline-flex items-center">
                        Docente: {a.docente ?? "—"}
                      </span>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Badge variant={a.firmada ? "default" : "destructive"}>
                      {a.firmada ? (
                        <>
                          <CheckCircle className="h-3 w-3 mr-1" /> Firmada
                        </>
                      ) : (
                        <>
                          <X className="h-3 w-3 mr-1" /> Pendiente
                        </>
                      )}
                    </Badge>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setViewActa(a)}
                    >
                      <Eye className="h-4 w-4 mr-1" /> Ver
                    </Button>
                  </div>
                </div>
              ))}
              {!items.length && (
                <div className="text-sm text-muted-foreground">
                  No hay actas para los filtros aplicados.
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {viewActa && (
          <ViewActaDialog acta={viewActa} onClose={() => setViewActa(null)} />
        )}
      </div>
    </DashboardLayout>
  );
}
"use client";

import { useEffect, useState } from "react";
import { api } from "@/services/api";
import type {
  ActaAccidenteCreateDTO,
  AlumnoDTO,
  EstadoActaAccidente,
  UsuarioBusquedaDTO,
} from "@/types/api-generated";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogTrigger,
} from "@/components/ui/dialog";

export default function NewActaDialogGlobal({
  children,
  open,
  onOpenChange,
  onCreated,
}: {
  children: React.ReactNode;
  open: boolean;
  onOpenChange: (v: boolean) => void;
  onCreated?: () => void;
}) {
  const [me, setMe] = useState<UsuarioBusquedaDTO | null>(null);
  const [alumnos, setAlumnos] = useState<AlumnoDTO[]>([]);
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  // Form
  const [alumnoId, setAlumnoId] = useState<number | null>(null);
  const [fecha, setFecha] = useState(() =>
    new Date().toISOString().slice(0, 10),
  );
  const [hora, setHora] = useState<string>("");
  const [lugar, setLugar] = useState<string>("");
  const [descripcion, setDescripcion] = useState<string>("");
  const [acciones, setAcciones] = useState<string>("");

  useEffect(() => {
    if (!open) return;
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        const [meRes, als] = await Promise.all([api.me(), api.alumnos.list()]);
        if (!alive) return;
        setMe(meRes.data ?? null);
        setAlumnos(als.data ?? []);
        // reset
        setAlumnoId(null);
        setFecha(new Date().toISOString().slice(0, 10));
        setHora("");
        setLugar("");
        setDescripcion("");
        setAcciones("");
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, [open]);

  function getMaxDate() {
    return new Date().toISOString().slice(0, 10);
  }
  function getMinDate() {
    const today = new Date();
    const minDate = new Date(today);
    minDate.setDate(today.getDate() - 2);
    return minDate.toISOString().slice(0, 10);
  }

  const submit = async () => {
    if (!me) return;
    if (!alumnoId || !fecha || !descripcion.trim()) return;

    const descripcionCompuesta = [
      descripcion.trim(),
      lugar ? `\n\nLugar: ${lugar}` : "",
      hora ? `\nHora: ${hora}` : "",
      acciones ? `\nAcciones: ${acciones}` : "",
    ].join("");

    const body: ActaAccidenteCreateDTO = {
      alumnoId,
      fechaSuceso: fecha,
      descripcion: descripcionCompuesta,
      estado: EstadoActaAccidente.BORRADOR,
      informanteId: me.id,
      creadoPor: (me as any).personaNombre ?? me.email ?? `Usuario ${me.id}`,
    } as any;

    try {
      setSubmitting(true);
      await api.actasAccidente.create(body);
      onOpenChange(false);
      onCreated?.();
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>Registrar Nueva Acta (global)</DialogTitle>
          <DialogDescription>
            Dirección puede registrar para cualquier alumno.
          </DialogDescription>
        </DialogHeader>

        {loading ? (
          <div className="text-sm">Cargando…</div>
        ) : (
          <div className="space-y-4">
            <div>
              <Label>Alumno *</Label>
              <Select
                value={alumnoId?.toString() ?? ""}
                onValueChange={(v) => setAlumnoId(Number(v))}
              >
                <SelectTrigger>
                  <SelectValue
                    placeholder={
                      alumnos.length ? "Seleccionar…" : "Sin alumnos"
                    }
                  />
                </SelectTrigger>
                <SelectContent>
                  {alumnos.map((a) => (
                    <SelectItem key={a.id} value={String(a.id)}>
                      {a.nombre} {a.apellido}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label>Fecha del suceso *</Label>
                <Input
                  type="date"
                  min={getMinDate()}
                  max={getMaxDate()}
                  value={fecha}
                  onChange={(e) => setFecha(e.target.value)}
                />
              </div>
              <div>
                <Label>Hora (opcional)</Label>
                <Input
                  type="time"
                  value={hora}
                  onChange={(e) => setHora(e.target.value)}
                />
              </div>
            </div>

            <div>
              <Label>Lugar (opcional)</Label>
              <Input
                placeholder="Patio, aula, gimnasio…"
                value={lugar}
                onChange={(e) => setLugar(e.target.value)}
              />
            </div>

            <div>
              <Label>Descripción *</Label>
              <Textarea
                rows={4}
                value={descripcion}
                onChange={(e) => setDescripcion(e.target.value)}
              />
            </div>

            <div>
              <Label>Acciones (opcional)</Label>
              <Textarea
                rows={3}
                value={acciones}
                onChange={(e) => setAcciones(e.target.value)}
              />
            </div>

            <div className="flex gap-2">
              <Button
                variant="outline"
                onClick={() => onOpenChange(false)}
                disabled={submitting}
              >
                Cancelar
              </Button>
              <Button
                onClick={submit}
                disabled={
                  submitting || !alumnoId || !fecha || !descripcion.trim()
                }
              >
                {submitting ? "Guardando…" : "Registrar Acta"}
              </Button>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}
"use client";

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Printer } from "lucide-react";

type ActaVM = {
  id: number;
  alumno: string;
  seccion?: string | null;
  fecha: string;
  descripcion: string;
  estado: string;
  creadoPor?: string | null;
  firmadoPorNombre?: string | null;
};

export default function ViewActaDialog({
  acta,
  onClose,
}: {
  acta: ActaVM;
  onClose: () => void;
}) {
  const isFirmada = String(acta.estado).toUpperCase() === "CERRADA";

  return (
    <Dialog open onOpenChange={(o) => !o && onClose()}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>Acta de Accidente #{acta.id}</DialogTitle>
        </DialogHeader>

        <div className="space-y-3">
          <div className="flex flex-wrap items-center gap-2">
            <Badge variant={isFirmada ? "default" : "destructive"}>
              {isFirmada ? "Firmada" : "Pendiente"}
            </Badge>
            {acta.creadoPor && (
              <Badge variant="outline">Creada por: {acta.creadoPor}</Badge>
            )}
            {acta.firmadoPorNombre && (
              <Badge variant="secondary">Firmó: {acta.firmadoPorNombre}</Badge>
            )}
          </div>

          <div className="grid grid-cols-2 gap-3 text-sm">
            <div>
              <b>Alumno:</b> {acta.alumno}
            </div>
            <div>
              <b>Sección:</b> {acta.seccion ?? "—"}
            </div>
            <div>
              <b>Fecha:</b> {acta.fecha}
            </div>
            <div>
              <b>Estado:</b> {String(acta.estado)}
            </div>
          </div>

          <div>
            <b>Descripción</b>
            <pre className="mt-1 whitespace-pre-wrap text-sm">
              {acta.descripcion}
            </pre>
          </div>

          <div className="flex justify-end gap-2">
            <Button
              variant="outline"
              onClick={() => {
                const w = window.open("", "_blank");
                if (!w) return;
                w.document.write(`
                  <html><head><title>Acta ${acta.id}</title></head>
                  <body>
                    <h2>Acta de Accidente #${acta.id}</h2>
                    <p><b>Alumno:</b> ${acta.alumno}</p>
                    <p><b>Fecha:</b> ${acta.fecha}</p>
                    <p><b>Sección:</b> ${acta.seccion ?? "—"}</p>
                    <p><b>Estado:</b> ${isFirmada ? "Firmada" : "Pendiente"}</p>
                    ${acta.firmadoPorNombre ? `<p><b>Firmó:</b> ${acta.firmadoPorNombre}</p>` : ""}
                    <hr/>
                    <pre style="white-space:pre-wrap;font-family:inherit;">${acta.descripcion ?? ""}</pre>
                  </body></html>
                `);
                w.document.close();
                w.focus();
                w.print();
              }}
            >
              <Printer className="h-4 w-4 mr-2" /> Imprimir
            </Button>
            <Button variant="outline" onClick={onClose}>
              Cerrar
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
"use client";

import { useEffect, useMemo, useState } from "react";
import { api } from "@/services/api";
import type {
  ActaAccidenteDTO,
  EstadoActaAccidente,
  PersonalDTO,
} from "@/types/api-generated";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";

export default function EditActaDialog({
  acta,
  onClose,
  onSaved,
}: {
  acta: ActaAccidenteDTO;
  onClose: () => void;
  onSaved: () => void;
}) {
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [personal, setPersonal] = useState<PersonalDTO[]>([]);

  // form
  const [fecha, setFecha] = useState(acta.fechaSuceso);
  const [descripcion, setDescripcion] = useState(acta.descripcion ?? "");
  const [estado, setEstado] = useState<string>(String(acta.estado));
  const [firmanteId, setFirmanteId] = useState<string>("");

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        const pers = (await api.personal.list()).data ?? [];
        if (!alive) return;
        setPersonal(pers);
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, [acta.id]);

  const save = async () => {
    try {
      setSaving(true);
      // intento 1: actualizar con campos directos (si tu backend los soporta)
      try {
        await api.actasAccidente.update(acta.id, {
          fechaSuceso: fecha,
          descripcion,
          estado: estado as any as EstadoActaAccidente,
          // soporte opcional: algunos backends aceptan uno de estos campos:
          firmadoPorPersonalId: firmanteId ? Number(firmanteId) : undefined,
          firmadoPor: firmanteId
            ? (() => {
                const p = personal.find((x) => x.id === Number(firmanteId));
                return p
                  ? `${p.apellido ?? ""} ${p.nombre ?? ""}`.trim()
                  : undefined;
              })()
            : undefined,
        } as any);
      } catch {
        // fallback: si no soporta firmadoPor*, al menos marcamos CERRADA y dejamos constancia en la descripción
        const extra = firmanteId
          ? (() => {
              const p = personal.find((x) => x.id === Number(firmanteId));
              const nombre = p
                ? `${p.apellido ?? ""} ${p.nombre ?? ""}`.trim()
                : "";
              return nombre ? `\n\nFirmado por: ${nombre}` : "";
            })()
          : "";
        await api.actasAccidente.update(acta.id, {
          fechaSuceso: fecha,
          descripcion: descripcion + extra,
          estado: estado as any as EstadoActaAccidente,
        } as any);
      }
      onSaved();
    } finally {
      setSaving(false);
    }
  };

  return (
    <Dialog open onOpenChange={(o) => !o && onClose()}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>Editar acta #{acta.id}</DialogTitle>
          <DialogDescription>
            Dirección puede actualizar estado y firmante.
          </DialogDescription>
        </DialogHeader>

        {loading ? (
          <div className="text-sm">Cargando…</div>
        ) : (
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="text-sm mb-1 block">Fecha del suceso</label>
                <Input
                  type="date"
                  value={fecha}
                  onChange={(e) => setFecha(e.target.value)}
                />
              </div>
              <div>
                <label className="text-sm mb-1 block">Estado</label>
                <Select value={estado} onValueChange={(v) => setEstado(v)}>
                  <SelectTrigger>
                    <SelectValue placeholder="Seleccioná…" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="BORRADOR">Borrador</SelectItem>
                    <SelectItem value="CERRADA">Cerrada (firmada)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div>
              <label className="text-sm mb-1 block">
                Firmante (personal/docente)
              </label>
              <Select
                value={firmanteId}
                onValueChange={(v) => setFirmanteId(v)}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Seleccioná firmante (opcional)" />
                </SelectTrigger>
                <SelectContent>
                  {personal.map((p) => (
                    <SelectItem key={p.id} value={String(p.id)}>
                      {`${p.apellido ?? ""} ${p.nombre ?? ""}`.trim()}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-sm mb-1 block">Descripción</label>
              <Textarea
                rows={6}
                value={descripcion}
                onChange={(e) => setDescripcion(e.target.value)}
              />
            </div>

            <div className="flex justify-end gap-2">
              <Button variant="outline" onClick={onClose}>
                Cancelar
              </Button>
              <Button onClick={save} disabled={saving}>
                {saving ? "Guardando…" : "Guardar cambios"}
              </Button>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}
"use client";

import { useEffect, useMemo, useState } from "react";
import { api } from "@/services/api";
import type {
  ActaAccidenteCreateDTO,
  AlumnoDTO,
  AlumnoLiteDTO,
  UsuarioBusquedaDTO,
  PersonalDTO,
  AsignacionDocenteSeccionDTO,
} from "@/types/api-generated";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogTrigger,
} from "@/components/ui/dialog";

/** Fechas */
const todayISO = () => new Date().toISOString().slice(0, 10);
const min2DaysISO = () => {
  const d = new Date();
  d.setDate(d.getDate() - 2);
  return d.toISOString().slice(0, 10);
};

type PersonaAlumno = { id: number; display: string; seccion?: string | null };

export default function NewActaDialog({
  children,
  open,
  onOpenChange,
  onCreated,
  mode = "global",
}: {
  children: React.ReactNode;
  open: boolean;
  onOpenChange: (v: boolean) => void;
  onCreated?: () => void;
  /** "global" (Dirección) o "teacher" (Docente) */
  mode?: "global" | "teacher";
}) {
  const [me, setMe] = useState<UsuarioBusquedaDTO | null>(null);
  const [personal, setPersonal] = useState<PersonalDTO[]>([]);
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  // Autocomplete Alumnos
  const [allAlumnos, setAllAlumnos] = useState<PersonaAlumno[]>([]);
  const [alumnoQuery, setAlumnoQuery] = useState("");
  const [alumnoId, setAlumnoId] = useState<number | null>(null);

  // Form obligatorios
  const [fecha, setFecha] = useState(todayISO());
  const [hora, setHora] = useState<string>("");
  const [lugar, setLugar] = useState<string>("");
  const [descripcion, setDescripcion] = useState<string>("");
  const [acciones, setAcciones] = useState<string>("");

  // Firmante opcional (Dirección)
  const [firmadoPorPersonalId, setFirmadoPorPersonalId] = useState<
    number | undefined
  >(undefined);

  useEffect(() => {
    if (!open) return;
    let alive = true;
    (async () => {
      try {
        setLoading(true);

        const meRes = await api.me();
        const pers = (await api.personal.list()).data ?? [];

        // Dataset de alumnos según modo
        let alumnos: Array<AlumnoDTO | AlumnoLiteDTO> = [];
        if (mode === "global") {
          alumnos = (await api.alumnos.list()).data ?? [];
        } else {
          // Docente: intentar obtener alumnos de sus secciones vigentes (hoy)
          const personaId =
            (meRes.data as any)?.personaId ?? (meRes.data as any)?.personalId;
          let seccionIds: number[] = [];
          try {
            const asigs =
              (
                await (api.asignacionDocenteSeccion as any).byPersonalVigentes(
                  personaId,
                  todayISO(),
                )
              ).data ?? [];
            seccionIds = Array.from(
              new Set(
                asigs
                  .map((a: any) => a.seccionId ?? a.seccion?.id)
                  .filter(Boolean),
              ),
            );
          } catch {
            // Fallback si no existe endpoint específico
            const list: AsignacionDocenteSeccionDTO[] =
              (await api.asignacionDocenteSeccion.list()).data ?? [];
            const mine = list.filter(
              (a: any) => (a.personalId ?? a.docenteId) === personaId,
            );
            seccionIds = Array.from(
              new Set(
                mine
                  .map((a: any) => a.seccionId ?? a.seccion?.id)
                  .filter(Boolean),
              ),
            );
          }
          if (seccionIds.length) {
            const chunks = await Promise.all(
              seccionIds.map((sid) =>
                api.seccionesAlumnos
                  .bySeccionId(sid, todayISO())
                  .then((r) => r.data ?? []),
              ),
            );
            const uniq = new Map<number, any>();
            for (const arr of chunks)
              for (const au of arr as any[]) uniq.set(au.alumnoId ?? au.id, au);
            alumnos = Array.from(uniq.values());
          } else {
            alumnos = (await api.alumnos.list()).data ?? []; // fallback extremo
          }
        }

        if (!alive) return;

        // Normalizar para autocompletado
        const toDisplay = (a: any): PersonaAlumno => {
          const id = a.id ?? a.alumnoId;
          const full =
            `${(a.apellido ?? "").trim()}, ${(a.nombre ?? "").trim()}`.replace(
              /,\s*$/,
              ",",
            );
          const seccion =
            a.seccionActual?.nombre ?? a.seccion ?? a.gradoSala ?? null;
          return {
            id,
            display: `${full} — ${seccion ?? "Sin sección"}`,
            seccion,
          };
        };

        setMe(meRes.data ?? null);
        setPersonal(pers);
        setAllAlumnos((alumnos ?? []).map(toDisplay));

        // Reset form
        setAlumnoQuery("");
        setAlumnoId(null);
        setFecha(todayISO());
        setHora("");
        setLugar("");
        setDescripcion("");
        setAcciones("");
        setFirmadoPorPersonalId(undefined);
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, [open, mode]);

  const suggestions = useMemo(() => {
    const q = alumnoQuery.trim().toLowerCase();
    const base = !q
      ? allAlumnos
      : allAlumnos.filter((a) => a.display.toLowerCase().includes(q));
    return base.slice(0, 5); // top-5
  }, [alumnoQuery, allAlumnos]);

  const pickAlumno = (id: number) => {
    setAlumnoId(id);
    const sel = allAlumnos.find((a) => a.id === id);
    if (sel) setAlumnoQuery(sel.display);
  };

  const getMaxDate = () => todayISO();
  const getMinDate = () => min2DaysISO();

  const submit = async () => {
    // Validaciones del contrato (todos obligatorios)
    if (!alumnoId) {
      alert("Seleccioná un alumno de la lista.");
      return;
    }
    if (!fecha || fecha < getMinDate() || fecha > getMaxDate()) {
      alert("Fecha inválida: solo hoy o 2 días previos.");
      return;
    }
    if (!hora.trim()) {
      alert("La hora del suceso es obligatoria.");
      return;
    }
    if (!descripcion.trim()) {
      alert("La descripción del suceso es obligatoria.");
      return;
    }
    if (!lugar.trim()) {
      alert("El lugar del suceso es obligatorio.");
      return;
    }
    if (!acciones.trim()) {
      alert("Las acciones realizadas son obligatorias.");
      return;
    }
    if (!me) {
      alert("No se pudo determinar el usuario actual.");
      return;
    }

    // Muchos backends esperan personalId/personaId como informanteId
    const inferInformanteId =
      (me as any).personalId ?? (me as any).personaId ?? me.id;

    // “Empaquetamos” hora/lugar/acciones dentro de la descripción (DTO actual no los tiene)
    const descripcionCompuesta = [
      descripcion.trim(),
      `\n\nLugar: ${lugar.trim()}`,
      `\nHora: ${hora.trim()}`,
      `\nAcciones: ${acciones.trim()}`,
    ].join("");

    const body: ActaAccidenteCreateDTO & any = {
      alumnoId,
      fechaSuceso: fecha,
      descripcion: descripcionCompuesta,
      estado: "BORRADOR", // el backend puede normalizar a enum
      informanteId: inferInformanteId,
      creadoPor: (me as any).personaNombre ?? me.email ?? `Usuario ${me.id}`,
    };

    // Dirección puede fijar firmante (si tu DTO lo soporta; si no, se ignora)
    if (mode === "global" && firmadoPorPersonalId) {
      body.firmadoPorPersonalId = firmadoPorPersonalId; // <- ajústalo si tu backend usa otro nombre
      const p = personal.find((x) => x.id === firmadoPorPersonalId);
      if (p)
        body.firmadoPorNombre = `${p.apellido ?? ""} ${p.nombre ?? ""}`.trim();
    }

    try {
      setSubmitting(true);
      await api.actasAccidente.create(body as any); // POST /api/actas-accidente
      onOpenChange(false);
      onCreated?.();
    } catch (e: any) {
      console.error("Error creando acta", e?.response?.data ?? e);
      alert(
        e?.response?.data?.message ?? e?.message ?? "No se pudo crear el acta.",
      );
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>Nueva Acta de Accidente</DialogTitle>
          <DialogDescription>
            {mode === "global"
              ? "Dirección: registre incidente para cualquier alumno."
              : "Docente: registre para alumnos de sus secciones vigentes."}
          </DialogDescription>
        </DialogHeader>

        {loading ? (
          <div className="text-sm">Cargando…</div>
        ) : (
          <div className="space-y-4">
            {/* Alumno (autocompletado top-5) */}
            <div>
              <Label>Alumno *</Label>
              <Input
                placeholder="Buscar: Apellido, Nombre — Sección"
                value={alumnoQuery}
                onChange={(e) => {
                  setAlumnoQuery(e.target.value);
                  setAlumnoId(null);
                }}
              />
              <div className="mt-1 border rounded max-h-40 overflow-auto">
                {suggestions.map((s) => (
                  <div
                    key={s.id}
                    className={`px-2 py-1 cursor-pointer hover:bg-accent text-sm ${alumnoId === s.id ? "bg-accent" : ""}`}
                    onClick={() => pickAlumno(s.id)}
                  >
                    {s.display}
                  </div>
                ))}
                {suggestions.length === 0 && (
                  <div className="px-2 py-1 text-sm text-muted-foreground">
                    Sin resultados…
                  </div>
                )}
              </div>
              {!alumnoId && (
                <div className="text-xs text-red-600 mt-1">
                  Seleccioná un alumno de la lista.
                </div>
              )}
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label>Fecha del suceso *</Label>
                <Input
                  type="date"
                  min={min2DaysISO()}
                  max={todayISO()}
                  value={fecha}
                  onChange={(e) => setFecha(e.target.value)}
                />
              </div>
              <div>
                <Label>Hora (24h) *</Label>
                <Input
                  type="time"
                  value={hora}
                  onChange={(e) => setHora(e.target.value)}
                />
              </div>
            </div>

            <div>
              <Label>Descripción del suceso *</Label>
              <Textarea
                rows={4}
                value={descripcion}
                onChange={(e) => setDescripcion(e.target.value)}
              />
            </div>

            <div>
              <Label>Lugar del suceso *</Label>
              <Input
                placeholder="Patio, aula, gimnasio…"
                value={lugar}
                onChange={(e) => setLugar(e.target.value)}
              />
            </div>

            <div>
              <Label>Acciones realizadas *</Label>
              <Textarea
                rows={3}
                value={acciones}
                onChange={(e) => setAcciones(e.target.value)}
              />
            </div>

            {mode === "global" && (
              <div>
                <Label>Firmante (docente/personal) — opcional</Label>
                <Select
                  value={
                    firmadoPorPersonalId ? String(firmadoPorPersonalId) : ""
                  }
                  onValueChange={(v) => setFirmadoPorPersonalId(Number(v))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Seleccionar firmante (opcional)" />
                  </SelectTrigger>
                  <SelectContent>
                    {personal.map((p) => (
                      <SelectItem key={p.id} value={String(p.id)}>
                        {`${p.apellido ?? ""} ${p.nombre ?? ""}`.trim()}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            )}

            <div className="flex gap-2">
              <Button
                variant="outline"
                onClick={() => onOpenChange(false)}
                disabled={submitting}
              >
                Cancelar
              </Button>
              <Button
                onClick={submit}
                disabled={
                  submitting ||
                  !alumnoId ||
                  !fecha ||
                  fecha < min2DaysISO() ||
                  fecha > todayISO() ||
                  !hora.trim() ||
                  !lugar.trim() ||
                  !descripcion.trim() ||
                  !acciones.trim()
                }
              >
                {submitting ? "Guardando…" : "Registrar Acta"}
              </Button>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}
"use client";

import { useEffect, useMemo, useState } from "react";
import { DashboardLayout } from "@/app/dashboard/dashboard-layout";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  Search,
  FileText,
  CheckCircle,
  AlertTriangle,
  Eye,
  Edit,
  Printer,
  Plus,
  Trash2,
  Download,
} from "lucide-react";

import { api } from "@/services/api";
import { useViewerScope } from "@/hooks/scope/useViewerScope";
import NewActaDialog from "./_components/NewActaDialog";
import ViewActaDialog from "./_components/ViewActaDialog";

import type {
  ActaAccidenteDTO,
  AlumnoDTO,
  UsuarioBusquedaDTO,
  EstadoActaAccidente,
  PersonalDTO,
} from "@/types/api-generated";

/** Utils */
const todayISO = () => new Date().toISOString().slice(0, 10);

type ActaVM = {
  id: number;
  alumnoId: number;
  alumno: string; // "Apellido, Nombre"
  seccion?: string | null; // sección actual
  fecha: string; // fechaSuceso
  descripcion: string;
  estado: EstadoActaAccidente | string;
  creadoPor?: string | null;
  informanteId: number;
  firmadoPorNombre?: string | null;
};

export default function AccidentesIndexPage() {
  const { roles, type } = useViewerScope(); // roles en UPPERCASE
  const isDirector = type === "staff" && roles.includes("DIRECTOR");
  const isAdmin = type === "staff" && roles.includes("ADMIN");
  const isSecret = type === "staff" && roles.includes("SECRETARY");
  const isTeacher = roles.includes("TEACHER");
  const noAccess = !isDirector && !isAdmin && !isSecret && !isTeacher;

  // Permisos según contrato + backend actual
  const canCreate = isDirector || isTeacher; // Admin/Secret: consulta
  const canExport = isDirector || isAdmin || isSecret; // reportes
  const showDisabledEdit = isDirector; // Dirección debería editar/eliminar, pero backend no lo permite

  // Data
  const [me, setMe] = useState<UsuarioBusquedaDTO | null>(null);
  const [actas, setActas] = useState<ActaAccidenteDTO[]>([]);
  const [alumnos, setAlumnos] = useState<AlumnoDTO[]>([]);
  const [personal, setPersonal] = useState<PersonalDTO[]>([]);
  const [loading, setLoading] = useState(true);

  // Filtros (contrato: alumno, fecha, estado)
  const [q, setQ] = useState(""); // búsqueda libre (ayuda)
  const [alumnoFilterId, setAlumnoFilterId] = useState<string>("all");
  const [estadoFilter, setEstadoFilter] = useState<
    "todas" | "firmadas" | "pendientes"
  >("todas");
  const [fromDate, setFromDate] = useState<string>("");
  const [toDate, setToDate] = useState<string>("");

  // Dialogs
  const [viewActa, setViewActa] = useState<ActaVM | null>(null);
  const [openNew, setOpenNew] = useState(false);

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        const [meRes, actasRes, alumnosRes, personalRes] = await Promise.all([
          api.me(),
          api.actasAccidente.list(),
          api.alumnos.list(),
          api.personal.list(),
        ]);
        if (!alive) return;
        setMe(meRes.data ?? null);
        setActas(actasRes.data ?? []);
        setAlumnos(alumnosRes.data ?? []);
        setPersonal(personalRes.data ?? []);
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, []);

  // Index / helpers
  const alumnoIdx = useMemo(() => {
    const m = new Map<number, { name: string; seccion: string | null }>();
    for (const a of alumnos) {
      const label =
        `${a.apellido ?? ""}, ${a.nombre ?? ""}`.replace(/,\s*$/, ",").trim() ||
        `Alumno #${a.id}`;
      const sec = (a as any)?.seccionActual?.nombre ?? null;
      m.set(a.id, { name: label, seccion: sec });
    }
    return m;
  }, [alumnos]);

  const personalById = useMemo(() => {
    const m = new Map<number, string>();
    for (const p of personal)
      m.set(p.id, `${p.apellido ?? ""} ${p.nombre ?? ""}`.trim());
    return m;
  }, [personal]);

  // VM
  const actasVM: ActaVM[] = useMemo(() => {
    return (actas ?? []).map((a) => {
      const al = alumnoIdx.get(a.alumnoId);
      const firmado =
        ((a as any).firmadoPorNombre as string | undefined) ??
        personalById.get((a as any).firmadoPorPersonalId) ??
        null;
      return {
        id: a.id,
        alumnoId: a.alumnoId,
        alumno: al?.name ?? `Alumno #${a.alumnoId}`,
        seccion: al?.seccion ?? null,
        fecha: a.fechaSuceso,
        descripcion: a.descripcion ?? "",
        estado: (a as any).estado,
        creadoPor: a.creadoPor ?? null,
        informanteId: a.informanteId,
        firmadoPorNombre: firmado,
      };
    });
  }, [actas, alumnoIdx, personalById]);

  // Listado de alumnos únicos para filtro
  const alumnoOptions = useMemo(() => {
    const set = new Map<number, string>();
    for (const a of actasVM) set.set(a.alumnoId, a.alumno);
    return Array.from(set.entries()).sort((x, y) => x[1].localeCompare(y[1]));
  }, [actasVM]);

  // Resumen
  const total = actasVM.length;
  const firmadas = actasVM.filter(
    (a) => String(a.estado).toUpperCase() === "CERRADA",
  ).length;
  const pendientes = total - firmadas;
  const pctFirmadas = total > 0 ? Math.round((firmadas / total) * 100) : 0;

  // Filtro general
  const filtered = useMemo(() => {
    const term = q.trim().toLowerCase();
    const alumnoIdNum = alumnoFilterId !== "all" ? Number(alumnoFilterId) : NaN;
    return actasVM
      .filter((a) => {
        if (!Number.isNaN(alumnoIdNum) && a.alumnoId !== alumnoIdNum)
          return false;
        if (
          estadoFilter === "firmadas" &&
          String(a.estado).toUpperCase() !== "CERRADA"
        )
          return false;
        if (
          estadoFilter === "pendientes" &&
          String(a.estado).toUpperCase() === "CERRADA"
        )
          return false;
        if (fromDate && a.fecha < fromDate) return false;
        if (toDate && a.fecha > toDate) return false;
        if (!term) return true;
        const blob =
          `${a.alumno} ${a.seccion ?? ""} ${a.creadoPor ?? ""} ${a.firmadoPorNombre ?? ""} ${a.descripcion}`.toLowerCase();
        return blob.includes(term);
      })
      .sort((a, b) => (b.fecha ?? "").localeCompare(a.fecha ?? ""));
  }, [actasVM, alumnoFilterId, estadoFilter, fromDate, toDate, q]);

  const refresh = async () => {
    const res = await api.actasAccidente.list();
    setActas(res.data ?? []);
  };

  const exportCSV = () => {
    const rows = [
      [
        "ID",
        "Alumno",
        "Sección",
        "Fecha",
        "Estado",
        "Creada por",
        "Firmó",
        "Descripción",
      ],
      ...filtered.map((a) => [
        a.id,
        a.alumno,
        a.seccion ?? "-",
        a.fecha,
        String(a.estado),
        a.creadoPor ?? "-",
        a.firmadoPorNombre ?? "-",
        (a.descripcion ?? "").replace(/\n/g, " ").slice(0, 1000),
      ]),
    ];
    const csv = rows
      .map((r) =>
        r
          .map((v) => {
            const s = String(v ?? "");
            return /[",;\n]/.test(s) ? `"${s.replace(/"/g, '""')}"` : s;
          })
          .join(";"),
      )
      .join("\n");
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `actas-${todayISO()}.csv`;
    a.click();
    URL.revokeObjectURL(url);
  };
  // Bloqueo de acceso para familias/alumnos/invitado
  if (noAccess) {
    return (
      <DashboardLayout>
        <div className="p-6 text-sm">
          403 — No tenés acceso a Actas de Accidentes.
        </div>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout>
      <div className="flex-1 space-y-6 p-4 md:p-8 pt-6">
        {/* Header */}
        <div className="flex items-center justify-between gap-3">
          <div>
            <h2 className="text-3xl font-bold tracking-tight">
              Actas de Accidentes
            </h2>
            <p className="text-muted-foreground">
              {isDirector
                ? "Dirección — (edición/eliminación deshabilitadas por backend)"
                : isAdmin || isSecret
                  ? "Administración/Secretaría — solo lectura"
                  : "Docentes — creación (edición no soportada por backend)"}
            </p>
          </div>
          <div className="flex items-center gap-2">
            {(isDirector || isAdmin || isSecret) && (
              <Button variant="outline" onClick={exportCSV}>
                <Download className="h-4 w-4 mr-1" /> Exportar CSV
              </Button>
            )}
            {canCreate && (
              <NewActaDialog
                mode={isDirector ? "global" : "teacher"}
                open={openNew}
                onOpenChange={setOpenNew}
                onCreated={refresh}
              >
                <Button>
                  <Plus className="h-4 w-4 mr-1" /> Nueva Acta
                </Button>
              </NewActaDialog>
            )}
          </div>
        </div>

        {/* Filtros (alumno, fecha, estado) */}
        <div className="flex flex-wrap items-center gap-3">
          {/* Alumno */}
          <Select value={alumnoFilterId} onValueChange={setAlumnoFilterId}>
            <SelectTrigger className="w-[260px]">
              <SelectValue placeholder="Filtrar por alumno" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">Todos los alumnos</SelectItem>
              {alumnoOptions.map(([id, name]) => (
                <SelectItem key={id} value={String(id)}>
                  {name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>

          {/* Estado */}
          <Select
            value={estadoFilter}
            onValueChange={(v) => setEstadoFilter(v as any)}
          >
            <SelectTrigger className="w-[160px]">
              <SelectValue placeholder="Estado" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="todas">Todas</SelectItem>
              <SelectItem value="firmadas">Firmadas</SelectItem>
              <SelectItem value="pendientes">Pendientes</SelectItem>
            </SelectContent>
          </Select>

          {/* Fechas */}
          <div className="flex items-center gap-2">
            <Input
              type="date"
              value={fromDate}
              onChange={(e) => setFromDate(e.target.value)}
            />
            <span className="text-xs text-muted-foreground">a</span>
            <Input
              type="date"
              value={toDate}
              onChange={(e) => setToDate(e.target.value)}
            />
          </div>

          {/* Búsqueda libre */}
          <div className="relative w-full sm:max-w-sm">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              placeholder="Buscar texto (alumno/creador/firmante/descr.)"
              value={q}
              onChange={(e) => setQ(e.target.value)}
              className="pl-10"
            />
          </div>
        </div>

        {/* Estadísticas */}
        <div className="grid gap-4 md:grid-cols-3">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">
                Total de Actas
              </CardTitle>
              <FileText className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{total}</div>
              <p className="text-xs text-muted-foreground">Acumulado</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">
                Actas Firmadas
              </CardTitle>
              <CheckCircle className="h-4 w-4 text-green-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-600">
                {firmadas}
              </div>
              <p className="text-xs text-muted-foreground">
                {pctFirmadas}% del total
              </p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Pendientes</CardTitle>
              <AlertTriangle className="h-4 w-4 text-orange-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-orange-600">
                {pendientes}
              </div>
              <p className="text-xs text-muted-foreground">Requieren firma</p>
            </CardContent>
          </Card>
        </div>

        {/* Listado tipo cartas */}
        <TooltipProvider delayDuration={200}>
          <Card>
            <CardHeader>
              <CardTitle>Actas</CardTitle>
              <CardDescription>
                Consulta completa (aplican filtros)
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {loading && <div className="text-sm">Cargando…</div>}

                {!loading &&
                  filtered.map((a) => {
                    const isFirmada =
                      String(a.estado).toUpperCase() === "CERRADA";
                    return (
                      <div
                        key={a.id}
                        className="flex items-start justify-between border rounded-lg p-3"
                      >
                        <div className="flex-1">
                          <div className="flex flex-wrap items-center gap-x-4 gap-y-1">
                            <div className="font-medium">{a.alumno}</div>
                            <div className="text-xs text-muted-foreground">
                              {a.seccion ?? "—"}
                            </div>
                            <div className="text-xs text-muted-foreground">
                              {a.fecha}
                            </div>
                          </div>
                          <div className="mt-1 text-sm line-clamp-2 text-muted-foreground whitespace-pre-wrap">
                            {a.descripcion || "—"}
                          </div>
                          <div className="mt-1 flex flex-wrap items-center gap-2 text-xs">
                            <Badge
                              variant={isFirmada ? "default" : "destructive"}
                            >
                              {isFirmada ? "Firmada" : "Pendiente"}
                            </Badge>
                            {a.creadoPor && (
                              <Badge variant="outline">
                                Creada por: {a.creadoPor}
                              </Badge>
                            )}
                            {a.firmadoPorNombre && (
                              <Badge variant="secondary">
                                Firmó: {a.firmadoPorNombre}
                              </Badge>
                            )}
                          </div>
                        </div>

                        <div className="ml-3 flex items-center gap-2">
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => setViewActa(a)}
                          >
                            <Eye className="h-4 w-4 mr-1" /> Ver
                          </Button>

                          {/* Editar/Eliminar deshabilitados por backend */}
                          {showDisabledEdit && (
                            <>
                              <Tooltip>
                                <TooltipTrigger asChild>
                                  <Button variant="outline" size="sm" disabled>
                                    <Edit className="h-4 w-4 mr-1" /> Editar
                                  </Button>
                                </TooltipTrigger>
                                <TooltipContent>
                                  El backend actual no expone PUT/PATCH para
                                  editar.
                                </TooltipContent>
                              </Tooltip>

                              <Tooltip>
                                <TooltipTrigger asChild>
                                  <Button variant="outline" size="sm" disabled>
                                    <Trash2 className="h-4 w-4" />
                                  </Button>
                                </TooltipTrigger>
                                <TooltipContent>
                                  El backend actual no expone DELETE para
                                  eliminar.
                                </TooltipContent>
                              </Tooltip>
                            </>
                          )}

                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => {
                              const w = window.open("", "_blank");
                              if (!w) return;
                              w.document.write(`
                            <html><head><title>Acta ${a.id}</title></head>
                            <body>
                              <h2>Acta de Accidente #${a.id}</h2>
                              <p><b>Alumno:</b> ${a.alumno}</p>
                              <p><b>Fecha:</b> ${a.fecha}</p>
                              <p><b>Sección:</b> ${a.seccion ?? "—"}</p>
                              <p><b>Estado:</b> ${isFirmada ? "Firmada" : "Pendiente"}</p>
                              ${a.firmadoPorNombre ? `<p><b>Firmó:</b> ${a.firmadoPorNombre}</p>` : ""}
                              <hr/>
                              <pre style="white-space:pre-wrap;font-family:inherit;">${a.descripcion ?? ""}</pre>
                            </body></html>
                          `);
                              w.document.close();
                              w.focus();
                              w.print();
                            }}
                          >
                            <Printer className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    );
                  })}

                {!loading && filtered.length === 0 && (
                  <div className="text-sm text-muted-foreground">
                    No hay actas para el criterio seleccionado.
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TooltipProvider>

        {/* Ver detalle */}
        {viewActa && (
          <ViewActaDialog acta={viewActa} onClose={() => setViewActa(null)} />
        )}
      </div>
    </DashboardLayout>
  );
}
"use client";

import { useEffect, useMemo, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { DashboardLayout } from "@/app/dashboard/dashboard-layout";
import { NewJornadaDialog } from "@/app/dashboard/asistencia/_components/NewJornadaDialog";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardDescription,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Calendar, ArrowLeft, RefreshCcw, Plus } from "lucide-react";
import { api } from "@/services/api";
import type {
  SeccionDTO,
  AsistenciaDiaDTO,
  AsistenciaAcumuladoDTO,
  AsistenciaAlumnoResumenDTO,
} from "@/types/api-generated";
import { toast } from "sonner";

function fmt(iso?: string) {
  if (!iso) return "—";
  const d = new Date(iso);
  return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, "0")}-${String(d.getDate()).padStart(2, "0")}`;
}
function alumnoDisplayName(row: any) {
  return (
    row?.nombreCompleto ??
    (row?.apellido && row?.nombre ? `${row.apellido}, ${row.nombre}` : null) ??
    row?.alumnoNombre ??
    row?.nombre ??
    `Alumno #${row?.matriculaId ?? row?.alumnoId ?? "?"}`
  );
}

export default function SeccionHistorialPage() {
  const { id } = useParams<{ id: string }>();
  const seccionId = Number(id);
  const router = useRouter();

  const [seccion, setSeccion] = useState<SeccionDTO | null>(null);
  const [loadingSec, setLoadingSec] = useState<boolean>(true);
  const [secErr, setSecErr] = useState<string | null>(null);

  // Rango por defecto: últimos 30 días
  const today = new Date();
  const [from, setFrom] = useState(
    fmt(
      new Date(
        today.getFullYear(),
        today.getMonth(),
        today.getDate() - 30,
      ).toISOString(),
    ),
  );
  const [to, setTo] = useState(fmt(today.toISOString()));

  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState<string | null>(null);

  const [historial, setHistorial] = useState<AsistenciaDiaDTO[]>([]);
  const [acumulado, setAcumulado] = useState<AsistenciaAcumuladoDTO | null>(
    null,
  );
  const [resumen, setResumen] = useState<AsistenciaAlumnoResumenDTO[]>([]);

  useEffect(() => {
    (async () => {
      try {
        setLoadingSec(true);
        const res = await api.secciones.list();
        const s =
          (res.data ?? []).find((x: SeccionDTO) => x.id === seccionId) ?? null;
        setSeccion(s);
      } catch (e: any) {
        setSecErr(
          e?.response?.data?.message ??
            e?.message ??
            "No pude obtener la sección.",
        );
      } finally {
        setLoadingSec(false);
      }
    })();
  }, [seccionId]);

  const loadAll = async () => {
    try {
      setLoading(true);
      setErr(null);
      const [hRes, aRes, rRes] = await Promise.all([
        api.asistencias.historialSeccion(seccionId, from, to),
        api.asistencias.acumuladoSeccion(seccionId, from, to),
        api.asistencias.resumenPorAlumno(seccionId, from, to),
      ]);
      setHistorial(hRes.data ?? []);
      setAcumulado(aRes.data ?? null);
      setResumen(rRes.data ?? []);
    } catch (e: any) {
      const msg =
        e?.response?.status === 400
          ? "Rango inválido o parámetros faltantes (from/to)."
          : e?.response?.status === 403
            ? "No tenés permisos para ver esta información (403)."
            : (e?.response?.data?.message ??
              e?.message ??
              "Error al cargar datos.");
      setErr(msg);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (Number.isFinite(seccionId)) loadAll();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [seccionId, from, to]);

  const promedio = useMemo(
    () => (acumulado ? Math.round(acumulado.porcentaje ?? 0) : 0),
    [acumulado],
  );

  return (
    <DashboardLayout>
      <div className="p-4 md:p-8 space-y-6">
        <Button
          variant="outline"
          onClick={() => router.push("/dashboard/asistencia")}
        >
          <ArrowLeft className="h-4 w-4 mr-1" />
          Volver
        </Button>

        <div className="flex flex-col gap-3 md:flex-row md:items-center md:justify-between">
          <div>
            <h2 className="text-2xl font-bold">
              Historial — Sección{" "}
              {seccion
                ? `${seccion.gradoSala} ${seccion.division}`
                : loadingSec
                  ? "cargando…"
                  : `#${seccionId}`}
            </h2>
            <p className="text-sm text-muted-foreground">
              Turno: {seccion?.turno ?? "—"}
            </p>
            {secErr && <p className="text-sm text-red-600">{secErr}</p>}
          </div>

          <div className="flex items-center gap-2">
            <input
              type="date"
              value={from}
              onChange={(e) => setFrom(e.target.value)}
              className="border rounded px-2 py-1 text-sm"
            />
            <span className="text-sm">→</span>
            <input
              type="date"
              value={to}
              onChange={(e) => setTo(e.target.value)}
              className="border rounded px-2 py-1 text-sm"
            />
            <Button variant="outline" onClick={loadAll} title="Actualizar">
              <RefreshCcw className="h-4 w-4 mr-2" />
              Actualizar
            </Button>
          </div>
        </div>

        {loading && <div className="text-sm">Cargando…</div>}
        {err && <div className="text-sm text-red-600">{err}</div>}

        {!loading && !err && (
          <>
            <Card>
              <CardHeader>
                <CardTitle>Resumen del período</CardTitle>
                <CardDescription>
                  {from} → {to}
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex justify-between text-sm">
                  <span>Asistencia promedio</span>
                  <span>{promedio}%</span>
                </div>
                <Progress value={promedio} className="h-2" />
                {acumulado && (
                  <div className="text-sm text-muted-foreground">
                    Presentes: <b>{acumulado.presentes}</b> — Ausentes:{" "}
                    <b>{acumulado.ausentes}</b> — Registros:{" "}
                    <b>{acumulado.total}</b>
                  </div>
                )}
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-col gap-2 md:flex-row md:items-center md:justify-between">
                <div>
                  <CardTitle className="flex items-center">
                    <Calendar className="h-5 w-5 mr-2" />
                    Jornadas en el rango
                  </CardTitle>
                  <CardDescription>
                    Click en una fecha para ir al detalle. También podés crear
                    una nueva.
                  </CardDescription>
                </div>

                {seccion && (
                  <NewJornadaDialog
                    seccion={seccion}
                    trigger={
                      <Button>
                        <Plus className="h-4 w-4 mr-2" />
                        Nueva jornada
                      </Button>
                    }
                    onCreated={(jid) =>
                      router.push(`/dashboard/asistencia/jornada/${jid}`)
                    }
                  />
                )}
              </CardHeader>

              <CardContent className="space-y-2">
                {historial.length === 0 && (
                  <div className="text-sm text-muted-foreground">
                    No hay registros en el rango seleccionado.
                  </div>
                )}

                {historial.map((d) => (
                  <button
                    key={d.fecha}
                    className="w-full text-left"
                    onClick={async () => {
                      try {
                        const res =
                          await api.jornadasAsistencia.bySeccionFechaOne(
                            seccionId,
                            d.fecha,
                          );
                        const data: any = res.data;
                        let jId: number | undefined;
                        if (Array.isArray(data)) {
                          jId = data.sort(
                            (a, b) => (b.id ?? 0) - (a.id ?? 0),
                          )[0]?.id;
                        } else {
                          jId = data?.id;
                        }
                        if (!jId) {
                          toast.error("No hay jornada creada para esa fecha.");
                          return;
                        }
                        router.push(`/dashboard/asistencia/jornada/${jId}`);
                      } catch {
                        toast.error("No hay jornada creada para esa fecha.");
                      }
                    }}
                    title="Ver/editar detalle"
                  >
                    <div className="flex items-center justify-between border rounded p-2 hover:bg-gray-50">
                      <div className="flex items-center gap-3">
                        <Badge variant="outline">{fmt(d.fecha)}</Badge>
                        <span className="text-sm">
                          Presentes: <b>{d.presentes}</b> — Ausentes:{" "}
                          <b>{d.ausentes}</b> — %:{" "}
                          <b>{Math.round(d.porcentaje)}%</b>
                        </span>
                      </div>
                    </div>
                  </button>
                ))}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Asistencia por alumno</CardTitle>
                <CardDescription>
                  Porcentaje acumulado en el período
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                {resumen.map((r) => (
                  <div key={r.matriculaId} className="space-y-1">
                    <div className="flex justify-between text-sm">
                      <span className="font-medium">
                        {alumnoDisplayName(r as any)}
                      </span>
                      <span>
                        {Math.round(r.porcentaje)}% ({r.presentes}/
                        {r.presentes + r.ausentes})
                      </span>
                    </div>
                    <Progress
                      value={Math.round(r.porcentaje)}
                      className="h-2"
                    />
                  </div>
                ))}
              </CardContent>
            </Card>
          </>
        )}
      </div>
    </DashboardLayout>
  );
}
"use client";

import { useMemo, useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { api } from "@/services/api";
import { toast } from "sonner";
import type { SeccionDTO, TrimestreDTO } from "@/types/api-generated";

type Props = {
  seccion: SeccionDTO;
  trigger?: React.ReactNode;
  onCreated?: (jornadaId: number) => void;
};

function hoyISO(): string {
  const d = new Date();
  return d.toISOString().slice(0, 10);
}

export function NewJornadaDialog({ seccion, trigger, onCreated }: Props) {
  const [open, setOpen] = useState(false);
  const [fecha, setFecha] = useState<string>(hoyISO());
  const [creating, setCreating] = useState(false);

  const defaultTrigger = useMemo(
    () => <Button size="sm">Nueva Asistencia</Button>,
    [],
  );

  const handleCreate = async () => {
    try {
      setCreating(true);

      const triResp = await api.trimestres.list();
      const trimestres = (triResp.data ?? []) as TrimestreDTO[];
      const tri = trimestres.find((t) => {
        if (t.cerrado) return false;
        const fi = t.fechaInicio ?? "1900-01-01";
        const ff = t.fechaFin ?? "2999-12-31";
        return fecha >= fi && fecha <= ff;
      });

      if (!tri) {
        toast.warning("No hay trimestre activo para la fecha seleccionada.");
        return;
      }

      const body = { seccionId: seccion.id, fecha, trimestreId: tri.id };
      const resp = await api.jornadasAsistencia.create(body as any);
      const jornadaId = resp.data as number;

      toast.success(
        `Jornada creada — ${seccion.gradoSala} ${seccion.division} — ${fecha}`,
      );
      setOpen(false);
      onCreated?.(jornadaId);
    } catch (e: any) {
      const msg =
        e?.response?.data?.message ?? e?.message ?? "Error creando jornada";
      toast.error(msg);
    } finally {
      setCreating(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>{trigger ?? defaultTrigger}</DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>
            Nueva asistencia — {seccion.gradoSala} {seccion.division}
          </DialogTitle>
          <DialogDescription>
            Seleccioná la fecha (dentro del trimestre activo).
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-3">
          <div>
            <label className="text-sm mb-1 block">Fecha</label>
            <Input
              type="date"
              value={fecha}
              onChange={(e) => setFecha(e.target.value)}
            />
          </div>

          <div className="flex justify-end gap-2">
            <Button
              variant="outline"
              onClick={() => setOpen(false)}
              disabled={creating}
            >
              Cancelar
            </Button>
            <Button onClick={handleCreate} disabled={creating}>
              {creating ? "Creando..." : "Crear"}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
"use client";

import { useEffect, useMemo, useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { api } from "@/services/api";
import type {
  DetalleAsistenciaDTO,
  DetalleAsistenciaCreateDTO,
  AlumnoLiteDTO,
  EstadoAsistencia,
} from "@/types/api-generated";
import { Check, X, Loader2 } from "lucide-react";
import { toast } from "sonner";

type Props = {
  open: boolean;
  onOpenChange: (v: boolean) => void;
  seccionId: number;
  jornadaId: number;
  fecha: string; // YYYY-MM-DD
};

function fmt(iso?: string) {
  if (!iso) return "—";
  const d = new Date(iso);
  return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, "0")}-${String(d.getDate()).padStart(2, "0")}`;
}
function alumnoName(a: any) {
  return (
    a?.nombreCompleto ??
    (a?.apellido && a?.nombre ? `${a.apellido}, ${a.nombre}` : null) ??
    a?.alumnoNombre ??
    a?.nombre ??
    `Alumno #${a?.matriculaId ?? a?.alumnoId ?? "?"}`
  );
}

export default function DetalleDiaDialog({
  open,
  onOpenChange,
  seccionId,
  jornadaId,
  fecha,
}: Props) {
  const [loading, setLoading] = useState(true);
  const [alumnos, setAlumnos] = useState<AlumnoLiteDTO[]>([]);
  const [detalles, setDetalles] = useState<DetalleAsistenciaDTO[]>([]);
  const [savingId, setSavingId] = useState<number | null>(null);

  const detalleByMatricula = useMemo(() => {
    const m = new Map<number, DetalleAsistenciaDTO>();
    for (const d of detalles) m.set(d.matriculaId, d);
    return m;
  }, [detalles]);

  const presentes = detalles.filter((d) => d.estado === "PRESENTE").length;
  const total = alumnos.length || detalles.length;
  const porcentaje = total ? Math.round((presentes / total) * 100) : 0;

  useEffect(() => {
    if (!open) return;
    (async () => {
      try {
        setLoading(true);
        const [alRes, detRes] = await Promise.all([
          api.seccionesAlumnos.bySeccionId(seccionId, fecha),
          api.detallesAsistencia.byJornada(jornadaId),
        ]);
        setAlumnos(alRes.data ?? []);
        setDetalles(detRes.data ?? []);
      } catch (e: any) {
        toast.error(
          e?.response?.data?.message ??
            e?.message ??
            "No se pudo cargar el detalle",
        );
      } finally {
        setLoading(false);
      }
    })();
  }, [open, seccionId, jornadaId, fecha]);

  async function setEstado(matriculaId: number, estado: EstadoAsistencia) {
    try {
      setSavingId(matriculaId);
      const current = detalleByMatricula.get(matriculaId);
      if (current) {
        // Si no hay PUT, podés hacer delete + create. Aquí intento update:
        try {
          await api.detallesAsistencia.update(current.id, { estado } as any);
          setDetalles((prev) =>
            prev.map((d) => (d.id === current.id ? { ...d, estado } : d)),
          );
        } catch {
          await api.detallesAsistencia.delete(current.id);
          const body: DetalleAsistenciaCreateDTO = {
            jornadaId,
            matriculaId,
            estado,
            observacion: null,
          } as any;
          await api.detallesAsistencia.create(body);
          const reload = await api.detallesAsistencia.byJornada(jornadaId);
          setDetalles(reload.data ?? []);
        }
      } else {
        const body: DetalleAsistenciaCreateDTO = {
          jornadaId,
          matriculaId,
          estado,
          observacion: null,
        } as any;
        await api.detallesAsistencia.create(body);
        const reload = await api.detallesAsistencia.byJornada(jornadaId);
        setDetalles(reload.data ?? []);
      }
    } catch (e: any) {
      toast.error(
        e?.response?.data?.message ?? e?.message ?? "No se pudo guardar",
      );
    } finally {
      setSavingId(null);
    }
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-3xl">
        <DialogHeader>
          <DialogTitle>Asistencia del {fmt(fecha)}</DialogTitle>
          <DialogDescription>
            Marcá presente/ausente por alumno.
          </DialogDescription>
        </DialogHeader>

        {loading ? (
          <div className="flex items-center gap-2 text-sm">
            <Loader2 className="h-4 w-4 animate-spin" />
            Cargando…
          </div>
        ) : (
          <div className="space-y-4">
            <div className="border rounded p-3 text-sm">
              <div className="flex justify-between">
                <span>
                  Presentes: <b>{presentes}</b> / Total: <b>{total}</b>
                </span>
                <span>
                  Porcentaje: <b>{porcentaje}%</b>
                </span>
              </div>
              <Progress value={porcentaje} className="h-2 mt-2" />
            </div>

            <div className="space-y-2">
              {alumnos.map((a) => {
                const d = detalleByMatricula.get(a.matriculaId);
                const status = d?.estado ?? null;
                const isSaving = savingId === a.matriculaId;

                return (
                  <div
                    key={a.matriculaId}
                    className="flex items-center justify-between border rounded p-2"
                  >
                    <div className="flex items-center gap-3">
                      <Badge variant="outline">#{a.matriculaId}</Badge>
                      <div className="text-sm font-medium">{alumnoName(a)}</div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button
                        variant={status === "PRESENTE" ? "default" : "outline"}
                        disabled={isSaving}
                        onClick={() => setEstado(a.matriculaId, "PRESENTE")}
                      >
                        {isSaving ? (
                          <Loader2 className="h-4 w-4 mr-1 animate-spin" />
                        ) : (
                          <Check className="h-4 w-4 mr-1" />
                        )}
                        Presente
                      </Button>
                      <Button
                        variant={status === "AUSENTE" ? "default" : "outline"}
                        disabled={isSaving}
                        onClick={() => setEstado(a.matriculaId, "AUSENTE")}
                      >
                        {isSaving ? (
                          <Loader2 className="h-4 w-4 mr-1 animate-spin" />
                        ) : (
                          <X className="h-4 w-4 mr-1" />
                        )}
                        Ausente
                      </Button>
                    </div>
                  </div>
                );
              })}
              {alumnos.length === 0 && (
                <div className="text-sm text-muted-foreground">
                  No hay alumnos activos en esta fecha.
                </div>
              )}
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}
"use client";
import { useEffect, useMemo, useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Calendar, Plus, Eye } from "lucide-react";
import { useAsistenciasData } from "@/hooks/useAsistenciasData";
import { useAuth } from "@/context/AuthContext";
import NuevaAsistenciaDialog from "./NuevaAsistenciaDialog";
import DetalleDiaDialog from "./DetalleDiaDialog";
import type { JornadaAsistenciaDTO, SeccionDTO } from "@/types/api-generated";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogTrigger,
} from "@/components/ui/dialog";

const DBG = !!process.env.NEXT_PUBLIC_DEBUG;
const dlog = (...a: any[]) => DBG && console.log("[VistaDocente]", ...a);
const dgrp = (title: string) =>
  DBG ? console.groupCollapsed(`[VistaDocente] ${title}`) : null;
const dgrpEnd = () => (DBG ? console.groupEnd() : null);

function fmt(iso?: string) {
  if (!iso) return "—";
  const d = new Date(iso);
  return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, "0")}-${String(d.getDate()).padStart(2, "0")}`;
}

export default function VistaDocente() {
  const { user } = useAuth();
  const docenteId = user?.personaId ?? 0;

  const {
    loading,
    trimestres,
    secciones,
    asignaciones,
    searchJornadas,
    loadDetallesByJornada,
    loadAlumnosSeccion,
  } = useAsistenciasData();

  // ===== DEBUG: primer snapshot al montar / al cambiar dependencias =====
  useEffect(() => {
    dgrp("snapshot inicial");
    dlog("user", user);
    dlog("docenteId (personaId)", docenteId);
    dlog("trimestres", trimestres);
    dlog("secciones", secciones);
    dlog("asignaciones", asignaciones);
    dgrpEnd();
  }, [user, docenteId, trimestres, secciones, asignaciones]);

  const seccionesDocente: SeccionDTO[] = useMemo(() => {
    const setIds = new Set(
      asignaciones
        .filter((a) => a.docenteId === docenteId)
        .map((a) => a.seccionId),
    );
    const res = secciones.filter((s) => setIds.has(s.id));

    dgrp("calculo seccionesDocente");
    dlog("docenteId", docenteId);
    dlog(
      "asignaciones filtradas",
      asignaciones.filter((a) => a.docenteId === docenteId),
    );
    dlog("ids seccion asignadas", Array.from(setIds));
    dlog("seccionesDocente result", res);
    dgrpEnd();

    return res;
  }, [asignaciones, secciones, docenteId]);

  const trimestreHoy = useMemo(() => {
    const nowIso = new Date().toISOString();
    const nowKey = fmt(nowIso);

    const t =
      trimestres.find(
        (tr) =>
          !tr.cerrado &&
          nowKey >= fmt(tr.fechaInicio ?? undefined) &&
          nowKey <= fmt(tr.fechaFin ?? undefined),
      ) ?? null;

    dgrp("calculo trimestreHoy");
    dlog("nowKey", nowKey);
    dlog("trimestre elegido", t);
    dgrpEnd();

    return t;
  }, [trimestres]);

  const [openNuevaFor, setOpenNuevaFor] = useState<number | null>(null);
  const [selected, setSelected] = useState<{
    jornada: JornadaAsistenciaDTO;
    seccionId: number;
  } | null>(null);
  const [historial, setHistorial] = useState<
    Record<number, JornadaAsistenciaDTO[]>
  >({}); // seccionId -> jornadas

  const openHistorial = async (seccionId: number) => {
    dgrp("openHistorial()");
    dlog("params", { seccionId });

    try {
      const js = await searchJornadas({ seccionId });
      dlog("searchJornadas() response", js);

      setHistorial((h) => {
        const sorted = js.sort((a, b) =>
          (b.fecha ?? "").localeCompare(a.fecha ?? ""),
        );
        const next = { ...h, [seccionId]: sorted };
        dlog("historial(new state)[seccionId]", next[seccionId]);
        return next;
      });
    } catch (err) {
      console.error("[VistaDocente] openHistorial error", err);
    } finally {
      dgrpEnd();
    }
  };

  if (loading) return <p className="p-4">Cargando…</p>;

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {seccionesDocente.map((sec) => {
          const jornadasSec = historial[sec.id] ?? [];
          const promedio = 100; // placeholder si no abriste historial

          return (
            <Card key={sec.id} className="hover:shadow-md transition-shadow">
              <CardHeader className="pb-3">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-lg">
                    {sec.gradoSala} {sec.division}
                  </CardTitle>
                </div>
                <CardDescription>
                  Promedio aprox: {promedio}% — Última:{" "}
                  {jornadasSec[0]?.fecha ? fmt(jornadasSec[0].fecha) : "—"}
                </CardDescription>
              </CardHeader>

              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>Asistencia Promedio</span>
                    <span>{promedio}%</span>
                  </div>
                  <Progress value={promedio} className="h-2" />
                </div>

                <div className="flex gap-2">
                  <Button
                    size="sm"
                    className="flex-1"
                    disabled={!trimestreHoy}
                    onClick={() => {
                      dlog("click Nueva Asistencia", {
                        seccionId: sec.id,
                        trimestreHoy,
                      });
                      setOpenNuevaFor(sec.id);
                    }}
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Nueva Asistencia
                  </Button>

                  <Dialog onOpenChange={(o) => o && openHistorial(sec.id)}>
                    <DialogTrigger asChild>
                      <Button variant="outline" size="sm">
                        <Calendar className="h-4 w-4 mr-2" />
                        Historial
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="max-w-2xl">
                      <DialogHeader>
                        <DialogTitle>
                          Historial — {sec.gradoSala} {sec.division}
                        </DialogTitle>
                        <DialogDescription>
                          Asistencias diarias
                        </DialogDescription>
                      </DialogHeader>
                      <div className="space-y-2">
                        {(historial[sec.id] ?? []).map((j) => (
                          <div
                            key={j.id}
                            className="flex items-center justify-between border rounded p-2"
                          >
                            <div className="flex items-center gap-3">
                              <Badge variant="outline">{fmt(j.fecha)}</Badge>
                            </div>
                            <div className="flex gap-2">
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={async () => {
                                  dgrp("Ver/Editar día");
                                  dlog("jornada", j);
                                  try {
                                    await loadDetallesByJornada(j.id);
                                    setSelected({
                                      jornada: j,
                                      seccionId: sec.id,
                                    });
                                  } catch (e) {
                                    console.error(
                                      "[VistaDocente] loadDetallesByJornada error",
                                      e,
                                    );
                                  } finally {
                                    dgrpEnd();
                                  }
                                }}
                              >
                                <Eye className="h-4 w-4 mr-1" /> Ver / Editar
                              </Button>
                            </div>
                          </div>
                        ))}
                      </div>
                    </DialogContent>
                  </Dialog>
                </div>

                {openNuevaFor === sec.id && (
                  <NuevaAsistenciaDialog
                    open
                    onOpenChange={(v) => setOpenNuevaFor(v ? sec.id : null)}
                    seccion={sec}
                    trimestre={trimestreHoy}
                    alumnos={[]}
                    onCreated={() => {
                      dlog("Nueva asistencia creada → refresco historial", {
                        seccionId: sec.id,
                      });
                      openHistorial(sec.id);
                    }}
                    // (opcional) ejemplo de carga de alumnos con logging
                    loadAlumnos={async () => {
                      try {
                        const rows = await loadAlumnosSeccion(sec.id);
                        dlog("alumnos de la sección", {
                          seccionId: sec.id,
                          rows,
                        });
                        return rows;
                      } catch (e) {
                        console.error(
                          "[VistaDocente] loadAlumnosSeccion error",
                          e,
                        );
                        return [];
                      }
                    }}
                  />
                )}
              </CardContent>
            </Card>
          );
        })}
      </div>

      {selected && (
        <DetalleDiaDialog
          open
          onOpenChange={() => setSelected(null)}
          jornada={selected.jornada}
          detalles={[]}
          alumnos={[]}
          editable={true}
          onUpdated={() => {
            dlog("Detalles actualizados → refresco historial", {
              seccionId: selected.seccionId,
            });
            openHistorial(selected.seccionId);
          }}
        />
      )}
    </>
  );
}
"use client";
import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import { Progress } from "@/components/ui/progress";
import { toast } from "sonner";
import { api } from "@/services/api";
import type {
  EstadoAsistencia,
  JornadaAsistenciaCreateDTO,
  AlumnoLiteDTO,
  SeccionDTO,
  TrimestreDTO,
  DetalleAsistenciaCreateDTO,
} from "@/types/api-generated";

function fmt(d?: string | null) {
  if (!d) return "";
  const x = new Date(d);
  return `${x.getFullYear()}-${String(x.getMonth() + 1).padStart(2, "0")}-${String(x.getDate()).padStart(2, "0")}`;
}

export default function NuevaAsistenciaDialog({
  open,
  onOpenChange,
  seccion,
  trimestre,
  alumnos,
  onCreated,
}: {
  open: boolean;
  onOpenChange: (v: boolean) => void;
  seccion: SeccionDTO;
  trimestre: TrimestreDTO | null;
  alumnos: AlumnoLiteDTO[];
  onCreated: () => void;
}) {
  const [fecha, setFecha] = useState<string>(fmt(new Date().toISOString()));
  const [modo, setModo] = useState<"paso" | "tabla">("paso");
  const [index, setIndex] = useState(0);
  const [marcas, setMarcas] = useState<Record<number, EstadoAsistencia>>({});

  useEffect(() => {
    if (!open) return;
    setFecha(fmt(new Date().toISOString()));
    setModo("paso");
    setIndex(0);
    setMarcas({});
  }, [open]);

  const dentro =
    !!trimestre &&
    fecha >= fmt(trimestre?.fechaInicio ?? undefined) &&
    fecha <= fmt(trimestre?.fechaFin ?? undefined);
  const marcar = (matriculaId: number, estado: EstadoAsistencia) =>
    setMarcas((m) => ({ ...m, [matriculaId]: estado }));

  const guardar = async () => {
    if (!trimestre) {
      toast.error("No hay trimestre activo");
      return;
    }
    try {
      const bodyJ: JornadaAsistenciaCreateDTO = {
        seccionId: seccion.id,
        fecha,
        trimestreId: trimestre.id,
      } as any;
      const jornadaId = (await api.jornadasAsistencia.create(bodyJ))
        .data as unknown as number;

      const payload: DetalleAsistenciaCreateDTO[] = alumnos.map((a) => ({
        jornadaId,
        matriculaId: a.matriculaId,
        estado: marcas[a.matriculaId] ?? "PRESENTE",
        observacion: null,
      })) as any;

      await api.detallesAsistencia.bulk(payload);
      toast.success("Asistencia guardada");
      onOpenChange(false);
      onCreated();
    } catch {
      toast.error("Error al guardar");
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>
            Nueva Asistencia — {seccion.gradoSala} {seccion.division}
          </DialogTitle>
          <DialogDescription>Elegí la fecha y el modo</DialogDescription>
        </DialogHeader>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <Label>Fecha</Label>
            <Input
              type="date"
              value={fecha}
              min={fmt(trimestre?.fechaInicio ?? undefined)}
              max={fmt(trimestre?.fechaFin ?? undefined)}
              onChange={(e) => setFecha(e.target.value)}
            />
            {!dentro && (
              <p className="text-xs text-red-600 mt-1">Fuera del trimestre</p>
            )}
          </div>
          <div>
            <Label>Modo</Label>
            <Select value={modo} onValueChange={(v) => setModo(v as any)}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="paso">Paso a paso</SelectItem>
                <SelectItem value="tabla">Tabla</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        {modo === "paso" ? (
          <div className="mt-4 text-center">
            {alumnos.length ? (
              <>
                <p className="text-sm text-gray-600 mb-1">
                  {index + 1} / {alumnos.length}
                </p>
                <h3 className="text-xl font-semibold mb-4">
                  {alumnos[index].nombreCompleto}
                </h3>
                <div className="flex gap-2 justify-center">
                  <Button
                    onClick={() =>
                      marcar(alumnos[index].matriculaId, "PRESENTE")
                    }
                  >
                    Presente
                  </Button>
                  <Button
                    variant="destructive"
                    onClick={() =>
                      marcar(alumnos[index].matriculaId, "AUSENTE")
                    }
                  >
                    Ausente
                  </Button>
                </div>
                <div className="flex justify-between mt-4">
                  <Button
                    variant="outline"
                    onClick={() => setIndex((i) => Math.max(0, i - 1))}
                  >
                    Anterior
                  </Button>
                  <Button
                    variant="outline"
                    onClick={() =>
                      setIndex((i) => Math.min(alumnos.length - 1, i + 1))
                    }
                  >
                    Siguiente
                  </Button>
                </div>
              </>
            ) : (
              <p className="text-sm text-gray-600">No hay alumnos</p>
            )}
          </div>
        ) : (
          <div className="mt-4 space-y-2">
            {alumnos.map((a) => {
              const estado = marcas[a.matriculaId] ?? "PRESENTE";
              return (
                <div
                  key={a.matriculaId}
                  className="flex items-center justify-between border rounded p-2"
                >
                  <span className="text-sm">{a.nombreCompleto}</span>
                  <div className="flex gap-2">
                    <Button
                      size="sm"
                      variant={estado === "PRESENTE" ? "default" : "outline"}
                      onClick={() => marcar(a.matriculaId, "PRESENTE")}
                    >
                      Presente
                    </Button>
                    <Button
                      size="sm"
                      variant={estado === "AUSENTE" ? "destructive" : "outline"}
                      onClick={() => marcar(a.matriculaId, "AUSENTE")}
                    >
                      Ausente
                    </Button>
                  </div>
                </div>
              );
            })}
          </div>
        )}

        <DialogFooter className="mt-4">
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancelar
          </Button>
          <Button onClick={guardar} disabled={!dentro || !alumnos.length}>
            Guardar
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
"use client";
import { useMemo, useState } from "react";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { FileText, Plus } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { useAsistenciasData } from "@/hooks/useAsistenciasData";
import { api } from "@/services/api";
import { toast } from "sonner";

function fmt(iso?: string) {
  if (!iso) return "";
  const d = new Date(iso);
  return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, "0")}-${String(d.getDate()).padStart(2, "0")}`;
}

export default function VistaDireccion() {
  const {
    loading,
    trimestres,
    jornadas,
    detalles,
    diasNoHabiles,
    secciones,
    refreshBase,
  } = useAsistenciasData();

  const [mes, setMes] = useState<string>(
    `${new Date().getFullYear()}-${String(new Date().getMonth() + 1).padStart(2, "0")}`,
  );
  const [nuevoTrimestre, setNuevoTrimestre] = useState<{
    inicio?: string;
    fin?: string;
  }>({});
  const [modalTri, setModalTri] = useState(false);
  const [modalNoHabil, setModalNoHabil] = useState(false);
  const [noHabilFecha, setNoHabilFecha] = useState<string>(
    fmt(new Date().toISOString()),
  );

  const [year, month] = mes.split("-").map(Number);
  const start = new Date(year, (month ?? 1) - 1, 1).toISOString();
  const end = new Date(year, month ?? 1, 0).toISOString();

  const diasNoHabilesEnMes = useMemo(
    () =>
      diasNoHabiles.filter((d) => d.fecha >= start && d.fecha <= end).length,
    [diasNoHabiles, start, end],
  );

  const cierreMensual = secciones.map((s) => {
    const jor = jornadas.filter(
      (j) => j.seccionId === s.id && j.fecha >= start && j.fecha <= end,
    );
    const det = detalles.filter((d) => jor.some((j) => j.id === d.jornadaId));
    const total = det.length || 1;
    const pres = det.filter((d) => d.estado === "PRESENTE").length;
    const pct = Math.round((pres / total) * 100);
    return { s, pct, jCount: jor.length };
  });

  const crearTrimestre = async () => {
    try {
      if (!nuevoTrimestre.inicio || !nuevoTrimestre.fin) {
        toast.error("Completá fechas");
        return;
      }
      await api.trimestres.create({
        periodoEscolarId: 1,
        orden: (trimestres.length % 3) + 1,
        fechaInicio: nuevoTrimestre.inicio,
        fechaFin: nuevoTrimestre.fin,
      } as any);
      toast.success("Trimestre creado");
      setModalTri(false);
      await refreshBase();
    } catch {
      toast.error("Error");
    }
  };

  const crearNoHabil = async () => {
    try {
      await api.diasNoHabiles.create({
        fecha: noHabilFecha,
        motivo: "No hábil",
      });
      toast.success("Día no hábil creado");
      setModalNoHabil(false);
      await refreshBase();
    } catch {
      toast.error("Error");
    }
  };

  if (loading) return <p className="p-4">Cargando…</p>;

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Períodos</CardTitle>
          <CardDescription>Trimestres escolares</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex justify-between mb-3">
            <div className="text-sm">Total: {trimestres.length}</div>
            <Button onClick={() => setModalTri(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Nuevo Trimestre
            </Button>
          </div>
          <div className="space-y-2">
            {trimestres
              .sort((a, b) =>
                (a.fechaInicio ?? "").localeCompare(b.fechaInicio ?? ""),
              )
              .map((t) => (
                <div
                  key={t.id}
                  className="flex items-center justify-between border rounded p-2"
                >
                  <div className="text-sm">
                    <span className="font-medium">Trimestre {t.orden}</span>{" "}
                    <span className="text-gray-600">
                      ({fmt(t.fechaInicio)} — {fmt(t.fechaFin)})
                    </span>
                  </div>
                  <Badge variant={t.cerrado ? "destructive" : "default"}>
                    {t.cerrado ? "Cerrado" : "Abierto"}
                  </Badge>
                </div>
              ))}
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Cierres mensuales</CardTitle>
          <CardDescription>Consolidado {mes}</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center gap-2">
            <Label>Mes</Label>
            <Input
              type="month"
              value={mes}
              onChange={(e) => setMes(e.target.value)}
              className="w-48"
            />
          </div>
          <div className="space-y-2">
            {cierreMensual.map(({ s, pct, jCount }) => (
              <div
                key={s.id}
                className="flex items-center justify-between border rounded p-2"
              >
                <div className="space-y-0.5">
                  <div className="text-sm font-medium">
                    {s.gradoSala} {s.division}
                  </div>
                  <div className="text-xs text-gray-600">
                    Jornadas: {jCount} — Días no hábiles: {diasNoHabilesEnMes}
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  <div className="text-sm">{pct}%</div>
                  <Progress value={pct} className="w-40 h-2" />
                  <Button variant="outline" size="sm">
                    <FileText className="h-4 w-4 mr-2" />
                    PDF
                  </Button>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Días no hábiles</CardTitle>
          <CardDescription>Declaración</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex justify-end mb-3">
            <Button onClick={() => setModalNoHabil(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Nuevo día no hábil
            </Button>
          </div>
          <div className="text-sm text-gray-600">Listado en construcción…</div>
        </CardContent>
      </Card>

      {/* Nuevo Trimestre */}
      <Dialog open={modalTri} onOpenChange={setModalTri}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Nuevo Trimestre</DialogTitle>
          </DialogHeader>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label>Inicio</Label>
              <Input
                type="date"
                value={nuevoTrimestre.inicio ?? ""}
                onChange={(e) =>
                  setNuevoTrimestre((s) => ({ ...s, inicio: e.target.value }))
                }
              />
            </div>
            <div>
              <Label>Fin</Label>
              <Input
                type="date"
                value={nuevoTrimestre.fin ?? ""}
                onChange={(e) =>
                  setNuevoTrimestre((s) => ({ ...s, fin: e.target.value }))
                }
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setModalTri(false)}>
              Cancelar
            </Button>
            <Button onClick={crearTrimestre}>Aceptar</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Nuevo No Hábil */}
      <Dialog open={modalNoHabil} onOpenChange={setModalNoHabil}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Nuevo día no hábil</DialogTitle>
          </DialogHeader>
          <div>
            <Label>Fecha</Label>
            <Input
              type="date"
              value={noHabilFecha}
              onChange={(e) => setNoHabilFecha(e.target.value)}
            />
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setModalNoHabil(false)}>
              Cancelar
            </Button>
            <Button onClick={crearNoHabil}>Confirmar</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
"use client";
import { useEffect, useMemo, useState } from "react";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { CheckCircle, X } from "lucide-react";
import { useAuth } from "@/context/AuthContext";
import { useAsistenciasData } from "@/hooks/useAsistenciasData";

function Donut({ percent }: { percent: number }) {
  const r = 36,
    c = 2 * Math.PI * r,
    off = c - (Math.max(0, Math.min(100, percent)) / 100) * c;
  return (
    <svg width="100" height="100" viewBox="0 0 100 100">
      <circle
        cx="50"
        cy="50"
        r={r}
        fill="transparent"
        stroke="#e5e7eb"
        strokeWidth="10"
      />
      <circle
        cx="50"
        cy="50"
        r={r}
        fill="transparent"
        stroke="currentColor"
        strokeWidth="10"
        strokeDasharray={c}
        strokeDashoffset={off}
        transform="rotate(-90 50 50)"
      />
      <text
        x="50%"
        y="50%"
        dominantBaseline="middle"
        textAnchor="middle"
        fontSize="16"
      >
        {percent}%
      </text>
    </svg>
  );
}

export default function VistaConsultaAlumno() {
  const { user, selectedRole } = useAuth();
  const { loading, jornadas, detalles } = useAsistenciasData();

  // Aquí deberías usar api.familiares.alumnos(user.personaId) si FAMILY,
  // o la matrícula del propio alumno si STUDENT (con tu endpoint).
  // Para demo: asumimos que ya tenés una matrículaId:
  const [matriculaId] = useState<number | null>(null);

  const detallesAlumno = useMemo(() => {
    if (!matriculaId) return [];
    return detalles.filter((d) => d.matriculaId === matriculaId);
  }, [detalles, matriculaId]);

  const total = detallesAlumno.length || 1;
  const presentes = detallesAlumno.filter(
    (d) => d.estado === "PRESENTE",
  ).length;
  const ausentes = detallesAlumno.filter((d) => d.estado === "AUSENTE").length;
  const pct = Math.round((presentes / total) * 100);

  if (loading) return <p className="p-4">Cargando…</p>;

  return (
    <div className="grid gap-6 md:grid-cols-2">
      <Card>
        <CardHeader>
          <CardTitle>Resumen de Asistencia</CardTitle>
          <CardDescription>Alumno</CardDescription>
        </CardHeader>
        <CardContent className="flex items-center gap-6">
          <div className="text-primary">
            <Donut percent={pct} />
          </div>
          <div className="space-y-2 text-sm">
            <div className="flex items-center gap-2">
              <CheckCircle className="h-4 w-4 text-green-600" />
              <span>{presentes} presentes</span>
            </div>
            <div className="flex items-center gap-2">
              <X className="h-4 w-4 text-red-600" />
              <span>{ausentes} ausentes</span>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Historial</CardTitle>
          <CardDescription>Fechas registradas</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            {detallesAlumno
              .map((d) => {
                const j = jornadas.find((j) => j.id === d.jornadaId);
                return { d, fecha: j?.fecha ?? "" };
              })
              .sort((a, b) => (b.fecha ?? "").localeCompare(a.fecha ?? ""))
              .map(({ d, fecha }) => (
                <div
                  key={d.id}
                  className="flex items-center justify-between border rounded p-2"
                >
                  <div className="flex items-center gap-3">
                    <Badge variant="outline">{fecha?.slice(0, 10)}</Badge>
                  </div>
                  <Badge
                    variant={
                      d.estado === "PRESENTE" ? "default" : "destructive"
                    }
                  >
                    {d.estado}
                  </Badge>
                </div>
              ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
"use client";

import { useMemo, useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { DashboardLayout } from "@/app/dashboard/dashboard-layout";
import { useAuth } from "@/context/AuthContext";
import {
  UserRole,
  SeccionDTO,
  AsistenciaAlumnoResumenDTO,
} from "@/types/api-generated";
import { useTeacherSecciones } from "@/hooks/useTeacherSecciones";
import { useActivePeriod } from "@/hooks/scope/useActivePeriod";
import { api } from "@/services/api";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Input } from "@/components/ui/input";
import { Calendar, Search, FileText } from "lucide-react";
import { NewJornadaDialog } from "@/app/dashboard/asistencia/_components/NewJornadaDialog";
import { toast } from "sonner";

/* =========================
   PAGE
========================= */
export default function AsistenciaPage() {
  const { selectedRole } = useAuth();
  const isTeacher = selectedRole === UserRole.TEACHER;
  const isDireccion =
    selectedRole === UserRole.DIRECTOR ||
    selectedRole === UserRole.ADMIN ||
    selectedRole === UserRole.SECRETARY ||
    selectedRole === UserRole.COORDINATOR;

  return (
    <DashboardLayout>
      <div className="p-4 md:p-8 space-y-6">
        <header className="flex items-center justify-between">
          <div>
            <h2 className="text-3xl font-bold tracking-tight">Asistencia</h2>
            <p className="text-muted-foreground">
              {isTeacher
                ? "Tus secciones asignadas"
                : isDireccion
                  ? "Dirección — Seguimiento integral por secciones y alumnos"
                  : "Consulta"}
            </p>
          </div>
        </header>

        {isTeacher ? (
          <TeacherView />
        ) : isDireccion ? (
          <DirectivoView />
        ) : (
          <ConsultaPlaceholder />
        )}
      </div>
    </DashboardLayout>
  );
}

function ConsultaPlaceholder() {
  return (
    <div className="text-sm text-muted-foreground">
      (Aquí podrías renderizar la vista de alumno/familia si corresponde.)
    </div>
  );
}

/* =========================
   DOCENTE
========================= */
function TeacherView() {
  const router = useRouter();
  const { loading, error, secciones } = useTeacherSecciones();

  const promedioSeccion = () => Math.round(85 + Math.random() * 10); // placeholder

  if (loading) return <div className="text-sm">Cargando secciones…</div>;
  if (error) return <div className="text-sm text-red-600">{String(error)}</div>;
  if (!secciones.length)
    return <div className="text-sm">No tenés secciones asignadas.</div>;

  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
      {secciones.map((seccion) => (
        <Card key={seccion.id} className="hover:shadow-md transition-shadow">
          <CardHeader className="pb-3">
            <div className="flex items-center justify-between">
              <CardTitle className="text-lg">
                {seccion.gradoSala} {seccion.division}
              </CardTitle>
              <Badge variant="secondary">{seccion.turno}</Badge>
            </div>
            <CardDescription>
              Promedio aprox: {promedioSeccion()}%
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Asistencia promedio</span>
                <span>{promedioSeccion()}%</span>
              </div>
              <Progress value={promedioSeccion()} className="h-2" />
            </div>

            <div className="flex gap-2">
              <NewJornadaDialog
                seccion={seccion}
                onCreated={(jornadaId) =>
                  router.push(`/dashboard/asistencia/jornada/${jornadaId}`)
                }
              />
              <Button
                variant="outline"
                onClick={() =>
                  router.push(`/dashboard/asistencia/seccion/${seccion.id}`)
                }
              >
                Historial
              </Button>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}

/* =========================
   DIRECCIÓN — GLOBAL
========================= */
function DirectivoView() {
  const router = useRouter();
  const { periodoEscolarId } = useActivePeriod();

  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState<string | null>(null);

  const [secciones, setSecciones] = useState<SeccionDTO[]>([]);
  const [rows, setRows] = useState<
    Array<{
      seccionId: number;
      seccionNombre: string;
      turno?: string | null;
      alumnoNombre: string;
      matriculaId: number;
      presentes: number;
      ausentes: number;
      porcentaje: number; // 0..100
    }>
  >([]);

  // Filtros
  const [q, setQ] = useState("");
  const [from, setFrom] = useState(() =>
    new Date(new Date().setDate(new Date().getDate() - 30))
      .toISOString()
      .slice(0, 10),
  );
  const [to, setTo] = useState(() => new Date().toISOString().slice(0, 10));

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        setErr(null);

        // 1) Secciones del período
        const secAll = (await api.secciones.list()).data ?? [];
        const secs = periodoEscolarId
          ? (secAll as SeccionDTO[]).filter(
              (s: any) => s.periodoEscolarId === periodoEscolarId,
            )
          : (secAll as SeccionDTO[]);
        if (!alive) return;
        setSecciones(secs);

        // 2) Resumen por alumno para cada sección (from/to)
        const perSeccion = await Promise.all(
          secs.map(async (s) => {
            const res = await api.asistencias.resumenPorAlumno(s.id, from, to);
            const data = (res.data ?? []) as AsistenciaAlumnoResumenDTO[];
            const nombre = `${s.gradoSala ?? ""} ${s.division ?? ""}`.trim();
            return data.map((r) => ({
              seccionId: s.id,
              seccionNombre: nombre,
              turno: (s as any).turno ?? null,
              alumnoNombre:
                (r as any).nombreCompleto ??
                ([(r as any).apellido ?? "", (r as any).nombre ?? ""]
                  .join(" ")
                  .trim() ||
                  `Alumno #${(r as any).matriculaId ?? ""}`),
              matriculaId: (r as any).matriculaId,
              presentes: (r as any).presentes ?? 0,
              ausentes: (r as any).ausentes ?? 0,
              porcentaje: Math.round((r as any).porcentaje ?? 0),
            }));
          }),
        );

        const flat = perSeccion
          .flat()
          .sort(
            (a, b) =>
              a.seccionNombre.localeCompare(b.seccionNombre) ||
              a.alumnoNombre.localeCompare(b.alumnoNombre),
          );
        if (!alive) return;
        setRows(flat);
      } catch (e: any) {
        if (!alive) return;
        setErr(
          e?.response?.data?.message ??
            e?.message ??
            "No se pudo cargar la información.",
        );
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, [periodoEscolarId, from, to]);

  const filtered = useMemo(() => {
    const term = q.trim().toLowerCase();
    if (!term) return rows;
    return rows.filter(
      (r) =>
        r.seccionNombre.toLowerCase().includes(term) ||
        (r.turno ?? "").toLowerCase().includes(term) ||
        String(r.matriculaId).includes(term) ||
        r.alumnoNombre.toLowerCase().includes(term),
    );
  }, [rows, q]);

  return (
    <>
      <Card>
        <CardHeader className="pb-3">
          <CardTitle>Filtros globales</CardTitle>
          <CardDescription>Rango de fechas y búsqueda textual</CardDescription>
        </CardHeader>
        <CardContent className="flex flex-wrap gap-3">
          <div className="flex items-center gap-2">
            <Calendar className="h-4 w-4" />
            <Input
              type="date"
              value={from}
              onChange={(e) => setFrom(e.target.value)}
            />
            <span className="text-sm">→</span>
            <Input
              type="date"
              value={to}
              onChange={(e) => setTo(e.target.value)}
            />
          </div>
          <div className="relative max-w-sm flex-1">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              className="pl-10"
              placeholder="Sección, turno, alumno, matrícula…"
              value={q}
              onChange={(e) => setQ(e.target.value)}
            />
          </div>
          <Button
            variant="outline"
            onClick={() => {
              navigator.clipboard.writeText(JSON.stringify(filtered, null, 2));
              toast.success("Copiado al portapapeles (JSON)");
            }}
          >
            <FileText className="h-4 w-4 mr-2" />
            Exportar (JSON)
          </Button>
        </CardContent>
      </Card>

      {loading && <div className="text-sm">Cargando…</div>}
      {err && <div className="text-sm text-red-600">{err}</div>}

      {!loading && !err && (
        <div className="grid gap-4">
          {/* Resumen por sección */}
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {secciones.map((s) => {
              const nombre = `${s.gradoSala ?? ""} ${s.division ?? ""}`.trim();
              const sub = rows.filter((r) => r.seccionId === s.id);
              const avg = sub.length
                ? Math.round(
                    sub.reduce((acc, r) => acc + (r.porcentaje ?? 0), 0) /
                      sub.length,
                  )
                : 0;
              return (
                <Card key={s.id}>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-lg flex items-center justify-between">
                      {nombre}{" "}
                      <Badge variant="secondary">
                        {(s as any).turno ?? "—"}
                      </Badge>
                    </CardTitle>
                    <CardDescription>
                      {sub.length} alumnos • Promedio {avg}%
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <Progress value={avg} className="h-2" />
                    <div className="mt-3">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() =>
                          router.push(`/dashboard/asistencia/seccion/${s.id}`)
                        }
                      >
                        Ver sección
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>

          {/* Tabla plana alumnos */}
          <Card>
            <CardHeader>
              <CardTitle>Detalle por alumno (todas las secciones)</CardTitle>
              <CardDescription>
                Período {from} → {to} • {filtered.length} filas
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-12 gap-2 text-xs font-medium text-muted-foreground mb-2">
                <div className="col-span-3">Alumno</div>
                <div className="col-span-3">Sección</div>
                <div className="col-span-2">Matrícula</div>
                <div className="col-span-2">Presentes/Ausentes</div>
                <div className="col-span-2 text-right">%</div>
              </div>
              <div className="space-y-1">
                {filtered.map((r, i) => (
                  <div
                    key={`${r.matriculaId}-${i}`}
                    className="grid grid-cols-12 gap-2 border rounded p-2"
                  >
                    <div className="col-span-3">{r.alumnoNombre}</div>
                    <div className="col-span-3">
                      {r.seccionNombre} {r.turno ? `— ${r.turno}` : ""}
                    </div>
                    <div className="col-span-2">#{r.matriculaId}</div>
                    <div className="col-span-2">
                      {r.presentes}/{r.presentes + r.ausentes}
                    </div>
                    <div className="col-span-2 text-right">{r.porcentaje}%</div>
                  </div>
                ))}
                {!filtered.length && (
                  <div className="text-sm text-muted-foreground">
                    Sin resultados.
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </>
  );
}
"use client";

import { useState, useEffect, useCallback } from "react";
import { useParams, useRouter } from "next/navigation";
import { DashboardLayout } from "@/app/dashboard/dashboard-layout";
import { api } from "@/services/api";
import {
  JornadaAsistenciaDTO,
  DetalleAsistenciaDTO,
  DetalleAsistenciaCreateDTO,
  AlumnoLiteDTO,
  EstadoAsistencia,
} from "@/types/api-generated";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { toast } from "sonner";

type Row = {
  matriculaId: number;
  alumnoNombre: string;
  estado?: EstadoAsistencia;
  observacion?: string;
  detalleId?: number;
};

export default function JornadaPage() {
  const { id } = useParams<{ id: string }>();
  const router = useRouter();
  const jornadaId = Number(id);

  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [tab, setTab] = useState<"tabla" | "paso">("tabla");

  const [jornada, setJornada] = useState<JornadaAsistenciaDTO | null>(null);
  const [alumnos, setAlumnos] = useState<AlumnoLiteDTO[]>([]);
  const [detalles, setDetalles] = useState<DetalleAsistenciaDTO[]>([]);
  const [rows, setRows] = useState<Row[]>([]);
  const [err, setErr] = useState<string | null>(null);

  const fecha = jornada?.fecha ?? "";
  const seccionId = jornada?.seccionId ?? 0;

  const load = useCallback(async () => {
    try {
      setLoading(true);
      setErr(null);

      const j = (await api.jornadasAsistencia.byId(jornadaId)).data;
      setJornada(j);

      const alumnosResp = await api.seccionesAlumnos.bySeccionId(
        j.seccionId,
        j.fecha,
      );
      const alumnosData = alumnosResp.data ?? [];
      setAlumnos(alumnosData);

      const dets = (await api.detallesAsistencia.byJornada(j.id)).data ?? [];
      setDetalles(dets);

      const byMat: Record<number, DetalleAsistenciaDTO> = {};
      for (const d of dets) byMat[d.matriculaId] = d;

      const rowsData: Row[] = alumnosData
        .map((a) => {
          const det = byMat[a.matriculaId];
          const display = a.nombreCompleto || `Alumno #${a.matriculaId}`;
          return {
            matriculaId: a.matriculaId,
            alumnoNombre: display,
            estado: det?.estado,
            observacion: det?.observacion ?? undefined,
            detalleId: det?.id,
          };
        })
        .sort((r1, r2) => r1.alumnoNombre.localeCompare(r2.alumnoNombre));

      setRows(rowsData);
    } catch (e: any) {
      const msg =
        e?.response?.data?.message ?? e?.message ?? "Error cargando la jornada";
      setErr(msg);
      toast.error(msg);
    } finally {
      setLoading(false);
    }
  }, [jornadaId]);

  useEffect(() => {
    if (!Number.isFinite(jornadaId)) {
      setErr("El ID de jornada no es válido.");
      setLoading(false);
      return;
    }
    load();
  }, [jornadaId, load]);

  const setEstado = (matriculaId: number, estado: EstadoAsistencia) => {
    setRows((prev) =>
      prev.map((r) => (r.matriculaId === matriculaId ? { ...r, estado } : r)),
    );
  };

  const saveAll = async () => {
    try {
      setSaving(true);

      const byMat: Record<number, DetalleAsistenciaDTO> = {};
      for (const d of detalles) byMat[d.matriculaId] = d;

      const toUpsert = rows.filter((r) => r.estado);
      if (!toUpsert.length) {
        toast.message("No hay cambios de asistencia.");
        return;
      }

      for (const r of toUpsert) {
        const current = byMat[r.matriculaId];
        const changed =
          !current ||
          current.estado !== r.estado ||
          (current.observacion ?? "") !== (r.observacion ?? "");

        if (!changed) continue;

        if (current?.id) {
          // Si el backend no tiene PUT, hacemos delete + create
          await api.detallesAsistencia.delete(current.id);
        }

        const body: DetalleAsistenciaCreateDTO = {
          jornadaId,
          matriculaId: r.matriculaId,
          estado: r.estado!, // enum
          observacion: r.observacion ?? null,
        } as any;

        await api.detallesAsistencia.create(body);
      }

      toast.success("Asistencia guardada");
      await load();
    } catch (e: any) {
      const status = e?.response?.status;
      const msg =
        e?.response?.data?.message ??
        e?.message ??
        "Error guardando asistencia";
      if (status === 403) {
        toast.error("No tenés permisos para modificar esta jornada.");
      } else {
        toast.error(msg);
      }
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <DashboardLayout>
        <div className="p-6 text-sm">Cargando…</div>
      </DashboardLayout>
    );
  }

  if (err || !jornada) {
    return (
      <DashboardLayout>
        <div className="p-6">
          <Card>
            <CardHeader>
              <CardTitle>No se pudo cargar la jornada</CardTitle>
              <CardDescription>{err ?? "Jornada inexistente"}</CardDescription>
            </CardHeader>
            <CardContent className="flex gap-2">
              <Button variant="outline" onClick={() => router.back()}>
                Volver
              </Button>
              <Button onClick={load}>Reintentar</Button>
            </CardContent>
          </Card>
        </div>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout>
      <div className="p-4 md:p-8 space-y-6">
        <Button variant="outline" onClick={() => router.back()}>
          Volver
        </Button>

        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-semibold">
              Toma de asistencia — Sección #{seccionId} — {fecha}
            </h2>
            <p className="text-muted-foreground text-sm">
              Jornada #{jornadaId}. Marcá Presente/Ausente y guardá.
            </p>
          </div>
          <div className="flex gap-2">
            <Button onClick={saveAll} disabled={saving}>
              {saving ? "Guardando…" : "Guardar"}
            </Button>
          </div>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>Modo de toma</CardTitle>
            <CardDescription>
              Elegí cómo querés cargar la asistencia.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Tabs value={tab} onValueChange={(v: any) => setTab(v)}>
              <TabsList>
                <TabsTrigger value="tabla">Modo tabla</TabsTrigger>
                <TabsTrigger value="paso">Modo paso a paso</TabsTrigger>
              </TabsList>

              <TabsContent value="tabla" className="mt-4">
                <div className="space-y-2">
                  {rows.map((r) => (
                    <div
                      key={r.matriculaId}
                      className="flex items-center justify-between border rounded-md p-3"
                    >
                      <span className="text-sm">{r.alumnoNombre}</span>
                      <div className="flex gap-2">
                        <Button
                          size="sm"
                          variant={
                            r.estado === "PRESENTE" ? "default" : "outline"
                          }
                          onClick={() => setEstado(r.matriculaId, "PRESENTE")}
                        >
                          Presente
                        </Button>
                        <Button
                          size="sm"
                          variant={
                            r.estado === "AUSENTE" ? "default" : "outline"
                          }
                          onClick={() => setEstado(r.matriculaId, "AUSENTE")}
                        >
                          Ausente
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </TabsContent>

              <TabsContent value="paso" className="mt-4">
                <PasoAPaso rows={rows} setEstado={setEstado} />
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </div>
    </DashboardLayout>
  );
}

function PasoAPaso({
  rows,
  setEstado,
}: {
  rows: Row[];
  setEstado: (matriculaId: number, estado: EstadoAsistencia) => void;
}) {
  const [idx, setIdx] = useState(0);
  const r = rows[idx];

  useEffect(() => {
    if (idx > rows.length - 1) setIdx(Math.max(0, rows.length - 1));
  }, [rows.length, idx]);

  if (!rows.length) {
    return (
      <div className="text-sm text-muted-foreground">Sin alumnos activos.</div>
    );
  }

  const canPrev = idx > 0;
  const canNext = idx < rows.length - 1;
  const seleccionado = !!r.estado;

  const marcarYAvanzar = (estado: EstadoAsistencia) => {
    setEstado(r.matriculaId, estado);
    setTimeout(() => setIdx((i) => (i < rows.length - 1 ? i + 1 : i)), 0);
  };

  return (
    <div className="space-y-4">
      <div className="text-xl font-semibold">{r.alumnoNombre}</div>

      <div className="flex gap-2">
        <Button size="lg" onClick={() => marcarYAvanzar("PRESENTE")}>
          Presente
        </Button>
        <Button
          size="lg"
          variant="outline"
          onClick={() => marcarYAvanzar("AUSENTE")}
        >
          Ausente
        </Button>
      </div>

      <div className="flex items-center justify-between pt-4">
        <Button
          variant="outline"
          disabled={!canPrev}
          onClick={() => setIdx((i) => Math.max(0, i - 1))}
        >
          Anterior
        </Button>
        <div className="text-xs text-muted-foreground">
          {idx + 1} / {rows.length}
        </div>
        <Button
          variant="outline"
          disabled={!canNext || !seleccionado}
          onClick={() => setIdx((i) => Math.min(rows.length - 1, i + 1))}
        >
          Siguiente
        </Button>
      </div>
    </div>
  );
}
// src/app/(dashboard)/dashboard/layout.ts

"use client";

import { useEffect, useState, useMemo } from "react";
import { UserRole } from "@/types/api-generated";
import { useRouter, usePathname } from "next/navigation";
import { ChevronsUpDown, LogOut, School, X, Menu } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { normalizeRole, displayRole } from "@/lib/auth-roles";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import Link from "next/link";
import { useAuth } from "@/context/AuthContext";
import { MENU, type MenuItem } from "@/lib/menu";

interface DashboardLayoutProps {
  children: React.ReactNode;
}

const getInitials = (name: string | undefined | null) => {
  const matches = name?.match(/\b\w/g);
  return matches ? matches.join("") : "??";
};

// Normaliza el path quitando query/hash y barras finales
const normalizePath = (s: string) => {
  if (!s) return "/";
  const noQuery = s.split("?")[0].split("#")[0];
  const trimmed = noQuery.replace(/\/+$/, "");
  return trimmed.length ? trimmed : "/";
};

// Activo: "/dashboard" solo si es exactamente "/dashboard".
// Para el resto: activo si path === href o empieza con `${href}/`
const isItemActive = (pathname: string, href: string) => {
  const path = normalizePath(pathname);
  const target = normalizePath(href);
  if (target === "/dashboard") return path === "/dashboard";
  return path === target || path.startsWith(`${target}/`);
};

export function DashboardLayout({ children }: DashboardLayoutProps) {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const { logout, user, selectedRole, setSelectedRole, loading } = useAuth();
  const router = useRouter();
  const pathname = usePathname();

  const rolesNormalized = useMemo(
    () =>
      Array.from(
        new Set((user?.roles ?? []).map(normalizeRole).filter(Boolean)),
      ) as UserRole[],
    [user],
  );

  const currentRole = selectedRole
    ? normalizeRole(selectedRole)
    : (rolesNormalized[0] ?? null);

  useEffect(() => {
    if (loading || !user) return;
    if (rolesNormalized.length > 1 && !selectedRole) {
      router.replace("/select-rol");
      return;
    }
    if (rolesNormalized.length === 1 && !selectedRole) {
      setSelectedRole(rolesNormalized[0]);
      router.refresh();
    }
  }, [loading, user, rolesNormalized, selectedRole, setSelectedRole, router]);

  if (user && rolesNormalized.length > 1 && !selectedRole) return null;

  const displayName =
    user?.nombreCompleto || user?.personaNombre || user?.email || "Usuario";

  const role = currentRole;

  const visibleMenu = useMemo(() => {
    if (!role) return MENU.filter((item) => !item.roles);
    return MENU.filter((item) => !item.roles || item.roles.includes(role));
  }, [role]);

  useEffect(() => {
    if (!role) return;
    const item = MENU.find((i) => i.href === pathname);
    if (item?.roles && !item.roles.includes(role)) {
      router.replace("/dashboard");
    }
  }, [role, pathname, router]);

  const handleChangeRole = (r: UserRole) => {
    setSelectedRole(r);
    router.refresh();
  };

  const handleLogout = async (e?: React.FormEvent) => {
    e?.preventDefault();
    logout();
  };

  const toggleSidebar = () => setSidebarOpen(!sidebarOpen);

  // ⭐ Agrupación dinámica por `group` preservando orden
  const groupedMenu = useMemo(() => {
    const map = new Map<string, MenuItem[]>();
    for (const item of visibleMenu) {
      const key = item.group ?? "__default__";
      if (!map.has(key)) map.set(key, []);
      map.get(key)!.push(item);
    }
    return Array.from(map.entries()); // [groupKey, items][]
  }, [visibleMenu]);

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Sidebar */}
      <div
        className={`${sidebarOpen ? "translate-x-0" : "-translate-x-full"} fixed inset-y-0 left-0 z-50 w-64 bg-gray-100 transform transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:inset-0`}
      >
        <div className="flex flex-col h-full">
          {/* LOGO ARRIBA */}
          <div className="flex items-center justify-between h-16 px-4 m-2 ">
            <div className="flex items-center">
              <div className="bg-primary text-primary-foreground rounded-full p-2 mr-3">
                <School className="h-6 w-6" />
              </div>
              <div>
                <h1 className="text-lg font-bold">ECEP</h1>
                <p className="text-xs text-gray-600">Sistema Escolar</p>
              </div>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={toggleSidebar}
              className="lg:hidden"
            >
              <X className="h-5 w-5" />
            </Button>
          </div>

          {/* MENÚ por grupos + separador entre grupos */}
          <ScrollArea className="flex-1 px-4 lg:pr-0 lg:pl-4 py-4 space-y-4">
            <nav className="space-y-1">
              {groupedMenu.map(([groupKey, items], groupIndex) => (
                <div key={groupKey} className="space-y-1">
                  {items.map((item, index) => {
                    const active = isItemActive(pathname, item.href);
                    return (
                      <Link key={`${groupKey}-${index}`} href={item.href}>
                        <Button
                          aria-current={active ? "page" : undefined}
                          variant="ghost"
                          className={`w-full justify-start rounded-md transition-colors
                            ${active ? "bg-gray-200 hover:bg-gray-200 font-medium" : "hover:bg-gray-200 hover:text-gray-900"}
                            focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary/40 my-0.5`}
                          onClick={() => setSidebarOpen(false)}
                        >
                          <item.icon className="h-5 w-5 mr-3" />
                          {item.label}
                        </Button>
                      </Link>
                    );
                  })}
                  {groupIndex < groupedMenu.length - 1 && (
                    <div className="m-2 border-t border-gray-300/70" />
                  )}
                </div>
              ))}
            </nav>
          </ScrollArea>

          {/* PERFIL ABAJO + dropdown hacia arriba */}
          <div className="p-4 lg:pr-0 mt-auto">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <button className="w-full inline-flex items-center justify-between gap-3 rounded-md p-2 hover:bg-gray-200 transition focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary/40">
                  <div className="flex items-center gap-3">
                    <div className="w-9 h-9 bg-primary rounded-full flex items-center justify-center text-white font-semibold text-sm">
                      {getInitials(displayName)}
                    </div>
                    <div className="text-left text-sm leading-tight">
                      <p className="font-medium truncate max-w-[9rem]">
                        {displayName}
                      </p>
                      <p className="text-gray-600 text-xs">
                        {currentRole ? displayRole(currentRole) : "Sin rol"}
                      </p>
                    </div>
                  </div>
                  <ChevronsUpDown className="h-4 w-4 text-gray-500 flex-shrink-0" />
                </button>
              </DropdownMenuTrigger>

              <DropdownMenuContent side="top" align="end" className="w-60 p-3">
                <DropdownMenuLabel className="truncate">
                  {displayName}
                </DropdownMenuLabel>

                <DropdownMenuSeparator className="bg-gray-200 mx-1" />

                {rolesNormalized.length === 0 && (
                  <DropdownMenuItem disabled>
                    Sin roles asignados
                  </DropdownMenuItem>
                )}

                {rolesNormalized.map((r) => {
                  const isActive = currentRole === r;
                  return (
                    <DropdownMenuItem
                      key={r}
                      onClick={() => !isActive && handleChangeRole(r)}
                      className={
                        isActive
                          ? "bg-gray-100 hover:bg-gray-100 font-medium"
                          : ""
                      }
                    >
                      {displayRole(r)}
                    </DropdownMenuItem>
                  );
                })}

                <DropdownMenuSeparator className="bg-gray-200 mx-1" />

                <DropdownMenuItem
                  onClick={() => handleLogout()}
                  className="text-red-600 focus:text-red-700"
                >
                  <LogOut className="h-4 w-4 mr-2" />
                  Cerrar sesión
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Topbar solo en mobile/tablet */}
        <div className="lg:hidden sticky top-0 z-40 p-4 pb-0">
          <div className="h-12 flex items-center px-2">
            <Button
              variant="ghost"
              size="icon"
              onClick={toggleSidebar}
              aria-label="Abrir menú"
            >
              <Menu className="h-5 w-5" />
            </Button>
          </div>
        </div>
        <div className="flex-1 p-4">
          <div className="rounded-xl bg-white ring ring-1 ring-gray-200 overflow-hidden">
            <main className="scrollarea h-[calc(106vh-6rem)] overflow-y-auto">
              {children}
            </main>
          </div>
        </div>
      </div>

      {/* Overlay mobile */}
      {sidebarOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden"
          onClick={toggleSidebar}
        />
      )}
    </div>
  );
}
"use client";

import { useState, useMemo, useEffect } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Users,
  Calendar,
  UserCheck,
  FileText,
  Ambulance,
  Bell,
  TrendingUp,
  CheckCircle,
} from "lucide-react";
import Link from "next/link";
import { DashboardLayout } from "@/app/dashboard/dashboard-layout";
import { useAuth } from "@/context/AuthContext";
import { normalizeRole } from "@/lib/auth-roles";
import { api } from "@/services/api";
import { MENU, type MenuItem } from "@/lib/menu";
import { useActivePeriod } from "@/hooks/scope/useActivePeriod"; // ← período activo + hoy

export default function DashboardPage() {
  const { user, selectedRole } = useAuth();

  const role = selectedRole ? normalizeRole(selectedRole) : null;
  const displayName =
    user?.nombreCompleto || user?.personaNombre || user?.email || "Usuario";

  // --------- STATS ----------
  const { periodoEscolarId, hoyISO } = useActivePeriod(); // hoyISO = YYYY-MM-DD
  const [stats, setStats] = useState({
    alumnosActivos: 0,
    docentesActivos: 0,
    postulacionesPendientes: 0,
    licenciasActivas: 0,
    actasBorrador: 0,
    asistenciaPromedio: 0, // opcional, lo dejamos para tu UI
  });
  const [loadingStats, setLoadingStats] = useState(false);

  useEffect(() => {
    if (!periodoEscolarId || !hoyISO) return;

    const load = async () => {
      setLoadingStats(true);
      try {
        // Secciones del período
        const secResp = await api.secciones.list();
        const secciones =
          (secResp.data ?? []).filter(
            (s: any) =>
              (s.periodoEscolarId ?? s.periodoId ?? s.periodoEscolar?.id) ===
              periodoEscolarId,
          ) ?? [];

        // Alumnos activos únicos (sumando secciones del período en hoyISO)
        const alumnosLists = await Promise.all(
          secciones.map((s: any) =>
            api.secciones
              .alumnos(s.id, hoyISO)
              .then((r) => r.data ?? [])
              .catch(() => []),
          ),
        );
        const uniqueAlumnoIds = new Set<number>();
        for (const list of alumnosLists) {
          for (const a of list) uniqueAlumnoIds.add(a.alumnoId);
        }

        // Docentes activos (asignaciones vigentes hoy)
        const asigResp = await api.asignacionDocenteSeccion.list();
        const asigs = asigResp.data ?? [];
        const docentesVigentes = new Set<number>();
        for (const a of asigs) {
          const d = (a as any).vigenciaDesde;
          const h = (a as any).vigenciaHasta;
          const ok = (!d || hoyISO >= d) && (!h || hoyISO <= h); // vigente hoy
          if (ok) {
            const pid = (a as any).personalId ?? (a as any).docenteId;
            if (pid) docentesVigentes.add(pid);
          }
        }

        // Postulaciones pendientes
        const postResp = await api.solicitudesAdmision.list();
        const pendientes = (postResp.data ?? []).filter(
          (p: any) => String(p.estado).toUpperCase() === "PENDIENTE",
        ).length;

        // Licencias activas hoy
        const licResp = await api.licencias.list();
        const licActivas = (licResp.data ?? []).filter((l: any) => {
          const desde = (l as any).desde ?? (l as any).fechaInicio;
          const hasta = (l as any).hasta ?? (l as any).fechaFin;
          const okD = !desde || hoyISO >= desde;
          const okH = !hasta || hoyISO <= hasta;
          return okD && okH;
        }).length;

        // Actas accidente en borrador
        const actasResp = await api.actasAccidente.list();
        const actasBorr = (actasResp.data ?? []).filter(
          (a: any) => String(a.estado).toUpperCase() === "BORRADOR",
        ).length;

        setStats((s) => ({
          ...s,
          alumnosActivos: uniqueAlumnoIds.size,
          docentesActivos: docentesVigentes.size,
          postulacionesPendientes: pendientes,
          licenciasActivas: licActivas,
          actasBorrador: actasBorr,
          // Dejo asistenciaPromedio sin cálculo server-side por ahora
        }));
      } finally {
        setLoadingStats(false);
      }
    };

    load();
  }, [periodoEscolarId, hoyISO]);

  // --------- QUICK ACTIONS (filtrado correcto) ----------
  // Oculta "Inicio" (dashboard) pero deja el resto según rol
  const visibleQuickActions = useMemo(() => {
    const byRole = !role
      ? MENU.filter((item) => !item.roles)
      : MENU.filter((item) => !item.roles || item.roles.includes(role));

    // No mostrar el acceso a Inicio en este dashboard
    return byRole.filter(
      (i) => i.href !== "/dashboard" && i.href !== "/dashboard/",
    );
  }, [role]);

  // --------- MENSAJES RECIENTES ----------
  type RecentItem = {
    user: any; // UsuarioBusquedaDTO
    last: any; // ChatMessageDTO
  };
  const [recentMsgs, setRecentMsgs] = useState<RecentItem[]>([]);
  const [loadingMsgs, setLoadingMsgs] = useState(true);

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoadingMsgs(true);
        // Activos (últimos con los que hubo chat). Prefiero api.chat.activeChats(); fallback a fetch.
        const activeUsersRes =
          (await (api as any)?.chat?.activeChats?.().catch(() => null)) ??
          (await fetch("/api/chat/active-chats", { credentials: "include" })
            .then((r) => r.json())
            .then((data) => ({ data }))
            .catch(() => ({ data: [] })));

        const users = activeUsersRes?.data ?? [];
        // Para cada usuario, tomar el último mensaje del historial
        const withLast = await Promise.all(
          users.map(async (u: any) => {
            const histRes = await (api as any).chat
              .history(u.id)
              .then((r: any) => r.data ?? [])
              .catch(() => []);
            const last = histRes[histRes.length - 1];
            return last ? ({ user: u, last } as RecentItem) : null;
          }),
        );

        const ordered = (withLast.filter(Boolean) as RecentItem[]).sort(
          (a, b) =>
            new Date(b.last.fechaEnvio).getTime() -
            new Date(a.last.fechaEnvio).getTime(),
        );
        if (alive) setRecentMsgs(ordered.slice(0, 5));
      } finally {
        if (alive) setLoadingMsgs(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, []);

  // Helpers
  const timeAgo = (iso?: string) => {
    if (!iso) return "";
    const d = new Date(iso);
    const diff = Math.max(0, Date.now() - d.getTime());
    const min = Math.floor(diff / 60000);
    if (min < 1) return "ahora";
    if (min < 60) return `hace ${min} min`;
    const h = Math.floor(min / 60);
    if (h < 24) return `hace ${h} h`;
    const dyy = Math.floor(h / 24);
    return `hace ${dyy} d`;
  };
  const initials = (name?: string) =>
    (name || "")
      .split(/\s+/)
      .map((p) => p[0])
      .join("")
      .slice(0, 2)
      .toUpperCase();

  return (
    <DashboardLayout>
      <div className="flex-1 space-y-4 p-4 md:p-8 pt-6">
        {/* Header */}
        <div className="flex items-center justify-between space-y-2">
          <div>
            <h2 className="text-3xl font-bold tracking-tight">Dashboard</h2>
            <p className="text-muted-foreground">
              Bienvenido al sistema de gestión escolar ECEP
            </p>
          </div>
          <div className="flex items-center space-x-2">
            <Badge variant="secondary">
              {role ? role.replace("_", " ") : "Cargando..."}
            </Badge>
          </div>
        </div>

        {/* Estadísticas principales (5 cards) */}
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-5">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">
                Alumnos Activos
              </CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.alumnosActivos}</div>
              <p className="text-xs text-muted-foreground">
                <span className="text-green-600 inline-flex items-center">
                  <TrendingUp className="h-3 w-3 mr-1" />
                  {loadingStats ? "actualizando…" : "en período vigente"}
                </span>
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">
                Docentes Activos
              </CardTitle>
              <UserCheck className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.docentesActivos}</div>
              <p className="text-xs text-muted-foreground">
                <span className="text-blue-600 inline-flex items-center">
                  <CheckCircle className="h-3 w-3 mr-1" />
                  con asignación vigente
                </span>
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">
                Postulaciones
              </CardTitle>
              <FileText className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {stats.postulacionesPendientes}
              </div>
              <p className="text-xs text-muted-foreground">pendientes</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">
                Licencias Activas
              </CardTitle>
              <Calendar className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.licenciasActivas}</div>
              <p className="text-xs text-muted-foreground">vigentes hoy</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">
                Actas sin firmar
              </CardTitle>
              <Ambulance className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.actasBorrador}</div>
              <p className="text-xs text-muted-foreground">en borrador</p>
            </CardContent>
          </Card>
        </div>

        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7">
          {/* Acciones rápidas */}
          <Card className="col-span-4">
            <CardHeader>
              <CardTitle>Acciones Rápidas</CardTitle>
              <CardDescription>
                Accede rápidamente a las funciones principales del sistema
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {visibleQuickActions.map((action, index) => (
                  <Link
                    key={index}
                    href={action.href}
                    className="flex flex-col items-center p-4 border rounded-lg hover:bg-gray-50 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary/40 transition-colors"
                  >
                    <div
                      className={`p-2 rounded-full ${action.color ?? "bg-gray-400"} text-white mb-2`}
                    >
                      <action.icon className="h-5 w-5" />
                    </div>
                    <span className="text-sm font-medium text-center">
                      {action.label}
                    </span>
                  </Link>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Mensajes recientes */}
          <Card className="col-span-4 lg:col-span-3">
            <CardHeader>
              <CardTitle className="flex items-center">
                <Bell className="h-4 w-4 mr-2" />
                Mensajes Recientes
              </CardTitle>
            </CardHeader>
            <CardContent>
              {loadingMsgs ? (
                <p className="text-sm text-muted-foreground">Cargando…</p>
              ) : recentMsgs.length === 0 ? (
                <p className="text-sm text-muted-foreground">
                  No hay mensajes recientes
                </p>
              ) : (
                <div className="space-y-4">
                  {recentMsgs.map(({ user: u, last }) => {
                    const name =
                      u?.nombreCompleto || u?.email || `Usuario ${u?.id}`;
                    return (
                      <div
                        key={u.id}
                        className="flex items-start space-x-3 hover:bg-gray-50 rounded-md p-2 transition-colors"
                      >
                        <div className="w-8 h-8 rounded-full bg-primary/10 text-primary flex items-center justify-center text-xs font-semibold">
                          {initials(name)}
                        </div>
                        <div className="flex-1 min-w-0">
                          <p className="text-sm font-medium truncate">{name}</p>
                          <p className="text-xs text-muted-foreground truncate">
                            {last?.contenido}
                          </p>
                        </div>
                        <span className="text-xs text-muted-foreground whitespace-nowrap">
                          {timeAgo(last?.fechaEnvio)}
                        </span>
                      </div>
                    );
                  })}
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </DashboardLayout>
  );
}
"use client";

import { useState } from "react";
import { DashboardLayout } from "@/app/dashboard/dashboard-layout";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import {
  CreditCard,
  Plus,
  FileText,
  Calendar,
  DollarSign,
  Users,
  Upload,
  Download,
  CheckCircle,
  AlertCircle,
} from "lucide-react";

export default function PagosPage() {
  const [selectedTab, setSelectedTab] = useState("cuotas");
  const [userProfile] = useState("administracion"); // Simulando perfil de usuario

  const [alumnos] = useState([
    {
      id: 1,
      nombre: "Juan Pérez",
      seccion: "4° A",
      cuotas: [
        {
          id: 1,
          mes: "Marzo 2025",
          monto: 45000,
          vencida: false,
          codigo: "ECEP-2025-03-001",
        },
        {
          id: 2,
          mes: "Abril 2025",
          monto: 45000,
          vencida: true,
          codigo: "ECEP-2025-04-001",
        },
        {
          id: 3,
          mes: "Mayo 2025",
          monto: 47000,
          vencida: false,
          codigo: "ECEP-2025-05-001",
        },
      ],
      matricula: { monto: 25000, pagada: true, codigo: "ECEP-MAT-2025-001" },
    },
    {
      id: 2,
      nombre: "María González",
      seccion: "Sala 5",
      cuotas: [
        {
          id: 1,
          mes: "Marzo 2025",
          monto: 42000,
          vencida: false,
          codigo: "ECEP-2025-03-002",
        },
        {
          id: 2,
          mes: "Abril 2025",
          monto: 42000,
          vencida: false,
          codigo: "ECEP-2025-04-002",
        },
      ],
      matricula: { monto: 22000, pagada: true, codigo: "ECEP-MAT-2025-002" },
    },
  ]);

  const [personal] = useState([
    {
      id: 1,
      nombre: "Prof. Ana López",
      cargo: "Docente",
      sueldo: 180000,
      recibido: true,
      fecha: "2025-01-30",
      archivo: "recibo_enero_2025.pdf",
    },
    {
      id: 2,
      nombre: "Maestra Clara",
      cargo: "Maestra",
      sueldo: 165000,
      recibido: false,
      fecha: "2025-01-30",
      archivo: "recibo_enero_2025.pdf",
    },
  ]);

  const [secciones] = useState([
    "3° A",
    "3° B",
    "4° A",
    "4° B",
    "5° A",
    "5° B",
    "6° A",
    "6° B",
    "Sala 3",
    "Sala 4",
    "Sala 5",
  ]);

  const formatMonto = (monto: number) => {
    return new Intl.NumberFormat("es-AR", {
      style: "currency",
      currency: "ARS",
    }).format(monto);
  };

  const renderFamiliaView = () => (
    <div className="space-y-6">
      <div className="grid gap-4 md:grid-cols-2">
        {alumnos.map((alumno) => (
          <Card key={alumno.id} className="hover:shadow-md transition-shadow">
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                {alumno.nombre}
                <Badge variant="outline">{alumno.seccion}</Badge>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Matrícula */}
              <div className="border rounded-lg p-3">
                <div className="flex items-center justify-between mb-2">
                  <h4 className="font-medium">Matrícula 2025</h4>
                  <Badge
                    variant={
                      alumno.matricula.pagada ? "default" : "destructive"
                    }
                  >
                    {alumno.matricula.pagada ? "Pagada" : "Pendiente"}
                  </Badge>
                </div>
                <p className="text-sm text-gray-600">
                  Monto: {formatMonto(alumno.matricula.monto)}
                </p>
                <p className="text-xs text-gray-500">
                  Código: {alumno.matricula.codigo}
                </p>
              </div>

              {/* Cuotas */}
              <div>
                <h4 className="font-medium mb-3">Cuotas</h4>
                <div className="space-y-2">
                  {alumno.cuotas.map((cuota) => (
                    <div
                      key={cuota.id}
                      className="flex items-center justify-between p-2 border rounded"
                    >
                      <div>
                        <p className="font-medium">{cuota.mes}</p>
                        <p className="text-sm text-gray-600">
                          {formatMonto(cuota.monto)}
                        </p>
                      </div>
                      <div className="text-right">
                        <Badge
                          variant={cuota.vencida ? "destructive" : "secondary"}
                        >
                          {cuota.vencida ? "Vencida" : "Vigente"}
                        </Badge>
                        <p className="text-xs text-gray-500 mt-1">
                          {cuota.codigo}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );

  const renderAdministracionView = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-medium">Gestión de Cuotas y Pagos</h3>
        <div className="flex space-x-2">
          <Dialog>
            <DialogTrigger asChild>
              <Button>
                <Plus className="h-4 w-4 mr-2" />
                Nueva Cuota
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Crear Nueva Cuota</DialogTitle>
                <DialogDescription>
                  Complete la información para crear una nueva cuota
                </DialogDescription>
              </DialogHeader>
              <div className="space-y-4">
                <div>
                  <Label>Secciones</Label>
                  <Select>
                    <SelectTrigger>
                      <SelectValue placeholder="Seleccione secciones" />
                    </SelectTrigger>
                    <SelectContent>
                      {secciones.map((seccion) => (
                        <SelectItem key={seccion} value={seccion}>
                          {seccion}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label>Título de la Cuota</Label>
                  <Input placeholder="Ej: Cuota Abril 2025" />
                </div>

                <div>
                  <Label>Monto</Label>
                  <Input type="number" placeholder="45000" />
                </div>

                <div>
                  <Label>Fecha de Vencimiento</Label>
                  <Input type="date" />
                </div>

                <div>
                  <Label>Recargo por Vencimiento (%)</Label>
                  <Input type="number" placeholder="10" defaultValue="10" />
                </div>

                <div className="flex items-center space-x-2">
                  <Checkbox id="matricula" />
                  <Label htmlFor="matricula">Es matrícula</Label>
                </div>

                <div className="flex space-x-2">
                  <Button variant="outline" className="flex-1">
                    Cancelar
                  </Button>
                  <Button className="flex-1">Crear Cuota</Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>

          <Dialog>
            <DialogTrigger asChild>
              <Button variant="outline">
                <DollarSign className="h-4 w-4 mr-2" />
                Nuevo Pago
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Registrar Nuevo Pago</DialogTitle>
                <DialogDescription>
                  Registre un pago realizado por personal o familia
                </DialogDescription>
              </DialogHeader>
              <div className="space-y-4">
                <div>
                  <Label>Tipo de Pago</Label>
                  <Select>
                    <SelectTrigger>
                      <SelectValue placeholder="Seleccione tipo" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="sueldo">Sueldo Personal</SelectItem>
                      <SelectItem value="cuota">Cuota Alumno</SelectItem>
                      <SelectItem value="matricula">Matrícula</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label>Persona/Alumno</Label>
                  <Select>
                    <SelectTrigger>
                      <SelectValue placeholder="Seleccione persona" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="ana">Prof. Ana López</SelectItem>
                      <SelectItem value="clara">Maestra Clara</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label>Fecha del Pago</Label>
                  <Input type="date" />
                </div>

                <div>
                  <Label>Archivo del Recibo</Label>
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
                    <Upload className="h-8 w-8 mx-auto mb-2 text-gray-400" />
                    <p className="text-sm text-gray-600">
                      Haga clic para subir archivo
                    </p>
                  </div>
                </div>

                <div className="flex space-x-2">
                  <Button variant="outline" className="flex-1">
                    Cancelar
                  </Button>
                  <Button className="flex-1">Registrar Pago</Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      {/* Lista de cuotas creadas */}
      <Card>
        <CardHeader>
          <CardTitle>Cuotas Activas</CardTitle>
          <CardDescription>
            Gestión de cuotas por sección y período
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            <div className="flex items-center justify-between p-3 border rounded-lg">
              <div>
                <p className="font-medium">Cuota Marzo 2025</p>
                <p className="text-sm text-gray-600">
                  Todas las secciones - Vence: 10/03/2025
                </p>
              </div>
              <div className="text-right">
                <p className="font-medium">{formatMonto(45000)}</p>
                <Badge variant="default">Activa</Badge>
              </div>
            </div>

            <div className="flex items-center justify-between p-3 border rounded-lg">
              <div>
                <p className="font-medium">Matrícula 2025</p>
                <p className="text-sm text-gray-600">
                  Todas las secciones - Vence: 15/02/2025
                </p>
              </div>
              <div className="text-right">
                <p className="font-medium">{formatMonto(25000)}</p>
                <Badge variant="secondary">Vencida</Badge>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );

  const renderPersonalView = () => (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <FileText className="h-5 w-5 mr-2" />
            Mi Recibo de Sueldo
          </CardTitle>
          <CardDescription>Enero 2025</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <p className="text-sm font-medium">Sueldo Bruto</p>
              <p className="text-2xl font-bold">{formatMonto(180000)}</p>
            </div>
            <div>
              <p className="text-sm font-medium">Fecha de Pago</p>
              <p className="text-lg">30/01/2025</p>
            </div>
          </div>

          <div className="border-t pt-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <Checkbox id="recibido" defaultChecked />
                <Label htmlFor="recibido">Recibí conforme</Label>
              </div>
              <Button variant="outline" size="sm">
                <Download className="h-4 w-4 mr-2" />
                Descargar PDF
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );

  return (
    <DashboardLayout>
      <div className="flex-1 space-y-4 p-4 md:p-8 pt-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-3xl font-bold tracking-tight">Pagos</h2>
            <p className="text-muted-foreground">
              Gestión de cuotas, matrículas y pagos del personal
            </p>
          </div>
        </div>

        {/* Contenido según perfil */}
        {userProfile === "familia" && renderFamiliaView()}
        {userProfile === "administracion" && (
          <Tabs
            value={selectedTab}
            onValueChange={setSelectedTab}
            className="space-y-4"
          >
            <TabsList>
              <TabsTrigger value="cuotas">Cuotas y Matrículas</TabsTrigger>
              <TabsTrigger value="personal">Pagos Personal</TabsTrigger>
            </TabsList>

            <TabsContent value="cuotas">
              {renderAdministracionView()}
            </TabsContent>

            <TabsContent value="personal" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>Pagos del Personal</CardTitle>
                  <CardDescription>
                    Gestión de sueldos y pagos al personal docente
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {personal.map((persona) => (
                      <div
                        key={persona.id}
                        className="flex items-center justify-between p-3 border rounded-lg"
                      >
                        <div>
                          <p className="font-medium">{persona.nombre}</p>
                          <p className="text-sm text-gray-600">
                            {persona.cargo}
                          </p>
                        </div>
                        <div className="flex items-center space-x-4">
                          <div className="text-right">
                            <p className="font-medium">
                              {formatMonto(persona.sueldo)}
                            </p>
                            <p className="text-sm text-gray-600">
                              {persona.fecha}
                            </p>
                          </div>
                          <Badge
                            variant={persona.recibido ? "default" : "secondary"}
                          >
                            {persona.recibido ? (
                              <CheckCircle className="h-3 w-3 mr-1" />
                            ) : (
                              <AlertCircle className="h-3 w-3 mr-1" />
                            )}
                            {persona.recibido ? "Recibido" : "Pendiente"}
                          </Badge>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        )}
        {userProfile === "personal" && renderPersonalView()}
      </div>
    </DashboardLayout>
  );
}

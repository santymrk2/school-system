services:
  postgres:
    image: postgres:17.5
    container_name: postgres-dev
    environment:
      POSTGRES_DB: base-app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: P4ssword!
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:6.0
    container_name: mongo-dev
    environment:
      MONGO_INITDB_DATABASE: comunicacion
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2
    container_name: redis-dev
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  backend:
    container_name: backend-dev
    build:
      context: ./backend-ecep
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/base-app
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: P4ssword!
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_DATA_MONGODB_URI: mongodb://mongo:27017/school-system
      SPRING_DATA_MONGODB_DATABASE: comunicacion
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_PROFILES_ACTIVE: dev
      APP_ENV: dev
    volumes:
      - ./backend-ecep:/app
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: on-failure

  frontend:
    container_name: frontend-dev
    build:
      context: ./frontend-ecep
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend-ecep:/app
      - /app/node_modules
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080
      #NEXT_PUBLIC_API_URL: https://api.ecep.dpdns.org
    depends_on:
      backend:
        condition: service_started
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    # Usamos el config-docker.yml que acabamos de crear en tu HOME
    command: tunnel --config /etc/cloudflared/config-docker.yml run
    volumes:
      - ${HOME}/.cloudflared:/etc/cloudflared:ro
    depends_on:
      - frontend
      - backend
    ports:
      - "2000:2000" # opcional: ver /ready y /metrics
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:2000/ready"]
      interval: 10s
      timeout: 3s
      retries: 5

volumes:
  pgdata:
  redis_data:
  mongo_data:

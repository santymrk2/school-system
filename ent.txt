package edu.ecep.base_app.domain;


@Entity @Table(name="detalles_asistencia",
        uniqueConstraints=@UniqueConstraint(columnNames={"jornada_id","matricula_id"}))
@SQLDelete(sql = "UPDATE detalles_asistencia SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter @Setter
public class DetalleAsistencia extends BaseEntity {
    @ManyToOne(optional=false, fetch= FetchType.LAZY) private JornadaAsistencia jornada;
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private Matricula matricula;

    @Enumerated(EnumType.STRING) @Column(nullable=false) private EstadoAsistencia estado;
    private String obs;
}

// Regla: validar pertenencia temporal (historial) y bloquear si trimestre.cerrado.package edu.ecep.base_app.domain;



@Entity
@Table(name = "asistencia_empleados")
@Getter
@Setter
public class AsistenciaEmpleados extends BaseEntity {
    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    private Empleado empleado;

    @Column(nullable = false)
    private LocalDate fecha;

    @Column
    private LocalTime horaEntrada;

    @Column
    private LocalTime horaSalida;

    private Boolean falta;
    private Boolean justificada;
    private String motivo;
}package edu.ecep.base_app.domain;



@Entity
@Table(name = "matriculas",
        uniqueConstraints=@UniqueConstraint(columnNames={"alumno_id","periodo_escolar_id"}))
@SQLDelete(sql = "UPDATE matriculas SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter @Setter

public class Matricula extends BaseEntity {
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private Alumno alumno;
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private PeriodoEscolar periodoEscolar;

    // helpers opcionales de dominio (pueden vivir en un servicio)
    // @Transient public Optional<Seccion> seccionAt(LocalDate fecha) { return Optional.empty(); }
}package edu.ecep.base_app.domain;



@Entity
@Table(name = "solicitudes_admisiones")
@SQLDelete(sql = "UPDATE solicitudes_admisiones SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter
@Setter
public class SolicitudAdmision extends BaseEntity{
    @Column(nullable = false, length = 50)
    private String estado;

    @Column(length = 1000)
    private String motivoRechazo;

    @Column
    private LocalDate fechaEntrevista;

    @Column
    private Boolean emailConfirmacionEnviado;

    @Column
    private Boolean entrevistaRealizada;

    @Column
    private Boolean autorizadoComunicacionesEmail;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "aspirante_id", nullable = false)
    private Aspirante aspirante;
}
package edu.ecep.base_app.domain;


@Entity
@Table(name="periodos_escolares")
@SQLDelete(sql = "UPDATE periodos_escolares SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter
@Setter
public class PeriodoEscolar extends BaseEntity {
    @Column(nullable=false, unique=true)
    private Integer anio;
}
package edu.ecep.base_app.domain;





@Entity
@Table(name = "materias")
@SQLDelete(sql = "UPDATE materias SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class Materia extends BaseEntity{
    @Column(nullable = false)
    private String nombre;
}
package edu.ecep.base_app.domain;



@Entity
@Table(name = "mensajes")
@SQLDelete(sql = "UPDATE mensajes SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter
@Setter
public class Mensaje extends BaseEntity {
    @Column(nullable = false)
    private OffsetDateTime fechaEnvio;

    @Column
    private String asunto;

    @Column(nullable = false, columnDefinition = "text")
    private String contenido;

    @Column(nullable = false)
    private Boolean leido;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "emisor_id", nullable = false)
    private Usuario emisor;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "receptor_id", nullable = false)
    private Usuario receptor;
}
package edu.ecep.base_app.domain;



@Entity @Table(name="pagos_cuota")
@SQLDelete(sql = "UPDATE pagos_cuota SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter @Setter
public class PagoCuota extends BaseEntity {
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private Cuota cuota;

    @Enumerated(EnumType.STRING) @Column(nullable=false) private MedioPago medioPago;
    @Enumerated(EnumType.STRING) @Column(nullable=false) private EstadoPago estadoPago = EstadoPago.EN_REVISION;
    @Column(nullable=false) private BigDecimal montoPagado;

    private OffsetDateTime fechaPago;
    private OffsetDateTime fechaAcreditacion;
    private String referenciaExterna;      // id de pasarela
    private String comprobanteArchivoId;   // adjunto
}
package edu.ecep.base_app.domain;




@Entity
@Table(name="personas_alumno")
@Getter @Setter
public class Alumno {
    @Id Long id;

    @MapsId
    @OneToOne(fetch=LAZY) @JoinColumn(name="id", foreignKey=@ForeignKey(name="fk_alumno_persona"))
    Persona persona;

    LocalDate fechaInscripcion;
    String observacionesGenerales;
    String motivoRechazoBaja;

    @OneToMany(mappedBy="alumno") Set<Matricula> matriculas = new HashSet<>();
    @OneToMany(mappedBy="alumno") Set<AlumnoFamiliar> familiares = new HashSet<>();
}
package edu.ecep.base_app.domain;



@Entity
@Table(name="jornadas_asistencia",
        uniqueConstraints=@UniqueConstraint(columnNames={"seccion_id","fecha"}))
@SQLDelete(sql = "UPDATE jornadas_asistencia SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter
@Setter
public class JornadaAsistencia extends BaseEntity {
    @ManyToOne(optional=false, fetch= FetchType.LAZY) private Seccion seccion;
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private Trimestre trimestre;
    @Column(nullable=false) private LocalDate fecha;
}package edu.ecep.base_app.domain;




@Entity @Table(name="informes_inicial",
        uniqueConstraints=@UniqueConstraint(columnNames={"trimestre_id","matricula_id"}))
@SQLDelete(sql = "UPDATE informes_inicial SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter @Setter
public class InformeInicial extends BaseEntity {
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private Trimestre trimestre;
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private Matricula matricula;

    @Column(nullable=false, length=2000) private String descripcion;
    @Column(nullable=false) private boolean publicado = false;
}package edu.ecep.base_app.domain;



@Entity
@Table(name="emision_cuota")
@SQLDelete(sql = "UPDATE emision_cuota SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter
@Setter
public class EmisionCuota extends BaseEntity {
    @Column(nullable=false) private LocalDateTime fechaEmision = LocalDateTime.now();
    @Column(nullable=false) private Integer anio;
    private Integer mes; // null para no mensuales
    @Enumerated(EnumType.STRING) @Column(nullable=false) private ConceptoCuota concepto;
    private String subconcepto; // solo MATERIALES/OTROS
    @Column(nullable=false) private BigDecimal porcentajeRecargoDefault = BigDecimal.ZERO;
    private String creadoPor;
    @Column(columnDefinition="TEXT") private String criterios; // JSON/Texto
}
package edu.ecep.base_app.domain;



@Entity
@Table(name="matricula_seccion_historial")
@SQLDelete(sql = "UPDATE matricula_seccion_historial SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter @Setter
public class MatriculaSeccionHistorial extends BaseEntity {
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private Matricula matricula;
    @ManyToOne(optional=false, fetch= FetchType.LAZY) private Seccion seccion;
    @Column(nullable=false) private LocalDate desde;
    private LocalDate hasta; // null = vigente
}
package edu.ecep.base_app.domain;




@Entity
@Table(name = "aspirantes_familiares")
@EntityListeners(AuditingEntityListener.class)
@Getter
@Setter
public class AspiranteFamiliar extends BaseEntity {

    @Enumerated(EnumType.STRING) @Column(nullable=false)
    RolVinculo rolVinculo;

    @Column(nullable = false)
    private Boolean convive;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "aspirante_id", nullable = false)
    private Aspirante aspirante;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "familiar_id", nullable = false)
    private Familiar familiar;
}
package edu.ecep.base_app.domain.enums;

public enum UserRole {
    USER, ADMIN, STUDENT, FAMILY, TEACHER, DIRECTOR, SECRETARY, COORDINATOR, ALTERNATE
}
package edu.ecep.base_app.domain.enums;
public enum RolMateria { TITULAR, SUPLENTE }
package edu.ecep.base_app.domain.enums;
public enum EstadoMatricula { REGULAR, REPITE, EGRESO, BAJA, EN_CURSO}package edu.ecep.base_app.domain.enums;

public enum MedioPago {EFECTIVO, TRANSFERENCIA, TARJETA, MERCADO_PAGO, OTRO}
package edu.ecep.base_app.domain.enums;

public enum ConceptoCuota {MENSUALIDAD, MATRICULA, MATERIALES, OTROS}
package edu.ecep.base_app.domain.enums;


public enum Turno {
    MANANA,
    TARDE
}
package edu.ecep.base_app.domain.enums;

public enum EstadoCuota {PENDIENTE, VENCIDA, PAGADA, PARCIAL}
package edu.ecep.base_app.domain.enums;

public enum NivelAcademico {
    INICIAL,
    PRIMARIO,
}
package edu.ecep.base_app.domain.enums;

public enum CalificacionConceptual {
    EXCELENTE,
    MUY_BUENO,
    BUENO,
    REGULAR,
    INSUFICIENTE;
}
package edu.ecep.base_app.domain.enums;

public enum RolEmpleado { DIRECCION, ADMINISTRACION, SECRETARIA, DOCENTE }
package edu.ecep.base_app.domain.enums;

public enum EstadoPago {EN_REVISION, ACREDITADO, RECHAZADO}
package edu.ecep.base_app.domain.enums;

public enum EstadoActaAccidente { BORRADOR, CERRADA }package edu.ecep.base_app.domain.enums;

public enum EstadoSolicitudBaja { PENDIENTE, APROBADA, RECHAZADA }package edu.ecep.base_app.domain.enums;
public enum RolSeccion { MAESTRO_TITULAR, SUPLENTE, PRECEPTOR, AUXILIAR }
package edu.ecep.base_app.domain.enums;

public enum RolVinculo {PADRE, MADRE, TUTOR, OTRO}
package edu.ecep.base_app.domain.enums;


public enum Curso {

    PRIMERO,
    SEGUNDO,
    TERCERO,
    CUARTO,
    QUINTO,
    SEXTO,
    SALA_4,
    SALA_5

}
package edu.ecep.base_app.domain.enums;

public enum AlcanceComunicado { INSTITUCIONAL, POR_NIVEL, POR_SECCION }package edu.ecep.base_app.domain.enums;
public enum EstadoAsistencia { PRESENTE, AUSENTE, TARDE, RETIRO_ANTICIPADO }package edu.ecep.base_app.domain;




@MappedSuperclass
@EntityListeners(AuditingEntityListener.class)
@FilterDef(name = "activoFilter", parameters = @ParamDef(name = "activo", type = Boolean.class))
@Filter(name = "activoFilter", condition = "activo = :activo")
@Getter
@Setter
public abstract class BaseEntity {

    @Id @GeneratedValue(strategy=IDENTITY) Long id;

    @CreatedDate
    @Column(nullable = false, updatable = false, columnDefinition = "timestamptz")
    private OffsetDateTime dateCreated;

    @LastModifiedDate
    @Column(nullable = false, columnDefinition = "timestamptz")
    private OffsetDateTime lastUpdated;

    @CreatedBy
    @Column(name = "created_by", updatable = false)
    private String createdBy;

    @LastModifiedBy
    @Column(name = "modified_by")
    private String modifiedBy;

    @Column(nullable = false)
    protected boolean activo = true;

    @Column(name = "fecha_eliminacion")
    protected OffsetDateTime fechaEliminacion;


    @PreUpdate
    public void preUpdate() {
        // Si la entidad pasa a inactiva y no tiene fecha de eliminación, la seteamos
        if (!this.activo && this.fechaEliminacion == null) {
            this.fechaEliminacion = OffsetDateTime.now();
        }
    }

}





package edu.ecep.base_app.domain;




@Entity
@Table(name = "comunicados")
@SQLDelete(sql = "UPDATE comunicados SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter @Setter
public class Comunicado extends BaseEntity {
    @Enumerated(EnumType.STRING) @Column(nullable=false)
    private AlcanceComunicado alcance;

    @ManyToOne(fetch=FetchType.LAZY) private Seccion seccion; // solo si POR_SECCION
    @Enumerated(EnumType.STRING) private NivelAcademico nivel; // solo si POR_NIVEL

    @Column(nullable=false) private String titulo;
    @Column(nullable=false, length=5000) private String cuerpo;
    private OffsetDateTime fechaProgPublicacion;
    @Column(nullable=false) private boolean publicado = false;
}

package edu.ecep.base_app.domain;




@Entity
@Table(name="personas_aspirante")
@Getter @Setter
public class Aspirante {
    @Id Long id;

    @MapsId
    @OneToOne(fetch=LAZY) @JoinColumn(name="id", foreignKey=@ForeignKey(name="fk_aspirante_persona"))
    Persona persona;

    @Enumerated(EnumType.STRING) Turno turnoPreferido;
    String escuelaActual;
    String conectividadInternet;
    String dispositivosDisponibles;
    String idiomasHabladosHogar;
    String enfermedadesAlergias;
    String medicacionHabitual;
    String limitacionesFisicas;
    String tratamientosTerapeuticos;
    Boolean usoAyudasMovilidad;
    String coberturaMedica;
    String observacionesSalud;
    @Enumerated(EnumType.STRING) Curso cursoSolicitado;

    @OneToMany(mappedBy="aspirante") Set<AspiranteFamiliar> familiares = new HashSet<>();
    @OneToMany(mappedBy="aspirante") Set<SolicitudAdmision> solicitudes = new HashSet<>();
}

package edu.ecep.base_app.domain;



@Entity
@Table(name="trimestres")
@SQLDelete(sql = "UPDATE trimestres SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter
@Setter
public class Trimestre extends BaseEntity {
    @ManyToOne(optional=false, fetch= FetchType.LAZY)
    private PeriodoEscolar periodoEscolar;

    @Column(nullable=false) private Integer orden;
    @Column(nullable=false) private LocalDate inicio;
    @Column(nullable=false) private LocalDate fin;
    @Column(nullable=false) private boolean cerrado = false;
}package edu.ecep.base_app.domain;



@Entity
@Table(name="asignacion_docente_materia")
@SQLDelete(sql = "UPDATE asignacion_docente_materia SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter
@Setter
public class AsignacionDocenteMateria extends BaseEntity {
    @ManyToOne(optional=false, fetch= FetchType.LAZY) private SeccionMateria seccionMateria;
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private Empleado empleado;

    @Enumerated(EnumType.STRING) @Column(nullable=false) private RolMateria rol;
    @Column(nullable=false) private LocalDate vigenciaDesde;
    private LocalDate vigenciaHasta;
}
package edu.ecep.base_app.domain;




@Entity @Table(name="evaluaciones")
@SQLDelete(sql = "UPDATE evaluaciones SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter @Setter
public class Evaluacion extends BaseEntity {
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private SeccionMateria seccionMateria;
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private Trimestre trimestre;
    @Column(nullable=false) private LocalDate fecha;
    private String tema;
    private Double peso;
}

// Validación de servicio: la Matricula debe pertenecer a la Seccion de la Evaluacion en la fecha (usar historial).package edu.ecep.base_app.domain;






@Entity @Table(name = "usuarios")
@SQLDelete(sql = "UPDATE usuarios SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter
@Setter
public class Usuario extends BaseEntity  {
    @OneToOne(mappedBy = "usuario", fetch = FetchType.LAZY)
    private Persona persona;

    @Column(unique = true, nullable = false) private String email;

    @Column(nullable = false) private String password;

    @ElementCollection(fetch = FetchType.EAGER)
    @CollectionTable(name="usuario_roles", joinColumns=@JoinColumn(name="usuario_id"))
    @Column(name="rol")
    @Enumerated(EnumType.STRING)
    private Set<UserRole> roles = new HashSet<>();

    public Set<UserRole> getUserRoles() { return getRoles(); }
    public void setUserRoles(Set<UserRole> roles) { setRoles(roles); }

    public Collection<? extends GrantedAuthority> getAuthorities() {
        return this.roles.stream()
                .map(r -> new SimpleGrantedAuthority("ROLE_" + r.name()))
                .toList();
    }
}
package edu.ecep.base_app.domain;


@Entity
@Table(name="emision_cuota_seccion")
@SQLDelete(sql = "UPDATE emision_cuota_seccion SET activo = false, fecha_eliminacion = now() WHERE id = ?")

@Getter
@Setter
public class EmisionCuotaSeccion extends BaseEntity {
    @ManyToOne(optional=false, fetch= FetchType.LAZY) private EmisionCuota emision;
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private Seccion seccion;
}package edu.ecep.base_app.domain;


@Entity @Table(name="asignacion_docente_seccion")
@SQLDelete(sql = "UPDATE asignacion_docente_seccion SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter @Setter
public class AsignacionDocenteSeccion extends BaseEntity {
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private Seccion seccion;
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private Empleado empleado;

    @Enumerated(EnumType.STRING) @Column(nullable=false) private RolSeccion rol;
    @Column(nullable=false) private LocalDate vigenciaDesde;
    private LocalDate vigenciaHasta; // null = vigente
}
package edu.ecep.base_app.domain;




@Entity
@Table(name = "licencias")
@SQLDelete(sql = "UPDATE licencias SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter
@Setter
public class Licencia extends BaseEntity{

    @Column(nullable = false, length = 50)
    private String tipoLicencia;

    @Column(nullable = false)
    private LocalDate fechaInicio;

    @Column(nullable = false)
    private LocalDate fechaFin;

    @Column(length = 1000)
    private String motivo;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "empleado_id", nullable = false)
    private Empleado empleado;
}
package edu.ecep.base_app.domain;


@Entity @Table(name="recibos_sueldo",
        uniqueConstraints=@UniqueConstraint(columnNames={"empleado_id","anio","mes"}))
@SQLDelete(sql = "UPDATE recibos_sueldo SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter @Setter
public class ReciboSueldo extends BaseEntity {
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private Empleado empleado;
    @Column(nullable=false) private Integer anio;
    @Column(nullable=false) private Integer mes;

    @Column(nullable=false) private BigDecimal bruto;
    @Column(nullable=false) private BigDecimal neto;

    @Column(nullable=false) private boolean recibiConforme = false;
    private OffsetDateTime fechaConfirmacion;
    private String obsConfirmacion;
    private String comprobanteArchivoId;
}

//vertigo ?package edu.ecep.base_app.domain;





@Entity
@Table(name = "personas_empleado")
@Getter
@Setter
public class Empleado {
    @Id Long id;

    @MapsId
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id", foreignKey = @ForeignKey(name = "fk_empleado_persona"))
    private Persona persona;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private RolEmpleado rolEmpleado; // DIRECCION, ADMINISTRACION, SECRETARIA, DOCENTE

    @Column(length = 11, unique = true)
    private String cuil;

    private LocalDate fechaIngreso;
    private String condicionLaboral;
    private String cargo;
    private String situacionActual;
    private String antecedentesLaborales;
    private String observacionesGenerales;

    @OneToMany(mappedBy = "empleado")
    private Set<Licencia> licencias = new HashSet<>();

    @OneToMany(mappedBy = "empleado")
    private Set<ReciboSueldo> recibosSueldo = new HashSet<>();

    @OneToMany(mappedBy = "empleado", cascade = CascadeType.ALL, orphanRemoval = false)
    private Set<FormacionAcademica> formaciones = new HashSet<>();
}
package edu.ecep.base_app.domain;



@Entity @Table(name="cuotas")
@SQLDelete(sql = "UPDATE cuotas SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter @Setter
public class Cuota extends BaseEntity {
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private Matricula matricula;
    @ManyToOne(fetch=FetchType.LAZY) private EmisionCuota emision; // nullable

    @Enumerated(EnumType.STRING) @Column(nullable=false) private ConceptoCuota concepto;
    private String subconcepto; // solo MATERIALES/OTROS

    @Column(nullable=false) private Integer anio;
    private Integer mes; // solo si MENSUALIDAD

    @Column(nullable=false) private BigDecimal importe;
    @Column(nullable=false) private LocalDate fechaVencimiento;
    @Column(nullable=false) private BigDecimal porcentajeRecargo = BigDecimal.ZERO;

    @Enumerated(EnumType.STRING) @Column(nullable=false) private EstadoCuota estado = EstadoCuota.PENDIENTE;

    @Column(nullable=false, unique=true, length=60)
    private String codigoPago;

    private String observaciones;
}package edu.ecep.base_app.domain;


@Entity @Table(name="resultados_evaluacion",
        uniqueConstraints=@UniqueConstraint(columnNames={"evaluacion_id","matricula_id"}))
@Getter @Setter
public class ResultadoEvaluacion extends BaseEntity {
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private Evaluacion evaluacion;
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private Matricula matricula;

    private Double notaNumerica;
    @Column(length=20) private String notaConceptual;
    private String observaciones;
}package edu.ecep.base_app.domain;




@Entity
@Table(name = "dias_no_habiles",
        uniqueConstraints=@UniqueConstraint(columnNames={"fecha"}))
@SQLDelete(sql = "UPDATE dias_no_habiles SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter
@Setter
public class DiaNoHabil extends BaseEntity {
    @Column(nullable = false)
    private LocalDate fecha;

    @Column
    private String descripcion;
}
package edu.ecep.base_app.domain;





@Entity
@Table(name = "alumno_familiar",
        uniqueConstraints=@UniqueConstraint(columnNames={"alumno_id","familiar_id"}))
@Getter
@Setter
public class AlumnoFamiliar extends BaseEntity{

    @Enumerated(EnumType.STRING) @Column(nullable=false)
    RolVinculo rolVinculo;

    @Column(nullable = false)
    private Boolean convive;

    @ManyToOne(fetch=LAZY) @JoinColumn(name="alumno_id", nullable=false)
    Alumno alumno;

    @ManyToOne(fetch=LAZY) @JoinColumn(name="familiar_id", nullable=false)
    Familiar familiar;

}package edu.ecep.base_app.domain;




@Entity @Table(name="actas_accidente")
@SQLDelete(sql = "UPDATE actas_accidente SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter @Setter
public class ActaAccidente extends BaseEntity {
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private Alumno alumno; // o Matricula si querés anclar al año
    @Column(nullable=false) private LocalDate fechaSuceso;
    @Column(nullable=false, length=4000) private String descripcion;

    // debe ser editable hasta suceso + 2 días
    @Enumerated(EnumType.STRING) @Column(nullable=false) private EstadoActaAccidente estado = EstadoActaAccidente.BORRADOR;

    private String creadoPor; // usuario

    @ManyToOne(optional = false, fetch = FetchType.LAZY)
    private Empleado informante;  // quien reportó el accidente (obligatorio)
}package edu.ecep.base_app.domain;



@Entity @Table(name="bajas_alumnos")
@SQLDelete(sql = "UPDATE bajas_alumnos SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter @Setter
public class SolicitudBajaAlumno extends BaseEntity {
    @ManyToOne(optional=false, fetch= FetchType.LAZY) private Matricula matricula;

    @Enumerated(EnumType.STRING) @Column(nullable=false)
    private EstadoSolicitudBaja estado = EstadoSolicitudBaja.PENDIENTE;

    private String motivo;
    private String motivoRechazo; // obligatorio si RECHAZADA
    private OffsetDateTime fechaDecision;
    private Long decididoPorUsuarioId;
}package edu.ecep.base_app.domain;





@Entity @Table(name="personas_familiar")
@Getter @Setter
public class Familiar {
    @Id Long id;

    @MapsId
    @OneToOne(fetch=LAZY) @JoinColumn(name="id", foreignKey=@ForeignKey(name="fk_familiar_persona"))
    Persona persona;

    String ocupacion;

    @OneToMany(mappedBy="familiar") Set<AlumnoFamiliar> familiarAlumnoFamiliares = new HashSet<>();
    @OneToMany(mappedBy="familiar") Set<AspiranteFamiliar> familiarAspiranteFamiliares = new HashSet<>();
}
package edu.ecep.base_app.domain;





@Entity
@Table(name = "formaciones_academicas")
@SQLDelete(sql = "UPDATE formaciones_academicas SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter
@Setter
public class FormacionAcademica extends BaseEntity{

    @Column(nullable = false, length = 100)
    private String nivel;

    @Column(nullable = false)
    private String institucion;

    @Column
    private String tituloObtenido;

    @Column
    private LocalDate fechaInicio;

    @Column
    private LocalDate fechaFin;

    @ManyToOne(optional = false, fetch = FetchType.LAZY)
    @JoinColumn(name = "empleado_id", nullable = false)
    private Empleado empleado;

}
package edu.ecep.base_app.domain;





@Entity
@Table(name = "secciones",
        uniqueConstraints=@UniqueConstraint(columnNames={
                "periodo_escolar_id","nivel","grado_sala","division","turno"
        }))
@SQLDelete(sql = "UPDATE secciones SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class Seccion extends BaseEntity {
    @ManyToOne(optional=false, fetch=FetchType.LAZY)
    private PeriodoEscolar periodoEscolar;

    @Enumerated(EnumType.STRING) @Column(nullable=false)
    private NivelAcademico nivel;

    @Column(nullable=false) private String gradoSala;
    @Column(nullable=false) private String division;

    @Enumerated(EnumType.STRING) @Column(nullable=false)
    private Turno turno;
}package edu.ecep.base_app.domain;





@Entity
@Table(name="personas")
@SQLDelete(sql = "UPDATE personas SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter @Setter
public class Persona extends BaseEntity {
    @Column(nullable=false, unique=true, length=20) String dni;
    String nombre; String apellido;
    String email; String telefono; String domicilio;
    LocalDate fechaNacimiento; String genero;
    String estadoCivil; String nacionalidad; String celular;
    @Email String emailContacto;
    String fotoPerfilUrl;

    @OneToOne(fetch=LAZY, optional=true)
    @JoinColumn(name="usuario_id", unique=true, foreignKey=@ForeignKey(name="fk_persona_usuario"))
    Usuario usuario;
}


package edu.ecep.base_app.domain;


// Esta entidad es especifica para las calificaciones finales de los alumnos de primaria.
@Entity @Table(name="calificaciones_trimestrales",
        uniqueConstraints=@UniqueConstraint(columnNames={"trimestre_id","seccion_materia_id","matricula_id"}))
@SQLDelete(sql = "UPDATE calificaciones_trimestrales SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter @Setter
public class CalificacionTrimestral extends BaseEntity {
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private Trimestre trimestre;
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private SeccionMateria seccionMateria;
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private Matricula matricula;

    private Double notaNumerica;
    @Enumerated(EnumType.STRING) @Column(length=20) private CalificacionConceptual notaConceptual;
    private String observaciones;
}package edu.ecep.base_app.domain;


@Entity
@Table(name="seccion_materia",
        uniqueConstraints=@UniqueConstraint(columnNames={"seccion_id","materia_id"}))
@SQLDelete(sql = "UPDATE seccion_materia SET activo = false, fecha_eliminacion = now() WHERE id = ?")
@Getter
@Setter
public class SeccionMateria extends BaseEntity {
    @ManyToOne(optional=false, fetch= FetchType.LAZY) private Seccion seccion;
    @ManyToOne(optional=false, fetch=FetchType.LAZY) private Materia materia;
}

@Entity@Table(name = "matriculas")@EntityListeners(AuditingEntityListener.class)@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE matriculas SET activo = false, fecha_eliminacion = now() WHERE id = ?")@Getter @Setterpublic class Matricula extends BaseEntity {    @ManyToOne(fetch = FetchType.LAZY, optional = false)    private Alumno alumno;    @ManyToOne(fetch = FetchType.LAZY, optional = false)    private Seccion seccion;    @Column(nullable = false)    private Integer anioLectivo;    @Enumerated(EnumType.STRING)    @Column(nullable = false, length = 20)    private EstadoMatricula estado;    private LocalDate fechaInicio;    private LocalDate fechaFin;    @OneToMany(mappedBy = "matricula")    private Set<Calificacion> calificaciones = new HashSet<>();    @OneToMany(mappedBy = "matricula")    private Set<RegistroAsistencia> asistencias = new HashSet<>();    @OneToMany(mappedBy = "matricula")    private Set<PagoCuota> pagosCuota = new HashSet<>();    @OneToMany(mappedBy = "matricula")    private Set<InformeInicial> informes = new HashSet<>();    @OneToMany(mappedBy = "matricula")    private Set<ActaAccidente> actasAccidente = new HashSet<>();}package edu.ecep.base_app.domain;@Entity@Table(name = "solicitudes_admisiones")@EntityListeners(AuditingEntityListener.class)@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE solicitudes_admisiones SET activo = false, fecha_eliminacion = now() WHERE id = ?")@Getter@Setterpublic class SolicitudAdmision extends BaseEntity{    @Column(nullable = false, length = 50)    private String estado;    @Column(length = 1000)    private String motivoRechazo;    @Column    private LocalDate fechaEntrevista;    @Column    private Boolean emailConfirmacionEnviado;    @Column    private Boolean entrevistaRealizada;    @Column    private Boolean autorizadoComunicacionesEmail;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "aspirante_id", nullable = false)    private Aspirante aspirante;}@Entity@DiscriminatorValue("PERSONAL")@Getter@Setterpublic class Personal extends Persona {    @Column    private LocalDate fechaIngreso;    @Column(length = 50)    private String condicionLaboral;    @Column(length = 50)    private String cargo;    @Column(length = 50)    private String situacionActual;    @Column(length = 1000)    private String antecedentesLaborales;    @Column(length = 1000)    private String observacionesGenerales;    @OneToMany(mappedBy = "docente", cascade = CascadeType.ALL, fetch = FetchType.LAZY)    private Set<AsignacionDocente> asignaciones = new HashSet<>();    @OneToMany(mappedBy = "personal")    private Set<Licencia> licencias = new HashSet<>();    @OneToMany(mappedBy = "personal")    private Set<ReciboSueldo> recibosSueldo = new HashSet<>();    public Set<Materia> getMateriasImpartidas() {        return asignaciones.stream()                .filter(a -> a.getMateria() != null)                .map(AsignacionDocente::getMateria)                .collect(Collectors.toSet());    }    public Set<Seccion> getSeccionesAsignadas() {        return asignaciones.stream()                .map(AsignacionDocente::getSeccion)                .collect(Collectors.toSet());    }}public enum EstadoMatricula { REGULAR, REPITE, EGRESO, BAJA, EN_CURSO}package edu.ecep.base_app.domain;@Entity@Table(name = "materias")@EntityListeners(AuditingEntityListener.class)@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE materias SET activo = false, fecha_eliminacion = now() WHERE id = ?")@Getter@Setter@AllArgsConstructor@NoArgsConstructorpublic class Materia extends BaseEntity{    @Column(nullable = false)    private String nombre;    @Column(nullable = false, length = 50)    private String nivelAcademico;    @OneToMany(mappedBy = "materia", fetch = FetchType.LAZY)    private Set<Calificacion> calificaciones = new HashSet<>();    @OneToMany(mappedBy = "materia", fetch = FetchType.LAZY)    private Set<Evaluacion> evaluaciones = new HashSet<>();    @OneToMany(mappedBy = "materia", fetch = FetchType.LAZY)    private Set<AsignacionDocente> asignaciones = new HashSet<>();}@Entity@Table(name = "mensajes")@EntityListeners(AuditingEntityListener.class)@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE mensajes SET activo = false, fecha_eliminacion = now() WHERE id = ?")@Getter@Setterpublic class Mensaje extends BaseEntity {    @Column(nullable = false)    private OffsetDateTime fechaEnvio;    @Column    private String asunto;    @Column(nullable = false, columnDefinition = "text")    private String contenido;    @Column(nullable = false)    private Boolean leido;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "emisor_id", nullable = false)    private Usuario emisor;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "receptor_id", nullable = false)    private Usuario receptor;}@Entity@Table(name = "pagos_cuotas")@EntityListeners(AuditingEntityListener.class)@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE pagos_cuotas SET activo = false, fecha_eliminacion = now() WHERE id = ?")@Getter@Setterpublic class PagoCuota extends BaseEntity {    @Column(nullable = false)    private LocalDate fechaPago;    @Column(nullable = false, precision = 10, scale = 2)    private BigDecimal montoPagado;    @Column(length = 50)    private String medioPago;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "cuota_id", nullable = false)    private Cuota cuota;    @ManyToOne()    @JoinColumn(name = "matricula_id")    private Matricula matricula;}@Entity@DiscriminatorValue("ALUMNO")@Getter@Setterpublic class Alumno extends Persona {    @Column    private LocalDate fechaInscripcion;    @Column(length = 500)    private String observacionesGenerales;    @Column    private String motivoRechazoBaja;    @OneToMany(mappedBy = "alumno")    private Set<Matricula> matriculas = new HashSet<>();    @OneToMany(mappedBy = "alumno")    private Set<AlumnoFamiliar> familiares = new HashSet<>();}@Entity@Table(name = "informes_trimestrales")@EntityListeners(AuditingEntityListener.class)@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE informes_trimestrales SET activo = false, fecha_eliminacion = now() WHERE id = ?")@Getter@Setterpublic class InformeInicial extends BaseEntity {    @Column(nullable = false, length = 20)    private String trimestre;    @Column(nullable = false)    private LocalDate fecha;    @Column(nullable = false, columnDefinition = "text")    private String contenido;    @ManyToOne()    @JoinColumn(name = "matricula_id")    private Matricula matricula;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "reportado_por_id", nullable = false)    private Usuario reportadoPor;}public enum CursoTypo {    PRIMERO,    SEGUNDO,    TERCERO,    CUARTO,    QUINTO,    SEXTO,    SALA_4,    SALA_5}public enum Turno {    MANANA,    TARDE}@Entity@Table(name = "aspirantes_familiares")@EntityListeners(AuditingEntityListener.class)@Getter@Setterpublic class AspiranteFamiliar extends BaseEntity {    @Column(nullable = false, length = 50)    private String tipoRelacion;    @Column(nullable = false)    private Boolean viveConAlumno;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "aspirante_id", nullable = false)    private Aspirante aspirante;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "familiar_id", nullable = false)    private Familiar familiar;}@Entity@Table(name = "asignaciones_docentes")@EntityListeners(AuditingEntityListener.class)@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE asignaciones_docentes SET activo = false, fecha_eliminacion = now() WHERE id = ?")@Getter@Setterpublic class AsignacionDocente extends BaseEntity {    @ManyToOne(fetch = FetchType.LAZY, optional = false)    @JoinColumn(name = "personal_id")    private Personal docente;    @ManyToOne(fetch = FetchType.LAZY, optional = false)    @JoinColumn(name = "seccion_id")    private Seccion seccion;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "materia_id")    private Materia materia; // null = maestro de grado (todas las materias)    @Column(nullable = false)    private Boolean esTitular = true; // vs suplente    @Column    private LocalDate fechaInicio;    @Column    private LocalDate fechaFin;    @Column(columnDefinition = "text")    private String observaciones;}@MappedSuperclass@EntityListeners(AuditingEntityListener.class)@FilterDef(name = "activoFilter", parameters = @ParamDef(name = "activo", type = Boolean.class))@Getter@Setterpublic abstract class BaseEntity {    @Id    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "seq")    private Long id;    @CreatedDate    @Column(nullable = false, updatable = false, columnDefinition = "timestamptz")    private OffsetDateTime dateCreated;    @LastModifiedDate    @Column(nullable = false, columnDefinition = "timestamptz")    private OffsetDateTime lastUpdated;    @CreatedBy    @Column(name = "created_by", updatable = false)    private String createdBy;    @LastModifiedBy    @Column(name = "modified_by")    private String modifiedBy;    @Column(nullable = false)    protected boolean activo = true;    @Column(name = "fecha_eliminacion")    protected OffsetDateTime fechaEliminacion;    @PreUpdate    public void preUpdate() {        // Si la entidad pasa a inactiva y no tiene fecha de eliminaci√≥n, la seteamos        if (!this.activo && this.fechaEliminacion == null) {            this.fechaEliminacion = OffsetDateTime.now();        }    }}@Entity@Table(name = "comunicados")@EntityListeners(AuditingEntityListener.class)@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE comunicados SET activo = false, fecha_eliminacion = now() WHERE id = ?")@Getter@Setterpublic class Comunicado extends BaseEntity{    @Column(nullable = false)    private String titulo;    @Column(nullable = false, columnDefinition = "text")    private String cuerpoMensaje;    @Column(nullable = false, length = 50)    private String tipoComunicacion;    @Column(length = 50)    private String nivelDestino;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "seccion_destino_id")    private Seccion seccionDestino;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "publicador_id", nullable = false)    private Usuario publicador;}@Entity@DiscriminatorValue("ASPIRANTE")@Getter@Setterpublic class Aspirante extends Persona {    @Column    @Enumerated(EnumType.STRING)    private Turno turnoPreferido;    @Column    private String escuelaActual;    @Column(length = 50)    private String conectividadInternet;    @Column    private String dispositivosDisponibles;    @Column    private String idiomasHabladosHogar;    @Column(length = 1000)    private String enfermedadesAlergias;    @Column    private String medicacionHabitual;    @Column    private String limitacionesFisicas;    @Column    private String tratamientosTerapeuticos;    @Column    private Boolean usoAyudasMovilidad;    @Column    private String coberturaMedica;    @Column(length = 1000)    private String observacionesSalud;    @Column    @Enumerated(EnumType.STRING)    private CursoTypo cursoSolicitado;    @OneToMany(mappedBy = "aspirante")    private Set<AspiranteFamiliar> familiares = new HashSet<>();    @OneToMany(mappedBy = "aspirante")    private Set<SolicitudAdmision> solicitudes = new HashSet<>();}@Entity@Table(name = "evaluaciones")@EntityListeners(AuditingEntityListener.class)@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE evaluaciones SET activo = false, fecha_eliminacion = now() WHERE id = ?")@Getter@Setterpublic class Evaluacion extends BaseEntity{    @Column(nullable = false)    private LocalDate fecha;    @Column(length = 50)    private String tipo;    @Column(length = 1000)    private String descripcion;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "seccion_id", nullable = false)    private Seccion seccion;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "materia_id", nullable = false)    private Materia materia;}@Entity@Table(name = "asistencia_personal")@Getter@Setterpublic class AsistenciaPersonal extends BaseEntity {    @ManyToOne(fetch = FetchType.LAZY, optional = false)    private Personal personal;    @Column(nullable = false)    private LocalDate fecha;    @Column    private LocalTime horaEntrada;    @Column    private LocalTime horaSalida;    private Boolean falta;    private Boolean justificada;    private String motivo;}package edu.ecep.base_app.domain;@Entity@Table(name = "calificaciones")@EntityListeners(AuditingEntityListener.class)@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE calificaciones SET activo = false, fecha_eliminacion = now() WHERE id = ?")@Getter@Setterpublic class Calificacion extends BaseEntity{    @Column(nullable = false)    private String valor;    @Column(nullable = false)    private LocalDate fecha;    @Column(length = 1000)    private String observaciones;    @ManyToOne()    @JoinColumn(name = "matricula_id")    private Matricula matricula;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "materia_id", nullable = false)    private Materia materia;}@Entity@Table(name = "usuarios")@EntityListeners(AuditingEntityListener.class)@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE usuarios SET activo = false, fecha_eliminacion = now() WHERE id = ?")@Getter@Setterpublic class Usuario extends BaseEntity implements UserDetails  {    @Column(unique = true, nullable = false)    private String email;    @Column(nullable = false)    private String password;    @ElementCollection(targetClass = Role.class, fetch = FetchType.EAGER)    @CollectionTable(name = "usuario_roles", joinColumns = @JoinColumn(name = "usuario_id"))    @Column(name = "role")    @Enumerated(EnumType.STRING)    private Set<Role> roles = new HashSet<>();    @OneToMany(mappedBy = "publicador")    private Set<Comunicado> comunicadosPublicados = new HashSet<>();    @OneToMany(mappedBy = "reportadoPor")    private Set<InformeInicial> reportadoPorInformeInicial = new HashSet<>();    @OneToOne(mappedBy = "usuario", fetch = FetchType.LAZY)    private Persona persona;    @Override    public Collection<? extends GrantedAuthority> getAuthorities() {        return roles.stream()                .map(role -> new SimpleGrantedAuthority("ROLE_" + role.name()))                .collect(Collectors.toList());    }    @Override    public String getPassword() {        return password;    }    @Override    public String getUsername() {        return email;    }    @Override    public boolean isAccountNonExpired() {        return true;    }    @Override    public boolean isAccountNonLocked() {        return true;    }    @Override    public boolean isCredentialsNonExpired() {        return true;    }    @Override    public boolean isEnabled() {        return true;    }}@Entity@Table(name = "licencias")@EntityListeners(AuditingEntityListener.class)@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE licencias SET activo = false, fecha_eliminacion = now() WHERE id = ?")@Getter@Setterpublic class Licencia extends BaseEntity{    @Column(nullable = false, length = 50)    private String tipoLicencia;    @Column(nullable = false)    private LocalDate fechaInicio;    @Column(nullable = false)    private LocalDate fechaFin;    @Column(length = 1000)    private String motivo;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "personal_id", nullable = false)    private Personal personal;}@Entity@Table(name = "recibos_sueldos")@EntityListeners(AuditingEntityListener.class)@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE recibos_sueldos SET activo = false, fecha_eliminacion = now() WHERE id = ?")@Getter@Setterpublic class ReciboSueldo extends BaseEntity{    @Column(nullable = false, length = 20)    private String periodo;    @Column(nullable = false)    private LocalDate fechaEmision;    @Column(nullable = false, precision = 12, scale = 2)    private BigDecimal montoBruto;    @Column(nullable = false, precision = 12, scale = 2)    private BigDecimal montoNeto;    @Column(columnDefinition = "text")    private String detalles;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "personal_id", nullable = false)    private Personal personal;}public enum CalificacionConceptual {    EXCELENTE,    MUY_BUENO,    BUENO,    REGULAR,    INSUFICIENTE;}@Entity@Table(name = "cuotas")@EntityListeners(AuditingEntityListener.class)@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE cuotas SET activo = false, fecha_eliminacion = now() WHERE id = ?")@Getter@Setterpublic class Cuota extends BaseEntity{    @Column(nullable = false)    private String nombre;    @Column(nullable = false, precision = 10, scale = 2)    private BigDecimal monto;    @Column(nullable = false)    private LocalDate fechaEmision;    @Column(nullable = false)    private LocalDate fechaVencimiento;    @Column(length = 50)    private String nivelAcademico;    @ManyToOne    @JoinColumn(name = "seccion_id")    private Seccion seccion;    @Column    @Enumerated(EnumType.STRING)    private Turno turno;    @OneToMany(mappedBy = "cuota")    private Set<PagoCuota> cuotaPagoCuotas = new HashSet<>();}@Entity@Table(name = "dias_no_habiles")@EntityListeners(AuditingEntityListener.class)@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE dias_no_habiles SET activo = false, fecha_eliminacion = now() WHERE id = ?")@Getter@Setterpublic class DiaNoHabil extends BaseEntity {    @Column(nullable = false)    private LocalDate fecha;    @Column    private String descripcion;}@Entity@Table(name = "alumno_familiar")@EntityListeners(AuditingEntityListener.class)@Getter@Setterpublic class AlumnoFamiliar extends BaseEntity{    @Column(nullable = false, length = 50)    private String tipoRelacion;    @Column(nullable = false)    private Boolean viveConAlumno;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "alumno_id", nullable = false)    private Alumno alumno;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "familiar_id", nullable = false)    private Familiar familiar;}public enum Role {    USER, ADMIN, STUDENT, FAMILY, TEACHER, DIRECTOR, SECRETARY, COORDINATOR, ALTERNATE}@Entity@Table(name = "actas_accidente")@EntityListeners(AuditingEntityListener.class)@Getter@Setter@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE actas_accidente SET activo = false, fecha_eliminacion = now() WHERE id = ?")public class ActaAccidente extends BaseEntity{    @Column(nullable = false)    private OffsetDateTime fechaAccidente;    @Column    private String lugar;    @Column(nullable = false, columnDefinition = "text")    private String descripcion;    @Column(columnDefinition = "text")    private String accionesTomadas;    @ManyToOne()    @JoinColumn(name = "matricula_id")    private Matricula matricula;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "creado_por_id")    private Usuario creadoPor;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "alumno_involucrado_id")    private Alumno alumnoInvolucrado;}@Entity@DiscriminatorValue("FAMILIAR")@Getter@Setterpublic class Familiar extends Persona {    @Column    private String ocupacion;    @OneToMany(mappedBy = "familiar")    private Set<AlumnoFamiliar> familiarAlumnoFamiliares = new HashSet<>();    @OneToMany(mappedBy = "familiar")    private Set<AspiranteFamiliar> familiarAspiranteFamiliares = new HashSet<>();}@Entity@Table(name = "formaciones_academicas")@EntityListeners(AuditingEntityListener.class)@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE formaciones_academicas SET activo = false, fecha_eliminacion = now() WHERE id = ?")@Getter@Setterpublic class FormacionAcademica extends BaseEntity{    @Column(nullable = false, length = 100)    private String nivel;    @Column(nullable = false)    private String institucion;    @Column    private String tituloObtenido;    @Column    private LocalDate fechaInicio;    @Column    private LocalDate fechaFin;}@Entity@Table(name = "secciones")@EntityListeners(AuditingEntityListener.class)@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE secciones SET activo = false, fecha_eliminacion = now() WHERE id = ?")@AllArgsConstructor@NoArgsConstructor@Getter@Setterpublic class Seccion extends BaseEntity{    @Column(nullable = false)    private Integer anioLectivo;    @Column(nullable = false)    private String nombre;    @Column(nullable = false, length = 50)    private String nivelAcademico;    @Column    private Integer grado;    @Column    @Enumerated(EnumType.STRING)    private Turno turno;    @OneToMany(mappedBy = "seccion", fetch = FetchType.LAZY)    private Set<AsignacionDocente> asignaciones = new HashSet<>();    @OneToMany(mappedBy = "seccion", fetch = FetchType.LAZY)    private Set<Matricula> matriculas = new HashSet<>();    @OneToMany(mappedBy = "seccionDestino")    private Set<Comunicado> seccionDestinoComunicados = new HashSet<>();    @OneToMany(mappedBy = "seccion")    private Set<Evaluacion> seccionEvaluaciones = new HashSet<>();    @OneToMany(mappedBy = "seccion")    private Set<AsistenciaDia> seccionAsistenciaDias = new HashSet<>();    @OneToMany(mappedBy = "seccion")    private Set<Cuota> cuotas = new HashSet<>();    public Set<Materia> getMaterias() {        return asignaciones.stream()                .filter(a -> a.getMateria() != null)                .map(AsignacionDocente::getMateria)                .collect(Collectors.toSet());    }}@Entity@EntityListeners(AuditingEntityListener.class)@Inheritance(strategy = InheritanceType.SINGLE_TABLE)@DiscriminatorColumn(name = "tipo", discriminatorType = DiscriminatorType.STRING)@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE persona SET activo = false, fecha_eliminacion = now() WHERE id = ?")@Getter@Setterpublic abstract class Persona extends BaseEntity{    @Column(nullable = false)    private String nombre;    @Column(nullable = false)    private String apellido;    @Column(nullable = false, unique = true, length = 20)    private String dni;    @Column    private LocalDate fechaNacimiento;    @Column    private String genero;    @Column    private String estadoCivil;    @Column    private String nacionalidad;    @Column(length = 500)    private String domicilio;    @Column    private String telefono;    @Column    private String celular;    @Email    @Column    private String emailContacto;    @Column    private String fotoPerfilUrl;    @OneToOne    @JoinColumn(name = "usuario_id")    private Usuario usuario;}@Entity@Table(name = "asistencias_dias")@EntityListeners(AuditingEntityListener.class)@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE asistencias_dias SET activo = false, fecha_eliminacion = now() WHERE id = ?")@Getter@Setterpublic class AsistenciaDia extends BaseEntity {    @Column(nullable = false)    private LocalDate fecha;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "seccion_id", nullable = false)    private Seccion seccion;    @OneToMany(mappedBy = "asistenciaDia")    private Set<RegistroAsistencia> asistenciaDiaRegistroAsistencias = new HashSet<>();}@Entity@Table(name = "registro_asistencias")@EntityListeners(AuditingEntityListener.class)@Filter(name = "activoFilter", condition = "activo = :activo")@SQLDelete(sql = "UPDATE registro_asistencias SET activo = false, fecha_eliminacion = now() WHERE id = ?")@Getter@Setterpublic class RegistroAsistencia extends BaseEntity{    @Column(nullable = false)    private Boolean presente;    @Column    private LocalTime horaIngreso;    @Column    private LocalTime horaSalida;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "asistencia_dia_id", nullable = false)    private AsistenciaDia asistenciaDia;    @ManyToOne()    @JoinColumn(name = "matricula_id")    private Matricula matricula;}
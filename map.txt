package edu.ecep.base_app.mappers;


@Mapper(config = ModelMapperConfig.class, uses = RefMapper.class)
public interface CalificacionTrimestralMapper {
    @Mapping(target = "trimestreId", source = "trimestre.id")
    @Mapping(target = "seccionMateriaId", source = "seccionMateria.id")
    @Mapping(target = "matriculaId", source = "matricula.id")
    CalificacionTrimestralDTO toDto(CalificacionTrimestral e);

    @Mapping(target = "trimestre", source = "trimestreId")
    @Mapping(target = "seccionMateria", source = "seccionMateriaId")
    @Mapping(target = "matricula", source = "matriculaId")
    CalificacionTrimestral toEntity(CalificacionTrimestralCreateDTO dto);
}
package edu.ecep.base_app.mappers;


@Mapper(config = ModelMapperConfig.class, uses = RefMapper.class)
public interface PagoCuotaMapper {
    @Mapping(target = "cuotaId", source = "cuota.id")
    PagoCuotaDTO toDto(PagoCuota e);

    @Mapping(target = "cuota", source = "cuotaId")
    PagoCuota toEntity(PagoCuotaCreateDTO dto);

    default void updateEstado(@MappingTarget PagoCuota e, PagoCuotaEstadoUpdateDTO dto) {
        e.setEstadoPago(dto.getEstadoPago());
        e.setFechaAcreditacion(dto.getFechaAcreditacion());
    }
}
package edu.ecep.base_app.mappers;


public class UsuarioBusquedaMapper {

    public static UsuarioBusquedaDTO toDto(Usuario usuario) {
        return new UsuarioBusquedaDTO(
                usuario.getId(),
                usuario.getEmail(),
                usuario.getUserRoles(),
                usuario.getPersona() != null ? usuario.getPersona().getId() : null,
                usuario.getPersona() != null
                        ? usuario.getPersona().getNombre() + " " + usuario.getPersona().getApellido()
                        : null,
                usuario.getPersona() != null ? usuario.getPersona().getDni() : null,
                usuario.getPersona() != null ? usuario.getPersona().getClass().getSimpleName() : null
        );
    }
}

package edu.ecep.base_app.mappers;


@Mapper(config = ModelMapperConfig.class, uses = RefMapper.class)
public interface MatriculaSeccionHistorialMapper {
    @Mapping(target = "matriculaId", source = "matricula.id")
    @Mapping(target = "seccionId", source = "seccion.id")
    MatriculaSeccionHistorialDTO toDto(MatriculaSeccionHistorial e);

    @Mapping(target = "matricula", source = "matriculaId")
    @Mapping(target = "seccion", source = "seccionId")
    MatriculaSeccionHistorial toEntity(MatriculaSeccionHistorialCreateDTO dto);
}
package edu.ecep.base_app.mappers;


@Mapper(componentModel = "spring", uses = RefMapper.class, unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface EvaluacionMapper {
    @Mapping(target="seccionMateriaId", source="seccionMateria.id")
    @Mapping(target="trimestreId",      source="trimestre.id")
    EvaluacionDTO toDto(Evaluacion e);

    @Mapping(target="seccionMateria", source="seccionMateriaId")
    @Mapping(target="trimestre",      source="trimestreId")
    Evaluacion toEntity(EvaluacionCreateDTO dto);
}
package edu.ecep.base_app.mappers;


@Mapper(config = ModelMapperConfig.class, uses = RefMapper.class)
public interface MatriculaMapper {
    @Mapping(target = "alumnoId", source = "alumno.id")
    @Mapping(target = "periodoEscolarId", source = "periodoEscolar.id")
    MatriculaDTO toDto(Matricula e);

    @Mapping(target = "alumno", source = "alumnoId")
    @Mapping(target = "periodoEscolar", source = "periodoEscolarId")
    Matricula toEntity(MatriculaCreateDTO dto);

    @Mapping(target = "alumno", source = "alumnoId")
    @Mapping(target = "periodoEscolar", source = "periodoEscolarId")
    void update(@MappingTarget Matricula e, MatriculaDTO dto);
}
package edu.ecep.base_app.mappers;




@Mapper(componentModel = "spring", unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface TrimestreMapper {

    TrimestreDTO toDto(Trimestre entity);

    @Mapping(target = "id", ignore = true)
    @Mapping(target = "dateCreated", ignore = true)
    @Mapping(target = "lastUpdated", ignore = true)
    @Mapping(target = "createdBy", ignore = true)
    @Mapping(target = "modifiedBy", ignore = true)
    @Mapping(target = "activo", ignore = true)
    @Mapping(target = "fechaEliminacion", ignore = true)
    @Mapping(target = "cerrado", ignore = true)
    Trimestre toEntity(TrimestreCreateDTO dto);

    // Merge de campos no nulos desde DTO -> entity, sin tocar id/cerrado/BaseEntity
    @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
    @Mappings({
            @Mapping(target = "id", ignore = true),
            @Mapping(target = "cerrado", ignore = true),
            @Mapping(target = "dateCreated", ignore = true),
            @Mapping(target = "lastUpdated", ignore = true),
            @Mapping(target = "createdBy", ignore = true),
            @Mapping(target = "modifiedBy", ignore = true),
            @Mapping(target = "activo", ignore = true),
            @Mapping(target = "fechaEliminacion", ignore = true)
    })
    void updateEntityFromDto(TrimestreDTO dto, @MappingTarget Trimestre entity);
}
package edu.ecep.base_app.mappers;


@Mapper(componentModel = "spring", uses = RefMapper.class, unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface ResultadoEvaluacionMapper {
    @Mapping(target="evaluacionId", source="evaluacion.id")
    @Mapping(target="matriculaId",  source="matricula.id")
    ResultadoEvaluacionDTO toDto(ResultadoEvaluacion e);

    @Mapping(target="evaluacion", source="evaluacionId")
    @Mapping(target="matricula",  source="matriculaId")
    ResultadoEvaluacion toEntity(ResultadoEvaluacionCreateDTO dto);
}
package edu.ecep.base_app.mappers;



@Mapper(config = ModelMapperConfig.class, uses = RefMapper.class)
public interface AlumnoFamiliarMapper {

    @Mapping(target = "alumnoId", source = "alumno.id")
    @Mapping(target = "familiarId", source = "familiar.id")
    AlumnoFamiliarDTO toDto(AlumnoFamiliar e);

    // CREATE
    @Mapping(target = "alumno", source = "alumnoId")
    @Mapping(target = "familiar", source = "familiarId")
    AlumnoFamiliar toEntity(AlumnoFamiliarCreateDTO dto);

    // UPDATE
    @Mapping(target = "alumno", source = "alumnoId")
    @Mapping(target = "familiar", source = "familiarId")
    @Mapping(target = "id", ignore = true)
    void update(@MappingTarget AlumnoFamiliar e, AlumnoFamiliarDTO dto);
}
package edu.ecep.base_app.mappers;


@Mapper(config = ModelMapperConfig.class)
public interface PeriodoEscolarMapper {
    PeriodoEscolarDTO toDto(PeriodoEscolar e);

    PeriodoEscolar toEntity(PeriodoEscolarCreateDTO dto);

    void update(@MappingTarget PeriodoEscolar e, PeriodoEscolarDTO dto);
}
package edu.ecep.base_app.mappers;


@Mapper(config = ModelMapperConfig.class, uses = RefMapper.class)
public interface AsignacionDocenteMateriaMapper {
    @Mapping(target = "seccionMateriaId", source = "seccionMateria.id")
    @Mapping(target = "personalId", source = "personal.id")
    AsignacionDocenteMateriaDTO toDto(AsignacionDocenteMateria e);

    @Mapping(target = "seccionMateria", source = "seccionMateriaId")
    @Mapping(target = "personal", source = "personalId")
    AsignacionDocenteMateria toEntity(AsignacionDocenteMateriaCreateDTO dto);

    @Mapping(target = "seccionMateria", source = "seccionMateriaId")
    @Mapping(target = "personal", source = "personalId")
    void update(@MappingTarget AsignacionDocenteMateria e, AsignacionDocenteMateriaDTO dto);
}
package edu.ecep.base_app.mappers;




@Mapper(componentModel = "spring", unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface DetalleAsistenciaMapper {

    // Entity -> DTO
    @Mappings({
            @Mapping(target = "jornadaId", source = "jornada.id"),
            @Mapping(target = "matriculaId", source = "matricula.id")
    })
    DetalleAsistenciaDTO toDto(DetalleAsistencia entity);

    // CreateDTO -> Entity (solo seteamos asociaciones por id)
    @Mappings({
            @Mapping(target = "id", ignore = true),
            @Mapping(target = "dateCreated", ignore = true),
            @Mapping(target = "lastUpdated", ignore = true),
            @Mapping(target = "createdBy", ignore = true),
            @Mapping(target = "modifiedBy", ignore = true),
            @Mapping(target = "activo", ignore = true),
            @Mapping(target = "fechaEliminacion", ignore = true),
            @Mapping(target = "jornada", expression = "java(jornadaFromId(dto.getJornadaId()))"),
            @Mapping(target = "matricula", expression = "java(matriculaFromId(dto.getMatriculaId()))")
    })
    DetalleAsistencia toEntity(DetalleAsistenciaCreateDTO dto);

    // Helpers para construir entidades “proxy” solo con id
    default JornadaAsistencia jornadaFromId(Long id) {
        if (id == null) return null;
        JornadaAsistencia j = new JornadaAsistencia();
        j.setId(id);
        return j;
    }

    default Matricula matriculaFromId(Long id) {
        if (id == null) return null;
        Matricula m = new Matricula();
        m.setId(id);
        return m;
    }
}
package edu.ecep.base_app.mappers;


@Mapper(componentModel = "spring", uses = RefMapper.class, unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface JornadaAsistenciaMapper {
    @Mapping(target="seccionId",   source="seccion.id")
    @Mapping(target="trimestreId", source="trimestre.id")
    JornadaAsistenciaDTO toDto(JornadaAsistencia e);

    @Mapping(target="seccion",   source="seccionId")
    @Mapping(target="trimestre", source="trimestreId")
    JornadaAsistencia toEntity(JornadaAsistenciaCreateDTO dto);
}
package edu.ecep.base_app.mappers;


@Mapper(config = ModelMapperConfig.class, uses = RefMapper.class)
public interface AsignacionDocenteSeccionMapper {
    @Mapping(target = "seccionId", source = "seccion.id")
    @Mapping(target = "personalId", source = "personal.id")
    AsignacionDocenteSeccionDTO toDto(AsignacionDocenteSeccion e);

    @Mapping(target = "seccion", source = "seccionId")
    @Mapping(target = "personal", source = "personalId")
    AsignacionDocenteSeccion toEntity(AsignacionDocenteSeccionCreateDTO dto);

    @Mapping(target = "seccion", source = "seccionId")
    @Mapping(target = "personal", source = "personalId")
    void update(@MappingTarget AsignacionDocenteSeccion e, AsignacionDocenteSeccionDTO dto);
}
package edu.ecep.base_app.mappers;


@Mapper(componentModel = "spring", unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface PersonalMapper {

    // Lectura
    PersonalDTO toDto(Personal e);

    // Alta (CreateDTO -> entidad)
    Personal toEntity(PersonalCreateDTO dto);

    // Update parcial: ignora nulos para no pisar valores existentes
    @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
    @Mapping(target = "id", ignore = true)
    void update(@MappingTarget Personal entity, PersonalUpdateDTO dto);
}
package edu.ecep.base_app.mappers;


// =============================================================
// Config + helper de referencias (IDs -> entidades con sólo id)
// =============================================================
@MapperConfig(componentModel = "spring", unmappedTargetPolicy = ReportingPolicy.IGNORE)
interface ModelMapperConfig {
}
package edu.ecep.base_app.mappers;


@Mapper(componentModel = "spring", uses = RefMapper.class, unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface AsistenciaPersonalMapper {

    @Mapping(target = "personalId", source = "personal.id")
    AsistenciaPersonalDTO toDto(AsistenciaPersonal entity);

    @Mapping(target = "personal", source = "personalId")
    AsistenciaPersonal toEntity(AsistenciaPersonalDTO dto);

    // Si usás el CreateDTO, dejá también este método:
    @Mapping(target = "personal", source = "personalId")
    AsistenciaPersonal toEntity(AsistenciaPersonalCreateDTO dto);

    @Mapping(target = "id", ignore = true)
    @Mapping(target = "personal", source = "personalId")
    void updateEntityFromDto(AsistenciaPersonalDTO dto, @MappingTarget AsistenciaPersonal entity);
}

package edu.ecep.base_app.mappers;



@Mapper(config = ModelMapperConfig.class)
public interface DiaNoHabilMapper {
    DiaNoHabilDTO toDto(DiaNoHabil e);
    DiaNoHabil toEntity(DiaNoHabilDTO dto);

    @Mapping(target = "id", ignore = true)
    void update(@MappingTarget DiaNoHabil e, DiaNoHabilDTO dto);
}
package edu.ecep.base_app.mappers;


@Component
class RefMapper {
    protected <T extends BaseEntity> T ref(Long id, T t) {
        if (id == null) return null;
        t.setId(id);
        return t;
    }

    Evaluacion toEvaluacion(Long id) {
        if (id == null) return null;
        Evaluacion e = new Evaluacion();
        e.setId(id);
        return e;
    }
    JornadaAsistencia toJornadaAsistencia(Long id) {
        if (id == null) return null;
        JornadaAsistencia j = new JornadaAsistencia();
        j.setId(id);
        return j;
    }



    Alumno toAlumno(Long id) {
        return ref(id, new Alumno());
    }

    Familiar toFamiliar(Long id) {
        return ref(id, new Familiar());
    }

    Personal toPersonal(Long id) {
        return ref(id, new Personal());
    }

    PeriodoEscolar toPeriodoEscolar(Long id) {
        return ref(id, new PeriodoEscolar());
    }

    Trimestre toTrimestre(Long id) {
        return ref(id, new Trimestre());
    }

    Seccion toSeccion(Long id) {
        return ref(id, new Seccion());
    }

    Materia toMateria(Long id) {
        return ref(id, new Materia());
    }

    SeccionMateria toSeccionMateria(Long id) {
        return ref(id, new SeccionMateria());
    }

    Matricula toMatricula(Long id) {
        return ref(id, new Matricula());
    }

    EmisionCuota toEmisionCuota(Long id) {
        return ref(id, new EmisionCuota());
    }

    Cuota toCuota(Long id) {
        return ref(id, new Cuota());
    }

    Aspirante toAspirante(Long id) {return ref(id, new Aspirante());}


}

package edu.ecep.base_app.mappers;


@Mapper(config = ModelMapperConfig.class, uses = RefMapper.class)
public interface InformeInicialMapper {
    @Mapping(target = "trimestreId", source = "trimestre.id")
    @Mapping(target = "matriculaId", source = "matricula.id")
    InformeInicialDTO toDto(InformeInicial e);

    @Mapping(target = "trimestre", source = "trimestreId")
    @Mapping(target = "matricula", source = "matriculaId")
    InformeInicial toEntity(InformeInicialCreateDTO dto);

    @Mapping(target = "trimestre", source = "trimestreId")
    @Mapping(target = "matricula", source = "matriculaId")
    void update(@MappingTarget InformeInicial e, InformeInicialDTO dto);
}
package edu.ecep.base_app.mappers;


@Mapper(config = ModelMapperConfig.class, uses = RefMapper.class)
public interface SeccionMateriaMapper {
    @Mapping(target = "seccionId", source = "seccion.id")
    @Mapping(target = "materiaId", source = "materia.id")
    SeccionMateriaDTO toDto(SeccionMateria e);

    @Mapping(target = "seccion", source = "seccionId")
    @Mapping(target = "materia", source = "materiaId")
    SeccionMateria toEntity(SeccionMateriaCreateDTO dto);
}
package edu.ecep.base_app.mappers;


@Mapper(config = ModelMapperConfig.class, uses = RefMapper.class)
public interface CuotaMapper {
    @Mapping(target = "matriculaId", source = "matricula.id")
    @Mapping(target = "emisionId", source = "emision.id")
    CuotaDTO toDto(Cuota e);

    @Mapping(target = "matricula", source = "matriculaId")
    @Mapping(target = "emision", source = "emisionId")
    Cuota toEntity(CuotaCreateDTO dto);

    @Mapping(target = "matricula", source = "matriculaId")
    @Mapping(target = "emision", source = "emisionId")
    void update(@MappingTarget Cuota e, CuotaDTO dto);
}
package edu.ecep.base_app.mappers;



@Mapper(config = ModelMapperConfig.class)
public interface FamiliarMapper {
    FamiliarDTO toDto(Familiar e);
    Familiar toEntity(FamiliarDTO dto);

    @Mapping(target = "id", ignore = true)
    void update(@MappingTarget Familiar e, FamiliarDTO dto);
}
package edu.ecep.base_app.mappers;


@Mapper(config = ModelMapperConfig.class, uses = RefMapper.class)
public interface ActaAccidenteMapper {
    @Mapping(target = "alumnoId", source = "alumno.id")
    @Mapping(target = "informanteId", source = "informante.id")
    ActaAccidenteDTO toDto(ActaAccidente e);

    @Mapping(target = "alumno", source = "alumnoId")
    @Mapping(target = "informante", source = "informanteId")
    ActaAccidente toEntity(ActaAccidenteCreateDTO dto);

    @Mapping(target = "alumno", source = "alumnoId")
    @Mapping(target = "informante", source = "informanteId")
    void update(@MappingTarget ActaAccidente e, ActaAccidenteDTO dto);

    @BeanMapping(ignoreByDefault = true)
    @Mapping(target = "fechaSuceso", source = "fechaSuceso")
    @Mapping(target = "descripcion", source = "descripcion")
    @Mapping(target = "estado", source = "estado")
    @Mapping(target = "creadoPor", source = "creadoPor")
    void applyUpdate(@MappingTarget ActaAccidente e, ActaAccidenteUpdateDTO dto);
}
package edu.ecep.base_app.mappers;



@Mapper(config = ModelMapperConfig.class)
public interface AlumnoMapper {
    AlumnoDTO toDto(Alumno e);
    Alumno toEntity(AlumnoDTO dto);

    @Mapping(target = "id", ignore = true)
    void update(@MappingTarget Alumno e, AlumnoDTO dto);
}
package edu.ecep.base_app.mappers;


@Mapper(config = ModelMapperConfig.class, uses = RefMapper.class)
public interface ReciboSueldoMapper {
    @Mapping(target = "personalId", source = "personal.id")
    ReciboSueldoDTO toDto(ReciboSueldo e);

    @Mapping(target = "personal", source = "personalId")
    ReciboSueldo toEntity(ReciboSueldoCreateDTO dto);
}
package edu.ecep.base_app.mappers;


@Component
public class DateMapper {
    public OffsetDateTime toOffsetDateTime(LocalDateTime v) {
        return v == null ? null : v.atZone(ZoneId.systemDefault()).toOffsetDateTime();
    }
    public LocalDateTime toLocalDateTime(OffsetDateTime v) {
        return v == null ? null : v.atZoneSameInstant(ZoneId.systemDefault()).toLocalDateTime();
    }
}

package edu.ecep.base_app.mappers;


@Mapper(config = ModelMapperConfig.class, uses = { DateMapper.class })
public interface EmisionCuotaMapper {
    EmisionCuotaDTO toDto(EmisionCuota e);

    EmisionCuota toEntity(EmisionCuotaCreateDTO dto);
}
package edu.ecep.base_app.mappers;


@Mapper(config = ModelMapperConfig.class)
public interface MateriaMapper {
    MateriaDTO toDto(Materia e);
    Materia toEntity(MateriaCreateDTO dto);
    void update(@MappingTarget Materia e, MateriaDTO dto);
}
package edu.ecep.base_app.mappers;


// package edu.ecep.base_app.mappers;


@Mapper(componentModel = "spring", uses = RefMapper.class, unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface AspiranteFamiliarMapper {
    @Mapping(target = "aspiranteId", source = "aspirante.id")
    @Mapping(target = "familiarId", source = "familiar.id")
    AspiranteFamiliarDTO toDto(AspiranteFamiliar e);

    @Mapping(target = "aspirante", source = "aspiranteId")
    @Mapping(target = "familiar", source = "familiarId")
    AspiranteFamiliar toEntity(AspiranteFamiliarDTO dto);

    @Mapping(target = "id", ignore = true)
    void updateEntityFromDto(AspiranteFamiliarDTO dto, @MappingTarget AspiranteFamiliar entity);

}
package edu.ecep.base_app.mappers;


@Mapper(componentModel = "spring", unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface FormacionAcademicaMapper {
    @Mapping(source = "personal.id", target = "personalId")
    FormacionAcademicaDTO toDto(FormacionAcademica entity);

    @Mapping(target = "personal", ignore = true) // lo setea el service por id
    FormacionAcademica toEntity(FormacionAcademicaDTO dto);

    @Mapping(target = "id", ignore = true)
    @Mapping(target = "personal", ignore = true)
    void updateEntityFromDto(FormacionAcademicaDTO dto, @MappingTarget FormacionAcademica entity);
}
package edu.ecep.base_app.mappers;


@Mapper(config = ModelMapperConfig.class, uses = RefMapper.class)
public interface SolicitudBajaAlumnoMapper {
    @Mapping(target = "matriculaId", source = "matricula.id")
    SolicitudBajaAlumnoDTO toDto(SolicitudBajaAlumno e);

    @Mapping(target = "matricula", source = "matriculaId")
    SolicitudBajaAlumno toEntity(SolicitudBajaAlumnoCreateDTO dto);
}
package edu.ecep.base_app.mappers;


@Mapper(componentModel = "spring", uses = RefMapper.class, unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface LicenciaMapper {

    @Mapping(target = "personalId", source = "personal.id")
    LicenciaDTO toDto(Licencia e);

    @Mapping(target = "personal", source = "personalId")
    Licencia toEntity(LicenciaCreateDTO dto);

    @Mapping(target = "personal", source = "personalId")
    @Mapping(target = "id", ignore = true)
    void update(@MappingTarget Licencia e, LicenciaDTO dto);
}
package edu.ecep.base_app.mappers;


@Mapper(config = ModelMapperConfig.class)
public interface AspiranteMapper {
    AspiranteDTO toDto(Aspirante e);
    Aspirante toEntity(AspiranteDTO dto);

    @Mapping(target = "id", ignore = true)
    void update(@MappingTarget Aspirante e, AspiranteDTO dto);
}package edu.ecep.base_app.mappers;


@Mapper(config = ModelMapperConfig.class, uses = RefMapper.class)
public interface ComunicadoMapper {
    @Mapping(target = "seccionId", source = "seccion.id")
    ComunicadoDTO toDto(Comunicado e);

    @Mapping(target = "seccion", source = "seccionId")
    Comunicado toEntity(ComunicadoCreateDTO dto);

    @Mapping(target = "seccion", source = "seccionId")
    void update(@MappingTarget Comunicado e, ComunicadoDTO dto);
}
package edu.ecep.base_app.mappers;



@Mapper(componentModel = "spring", uses = RefMapper.class, unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface SolicitudAdmisionMapper {

    @Mapping(target = "aspiranteId", source = "aspirante.id")
    SolicitudAdmisionDTO toDto(SolicitudAdmision e);

    @Mapping(target = "aspirante", source = "aspiranteId")
    SolicitudAdmision toEntity(SolicitudAdmisionDTO dto);

    // ⬇⬇⬇ FIX: @MappingTarget + mapping de aspiranteId → aspirante en update
    @Mapping(target = "aspirante", source = "aspiranteId")
    @Mapping(target = "id", ignore = true)
    void updateEntityFromDto(SolicitudAdmisionDTO dto, @MappingTarget SolicitudAdmision entity);
}
package edu.ecep.base_app.mappers;


@Mapper(config = ModelMapperConfig.class, uses = RefMapper.class)
public interface SeccionMapper {
    @Mapping(target = "periodoEscolarId", source = "periodoEscolar.id")
    SeccionDTO toDto(Seccion e);

    @Mapping(target = "periodoEscolar", source = "periodoEscolarId")
    Seccion toEntity(SeccionCreateDTO dto);

    @Mapping(target = "periodoEscolar", source = "periodoEscolarId")
    void update(@MappingTarget Seccion e, SeccionDTO dto);
}

@RestController@RequestMapping(value = "/api/alumno-familiar", produces = MediaType.APPLICATION_JSON_VALUE)public class AlumnoFamiliarResource {    private final AlumnoFamiliarService alumnoFamiliarService;    public AlumnoFamiliarResource(final AlumnoFamiliarService alumnoFamiliarService) {        this.alumnoFamiliarService = alumnoFamiliarService;    }    @GetMapping    public ResponseEntity<List<AlumnoFamiliarDTO>> getAllAlumnoFamiliars() {        return ResponseEntity.ok(alumnoFamiliarService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<AlumnoFamiliarDTO> getAlumnoFamiliar(            @PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(alumnoFamiliarService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createAlumnoFamiliar(            @RequestBody @Valid final AlumnoFamiliarDTO alumnoFamiliarDTO) {        final Long createdId = alumnoFamiliarService.create(alumnoFamiliarDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateAlumnoFamiliar(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final AlumnoFamiliarDTO alumnoFamiliarDTO) {        alumnoFamiliarService.update(id, alumnoFamiliarDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteAlumnoFamiliar(@PathVariable(name = "id") final Long id) {        alumnoFamiliarService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/matriculas", produces = MediaType.APPLICATION_JSON_VALUE)public class MatriculaResource {    private final MatriculaService matriculaService;    public MatriculaResource(final MatriculaService matriculaService) {        this.matriculaService = matriculaService;    }    @GetMapping    public ResponseEntity<List<MatriculaDTO>> getAllMatriculas() {        return ResponseEntity.ok(matriculaService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<MatriculaDTO> getMatricula(@PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(matriculaService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createMatricula(@RequestBody @Valid final MatriculaDTO matriculaDTO) {        final Long createdId = matriculaService.create(matriculaDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateMatricula(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final MatriculaDTO matriculaDTO) {        matriculaService.update(id, matriculaDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteMatricula(@PathVariable(name = "id") final Long id) {        matriculaService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/recibos-sueldo", produces = MediaType.APPLICATION_JSON_VALUE)public class ReciboSueldoResource {    private final ReciboSueldoService reciboSueldoService;    public ReciboSueldoResource(final ReciboSueldoService reciboSueldoService) {        this.reciboSueldoService = reciboSueldoService;    }    @GetMapping    public ResponseEntity<List<ReciboSueldoDTO>> getAllReciboSueldos() {        return ResponseEntity.ok(reciboSueldoService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<ReciboSueldoDTO> getReciboSueldo(            @PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(reciboSueldoService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createReciboSueldo(            @RequestBody @Valid final ReciboSueldoDTO reciboSueldoDTO) {        final Long createdId = reciboSueldoService.create(reciboSueldoDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateReciboSueldo(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final ReciboSueldoDTO reciboSueldoDTO) {        reciboSueldoService.update(id, reciboSueldoDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteReciboSueldo(@PathVariable(name = "id") final Long id) {        reciboSueldoService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/informes-inicial", produces = MediaType.APPLICATION_JSON_VALUE)public class InformeInicialResource {    private final InformeInicialService informeInicialService;    public InformeInicialResource(            final InformeInicialService informeInicialService) {        this.informeInicialService = informeInicialService;    }    @GetMapping    public ResponseEntity<List<InformeInicialDTO>> getAllInformeTrimestralInicials() {        return ResponseEntity.ok(informeInicialService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<InformeInicialDTO> getInformeTrimestralInicial(            @PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(informeInicialService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createInformeTrimestralInicial(            @RequestBody @Valid final InformeInicialDTO informeInicialDTO) {        final Long createdId = informeInicialService.create(informeInicialDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateInformeTrimestralInicial(            @PathVariable(name = "id") final Long id,            @RequestBody @Valid final InformeInicialDTO informeInicialDTO) {        informeInicialService.update(id, informeInicialDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteInformeTrimestralInicial(            @PathVariable(name = "id") final Long id) {        informeInicialService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/asignacion-docente", produces = MediaType.APPLICATION_JSON_VALUE)public class AsignacionDocenteResource {    private final AsignacionDocenteService asistenciaDiaService;    public AsignacionDocenteResource(final AsignacionDocenteService asistenciaDiaService) {        this.asistenciaDiaService = asistenciaDiaService;    }    @GetMapping    public ResponseEntity<List<AsignacionDocenteDTO>> getAllAsignacionDocentes() {        return ResponseEntity.ok(asistenciaDiaService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<AsignacionDocenteDTO> getAsignacionDocente(            @PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(asistenciaDiaService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createAsignacionDocente(            @RequestBody @Valid final AsignacionDocenteDTO asistenciaDiaDTO) {        final Long createdId = asistenciaDiaService.create(asistenciaDiaDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateAsignacionDocente(@PathVariable(name = "id") final Long id,                                                    @RequestBody @Valid final AsignacionDocenteDTO asistenciaDiaDTO) {        asistenciaDiaService.update(id, asistenciaDiaDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteAsignacionDocente(@PathVariable(name = "id") final Long id) {        asistenciaDiaService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/secciones", produces = MediaType.APPLICATION_JSON_VALUE)public class SeccionResource {    private final SeccionService seccionService;    public SeccionResource(final SeccionService seccionService) {        this.seccionService = seccionService;    }    @GetMapping    public ResponseEntity<List<SeccionDTO>> getAllSeccions() {        return ResponseEntity.ok(seccionService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<SeccionDTO> getSeccion(@PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(seccionService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createSeccion(@RequestBody @Valid final SeccionDTO seccionDTO) {        final Long createdId = seccionService.create(seccionDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateSeccion(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final SeccionDTO seccionDTO) {        seccionService.update(id, seccionDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteSeccion(@PathVariable(name = "id") final Long id) {        seccionService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/alumnos", produces = MediaType.APPLICATION_JSON_VALUE)public class AlumnoResource {    private final AlumnoService alumnoService;    public AlumnoResource(final AlumnoService alumnoService) {        this.alumnoService = alumnoService;    }    @GetMapping    public ResponseEntity<List<AlumnoDTO>> getAllAlumnos() {        return ResponseEntity.ok(alumnoService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<AlumnoDTO> getAlumno(@PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(alumnoService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createAlumno(@RequestBody @Valid final AlumnoDTO alumnoDTO) {        final Long createdId = alumnoService.create(alumnoDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateAlumno(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final AlumnoDTO alumnoDTO) {        alumnoService.update(id, alumnoDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteAlumno(@PathVariable(name = "id") final Long id) {        alumnoService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/comunicados", produces = MediaType.APPLICATION_JSON_VALUE)public class ComunicadoResource {    private final ComunicadoService comunicadoService;    public ComunicadoResource(final ComunicadoService comunicadoService) {        this.comunicadoService = comunicadoService;    }    @GetMapping    public ResponseEntity<List<ComunicadoDTO>> getAllComunicados() {        return ResponseEntity.ok(comunicadoService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<ComunicadoDTO> getComunicado(@PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(comunicadoService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createComunicado(            @RequestBody @Valid final ComunicadoDTO comunicadoDTO) {        final Long createdId = comunicadoService.create(comunicadoDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateComunicado(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final ComunicadoDTO comunicadoDTO) {        comunicadoService.update(id, comunicadoDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteComunicado(@PathVariable(name = "id") final Long id) {        comunicadoService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/pagos-cuota", produces = MediaType.APPLICATION_JSON_VALUE)public class PagoCuotaResource {    private final PagoCuotaService pagoCuotaService;    public PagoCuotaResource(final PagoCuotaService pagoCuotaService) {        this.pagoCuotaService = pagoCuotaService;    }    @GetMapping    public ResponseEntity<List<PagoCuotaDTO>> getAllPagoCuotas() {        return ResponseEntity.ok(pagoCuotaService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<PagoCuotaDTO> getPagoCuota(@PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(pagoCuotaService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createPagoCuota(            @RequestBody @Valid final PagoCuotaDTO pagoCuotaDTO) {        final Long createdId = pagoCuotaService.create(pagoCuotaDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updatePagoCuota(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final PagoCuotaDTO pagoCuotaDTO) {        pagoCuotaService.update(id, pagoCuotaDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deletePagoCuota(@PathVariable(name = "id") final Long id) {        pagoCuotaService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping("/api/auth")public class AuthController {    @Autowired    private UsuarioRepository usuarioRepository;    @Autowired    private AuthService authService;    @Autowired    private JwtService jwtService;    @Autowired    private UsuarioService usuarioService;    @PostMapping("/login")    public ResponseEntity<?> login(@RequestBody LoginRequest req) {        AuthResponse data = authService.login(req.getEmail(), req.getPassword());        ResponseCookie cookie = ResponseCookie                .from("token", data.getToken())                .httpOnly(true)                .secure(false)   // true en prod con HTTPS                .path("/")                .maxAge(Duration.ofDays(1))                .sameSite("Lax")                .build();        return ResponseEntity.ok()                .header(HttpHeaders.SET_COOKIE, cookie.toString())                .body(Map.of("email", data.getEmail(), "roles", data.getRoles()));    }    @PostMapping("/register")    public ResponseEntity<AuthResponse> register(@RequestBody Usuario request) {        return ResponseEntity.ok(authService.register(request));    }    @PostMapping("/logout")    public ResponseEntity<?> logout(HttpServletResponse response) {        ResponseCookie deleteCookie = ResponseCookie                .from("token", "")                .path("/")                .maxAge(0)                .build();        response.addHeader(HttpHeaders.SET_COOKIE, deleteCookie.toString());        return ResponseEntity.ok(Map.of("message", "logout ok"));    }    @GetMapping("/me")    public ResponseEntity<UsuarioBusquedaDTO> getCurrentUser(            @CookieValue(name = "token", required = false) String token,            Authentication auth) {        String email = (token != null)                ? jwtService.extractUsername(token)                : (auth != null ? auth.getName() : null);        if (email == null) {            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();        }        return authService.getCurrentUserDTO(email)                .map(ResponseEntity::ok)                .orElse(ResponseEntity.notFound().build());    }}@RestController@RequestMapping(value = "/api/formacion-academica", produces = MediaType.APPLICATION_JSON_VALUE)public class FormacionAcademicaResource {    private final FormacionAcademicaService formacionAcademicaService;    public FormacionAcademicaResource(final FormacionAcademicaService formacionAcademicaService) {        this.formacionAcademicaService = formacionAcademicaService;    }    @GetMapping    public ResponseEntity<List<FormacionAcademicaDTO>> getAllFormacionAcademicas() {        return ResponseEntity.ok(formacionAcademicaService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<FormacionAcademicaDTO> getFormacionAcademica(            @PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(formacionAcademicaService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createFormacionAcademica(            @RequestBody @Valid final FormacionAcademicaDTO formacionAcademicaDTO) {        final Long createdId = formacionAcademicaService.create(formacionAcademicaDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateFormacionAcademica(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final FormacionAcademicaDTO formacionAcademicaDTO) {        formacionAcademicaService.update(id, formacionAcademicaDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteFormacionAcademica(@PathVariable(name = "id") final Long id) {        formacionAcademicaService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/no-habiles", produces = MediaType.APPLICATION_JSON_VALUE)public class DiaNoHabilResource {    private final DiaNoHabilService diaNoHabilService;    public DiaNoHabilResource(final DiaNoHabilService diaNoHabilService) {        this.diaNoHabilService = diaNoHabilService;    }    @GetMapping    public ResponseEntity<List<DiaNoHabilDTO>> getAllDiaNoHabils() {        return ResponseEntity.ok(diaNoHabilService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<DiaNoHabilDTO> getDiaNoHabil(@PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(diaNoHabilService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createDiaNoHabil(            @RequestBody @Valid final DiaNoHabilDTO diaNoHabilDTO) {        final Long createdId = diaNoHabilService.create(diaNoHabilDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateDiaNoHabil(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final DiaNoHabilDTO diaNoHabilDTO) {        diaNoHabilService.update(id, diaNoHabilDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteDiaNoHabil(@PathVariable(name = "id") final Long id) {        diaNoHabilService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/users", produces = MediaType.APPLICATION_JSON_VALUE)public class UsuarioResource {    private final UsuarioService usuarioService;    public UsuarioResource(final UsuarioService usuarioService) {        this.usuarioService = usuarioService;    }    @GetMapping    public ResponseEntity<List<UsuarioDTO>> getAllUsuarios() {        return ResponseEntity.ok(usuarioService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<UsuarioDTO> getUsuario(@PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(usuarioService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createUsuario(@RequestBody @Valid final UsuarioDTO usuarioDTO) {        final Long createdId = usuarioService.create(usuarioDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateUsuario(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final UsuarioDTO usuarioDTO) {        usuarioService.update(id, usuarioDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteUsuario(@PathVariable(name = "id") final Long id) {        usuarioService.delete(id);        return ResponseEntity.noContent().build();    }    @GetMapping("/search")    public ResponseEntity<?> search(@RequestParam(required = false) String q) {        Usuario me = usuarioService.getCurrent();        return ResponseEntity.ok(                usuarioService.buscarUsuariosConTipo(q, me.getId())        );    }}@RestController@RequestMapping(value = "/api/actas-accidente", produces = MediaType.APPLICATION_JSON_VALUE)public class ActaAccidenteResource {    private final ActaAccidenteService actaAccidenteService;    public ActaAccidenteResource(final ActaAccidenteService actaAccidenteService) {        this.actaAccidenteService = actaAccidenteService;    }    @GetMapping    public ResponseEntity<List<ActaAccidenteDTO>> getAllActaAccidentes() {        return ResponseEntity.ok(actaAccidenteService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<ActaAccidenteDTO> getActaAccidente(            @PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(actaAccidenteService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createActaAccidente(            @RequestBody @Valid final ActaAccidenteDTO actaAccidenteDTO) {        final Long createdId = actaAccidenteService.create(actaAccidenteDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateActaAccidente(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final ActaAccidenteDTO actaAccidenteDTO) {        actaAccidenteService.update(id, actaAccidenteDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteActaAccidente(@PathVariable(name = "id") final Long id) {        actaAccidenteService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/personal", produces = MediaType.APPLICATION_JSON_VALUE)public class PersonalResource {    private final PersonalService personalService;    public PersonalResource(final PersonalService personalService) {        this.personalService = personalService;    }    @GetMapping    public ResponseEntity<List<PersonalDTO>> getAllPersonals() {        return ResponseEntity.ok(personalService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<PersonalDTO> getPersonal(@PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(personalService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createPersonal(@RequestBody @Valid final PersonalDTO personalDTO) {        final Long createdId = personalService.create(personalDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updatePersonal(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final PersonalDTO personalDTO) {        personalService.update(id, personalDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deletePersonal(@PathVariable(name = "id") final Long id) {        personalService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/materias", produces = MediaType.APPLICATION_JSON_VALUE)public class MateriasResource {    private final MateriaService materiaService;    public MateriasResource(final MateriaService materiaService) {        this.materiaService = materiaService;    }    @GetMapping    public ResponseEntity<List<MateriaDTO>> getAllMateriass() {        return ResponseEntity.ok(materiaService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<MateriaDTO> getMaterias(@PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(materiaService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createMaterias(@RequestBody @Valid final MateriaDTO materiasDTO) {        final Long createdId = materiaService.create(materiasDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateMaterias(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final MateriaDTO materiasDTO) {        materiaService.update(id, materiasDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteMaterias(@PathVariable(name = "id") final Long id) {        materiaService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/calificaciones", produces = MediaType.APPLICATION_JSON_VALUE)public class CalificacionResource {    private final CalificacionService calificacionService;    public CalificacionResource(final CalificacionService calificacionService) {        this.calificacionService = calificacionService;    }    @GetMapping    public ResponseEntity<List<CalificacionDTO>> getAllCalificacions() {        return ResponseEntity.ok(calificacionService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<CalificacionDTO> getCalificacion(            @PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(calificacionService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createCalificacion(            @RequestBody @Valid final CalificacionDTO calificacionDTO) {        final Long createdId = calificacionService.create(calificacionDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateCalificacion(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final CalificacionDTO calificacionDTO) {        calificacionService.update(id, calificacionDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteCalificacion(@PathVariable(name = "id") final Long id) {        calificacionService.delete(id);        return ResponseEntity.noContent().build();    }}@Controller@RequiredArgsConstructor@Slf4jpublic class ChatSocketController {    private final ChatService chatService;    private final UsuarioService userService;    @MessageMapping("/chat.send")    @SendToUser("/queue/ack")    public ChatMessageDTO send(            @Payload SendMessageRequest req,            Principal principal    ) {        Usuario em = userService.findById(Long.valueOf(principal.getName()));        Mensaje saved = chatService.saveAndSend(req, em);        return chatService.toDto(saved);    }}@RestController@RequestMapping(value = "/api/evaluaciones", produces = MediaType.APPLICATION_JSON_VALUE)public class EvaluacionResource {    private final EvaluacionService evaluacionService;    public EvaluacionResource(final EvaluacionService evaluacionService) {        this.evaluacionService = evaluacionService;    }    @GetMapping    public ResponseEntity<List<EvaluacionDTO>> getAllEvaluacions() {        return ResponseEntity.ok(evaluacionService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<EvaluacionDTO> getEvaluacion(@PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(evaluacionService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createEvaluacion(            @RequestBody @Valid final EvaluacionDTO evaluacionDTO) {        final Long createdId = evaluacionService.create(evaluacionDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateEvaluacion(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final EvaluacionDTO evaluacionDTO) {        evaluacionService.update(id, evaluacionDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteEvaluacion(@PathVariable(name = "id") final Long id) {        evaluacionService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping("/api/chat")@RequiredArgsConstructor@Slf4jpublic class ChatController {    private final ChatService chatService;    private final UsuarioService usuarioService;    private final SimpMessagingTemplate messagingTemplate;    @GetMapping("/history/{otherUserId}")    public ResponseEntity<List<ChatMessageDTO>> history(@PathVariable Long otherUserId) {        try {            Usuario me = usuarioService.getCurrent();            List<ChatMessageDTO> messages = chatService.getHistory(me.getId(), otherUserId);            return ResponseEntity.ok(messages);        } catch (ResponseStatusException ex) {            return ResponseEntity.status(ex.getStatusCode()).build();        }    }    @PostMapping("/mark-read/{otherUserId}")    public ResponseEntity<Void> markRead(@PathVariable Long otherUserId) {        try {            Usuario me = usuarioService.getCurrent();            chatService.markRead(me.getId(), otherUserId);            // Notificar al otro usuario que los mensajes fueron leídos            messagingTemplate.convertAndSendToUser(                    String.valueOf(otherUserId),                    "/queue/read-receipts",                    Map.of(                            "readerId", me.getId(),                            "timestamp", System.currentTimeMillis()                    )            );            return ResponseEntity.noContent().build();        } catch (ResponseStatusException ex) {            return ResponseEntity.status(ex.getStatusCode()).build();        }    }    @GetMapping("/active-chats")    public ResponseEntity<List<UsuarioBusquedaDTO>> getActiveChats() {        Usuario me = usuarioService.getCurrent();        List<Usuario> activeUsers = chatService.getActiveChatUsers(me.getId());        List<UsuarioBusquedaDTO> dtos = activeUsers.stream()                .map(u -> usuarioService.buscarUsuarioBusquedaPorId(u.getId()))                .toList();        return ResponseEntity.ok(dtos);    }    // Nuevo endpoint para obtener mensajes no leídos    @GetMapping("/unread-count")    public ResponseEntity<Map<Long, Long>> getUnreadCounts() {        try {            Usuario me = usuarioService.getCurrent();            Map<Long, Long> unreadCounts = chatService.getUnreadCounts(me.getId());            return ResponseEntity.ok(unreadCounts);        } catch (ResponseStatusException ex) {            return ResponseEntity.status(ex.getStatusCode()).build();        }    }    // Endpoint para obtener estado de conexión de usuarios    @GetMapping("/online-status")    public ResponseEntity<Map<Long, Boolean>> getOnlineStatus(@RequestParam List<Long> userIds) {        try {            Map<Long, Boolean> onlineStatus = chatService.getOnlineStatus(userIds);            return ResponseEntity.ok(onlineStatus);        } catch (Exception ex) {            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();        }    }}package edu.ecep.base_app.rest;@RestController@RequestMapping(value = "/api/registros-asistencia", produces = MediaType.APPLICATION_JSON_VALUE)public class RegistroAsistenciaResource {    private final RegistroAsistenciaService registroAsistenciaService;    public RegistroAsistenciaResource(final RegistroAsistenciaService registroAsistenciaService) {        this.registroAsistenciaService = registroAsistenciaService;    }    @GetMapping    public ResponseEntity<List<RegistroAsistenciaDTO>> getAllRegistroAsistencias() {        return ResponseEntity.ok(registroAsistenciaService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<RegistroAsistenciaDTO> getRegistroAsistencia(            @PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(registroAsistenciaService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createRegistroAsistencia(            @RequestBody @Valid final RegistroAsistenciaDTO registroAsistenciaDTO) {        final Long createdId = registroAsistenciaService.create(registroAsistenciaDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateRegistroAsistencia(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final RegistroAsistenciaDTO registroAsistenciaDTO) {        registroAsistenciaService.update(id, registroAsistenciaDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteRegistroAsistencia(@PathVariable(name = "id") final Long id) {        registroAsistenciaService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/asistencia-dias", produces = MediaType.APPLICATION_JSON_VALUE)public class AsistenciaDiaResource {    private final AsistenciaDiaService asistenciaDiaService;    public AsistenciaDiaResource(final AsistenciaDiaService asistenciaDiaService) {        this.asistenciaDiaService = asistenciaDiaService;    }    @GetMapping    public ResponseEntity<List<AsistenciaDiaDTO>> getAllAsistenciaDias() {        return ResponseEntity.ok(asistenciaDiaService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<AsistenciaDiaDTO> getAsistenciaDia(            @PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(asistenciaDiaService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createAsistenciaDia(            @RequestBody @Valid final AsistenciaDiaDTO asistenciaDiaDTO) {        final Long createdId = asistenciaDiaService.create(asistenciaDiaDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateAsistenciaDia(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final AsistenciaDiaDTO asistenciaDiaDTO) {        asistenciaDiaService.update(id, asistenciaDiaDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteAsistenciaDia(@PathVariable(name = "id") final Long id) {        asistenciaDiaService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/cuotas", produces = MediaType.APPLICATION_JSON_VALUE)public class CuotaResource {    private final CuotaService cuotaService;    public CuotaResource(final CuotaService cuotaService) {        this.cuotaService = cuotaService;    }    @GetMapping    public ResponseEntity<List<CuotaDTO>> getAllCuotas() {        return ResponseEntity.ok(cuotaService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<CuotaDTO> getCuota(@PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(cuotaService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createCuota(@RequestBody @Valid final CuotaDTO cuotaDTO) {        final Long createdId = cuotaService.create(cuotaDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateCuota(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final CuotaDTO cuotaDTO) {        cuotaService.update(id, cuotaDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteCuota(@PathVariable(name = "id") final Long id) {        cuotaService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/aspirantes", produces = MediaType.APPLICATION_JSON_VALUE)public class AspiranteResource {    private final AspiranteService aspiranteService;    public AspiranteResource(final AspiranteService aspiranteService) {        this.aspiranteService = aspiranteService;    }    @GetMapping    public ResponseEntity<List<AspiranteDTO>> getAllAspirantes() {        return ResponseEntity.ok(aspiranteService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<AspiranteDTO> getAspirante(@PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(aspiranteService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createAspirante(            @RequestBody @Valid final AspiranteDTO aspiranteDTO) {        final Long createdId = aspiranteService.create(aspiranteDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateAspirante(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final AspiranteDTO aspiranteDTO) {        aspiranteService.update(id, aspiranteDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteAspirante(@PathVariable(name = "id") final Long id) {        aspiranteService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/asistencia-personal", produces = MediaType.APPLICATION_JSON_VALUE)public class AsistenciaPersonalResource {    private final AsistenciaPersonalService asistenciaPersonalService;    public AsistenciaPersonalResource(final AsistenciaPersonalService asistenciaPersonalService) {        this.asistenciaPersonalService = asistenciaPersonalService;    }    @GetMapping    public ResponseEntity<List<AsistenciaPersonalDTO>> getAllAsistenciaPersonals() {        return ResponseEntity.ok(asistenciaPersonalService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<AsistenciaPersonalDTO> getAsistenciaPersonal(            @PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(asistenciaPersonalService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createAsistenciaPersonal(            @RequestBody @Valid final AsistenciaPersonalDTO asistenciaPersonalDTO) {        final Long createdId = asistenciaPersonalService.create(asistenciaPersonalDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateAsistenciaPersonal(@PathVariable(name = "id") final Long id,                                                    @RequestBody @Valid final AsistenciaPersonalDTO asistenciaPersonalDTO) {        asistenciaPersonalService.update(id, asistenciaPersonalDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteAsistenciaPersonal(@PathVariable(name = "id") final Long id) {        asistenciaPersonalService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/solicitudes-admision", produces = MediaType.APPLICATION_JSON_VALUE)public class SolicitudAdmisionResource {    private final SolicitudAdmisionService solicitudAdmisionService;    public SolicitudAdmisionResource(final SolicitudAdmisionService solicitudAdmisionService) {        this.solicitudAdmisionService = solicitudAdmisionService;    }    @GetMapping    public ResponseEntity<List<SolicitudAdmisionDTO>> getAllSolicitudAdmisions() {        return ResponseEntity.ok(solicitudAdmisionService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<SolicitudAdmisionDTO> getSolicitudAdmision(            @PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(solicitudAdmisionService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createSolicitudAdmision(            @RequestBody @Valid final SolicitudAdmisionDTO solicitudAdmisionDTO) {        final Long createdId = solicitudAdmisionService.create(solicitudAdmisionDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateSolicitudAdmision(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final SolicitudAdmisionDTO solicitudAdmisionDTO) {        solicitudAdmisionService.update(id, solicitudAdmisionDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteSolicitudAdmision(@PathVariable(name = "id") final Long id) {        solicitudAdmisionService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/aspirante-familiar", produces = MediaType.APPLICATION_JSON_VALUE)public class AspiranteFamiliarResource {    private final AspiranteFamiliarService aspiranteFamiliarService;    public AspiranteFamiliarResource(final AspiranteFamiliarService aspiranteFamiliarService) {        this.aspiranteFamiliarService = aspiranteFamiliarService;    }    @GetMapping    public ResponseEntity<List<AspiranteFamiliarDTO>> getAllAspiranteFamiliars() {        return ResponseEntity.ok(aspiranteFamiliarService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<AspiranteFamiliarDTO> getAspiranteFamiliar(            @PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(aspiranteFamiliarService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createAspiranteFamiliar(            @RequestBody @Valid final AspiranteFamiliarDTO aspiranteFamiliarDTO) {        final Long createdId = aspiranteFamiliarService.create(aspiranteFamiliarDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateAspiranteFamiliar(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final AspiranteFamiliarDTO aspiranteFamiliarDTO) {        aspiranteFamiliarService.update(id, aspiranteFamiliarDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteAspiranteFamiliar(@PathVariable(name = "id") final Long id) {        aspiranteFamiliarService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/licencias", produces = MediaType.APPLICATION_JSON_VALUE)public class LicenciaResource {    private final LicenciaService licenciaService;    public LicenciaResource(final LicenciaService licenciaService) {        this.licenciaService = licenciaService;    }    @GetMapping    public ResponseEntity<List<LicenciaDTO>> getAllLicencias() {        return ResponseEntity.ok(licenciaService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<LicenciaDTO> getLicencia(@PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(licenciaService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createLicencia(@RequestBody @Valid final LicenciaDTO licenciaDTO) {        final Long createdId = licenciaService.create(licenciaDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateLicencia(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final LicenciaDTO licenciaDTO) {        licenciaService.update(id, licenciaDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteLicencia(@PathVariable(name = "id") final Long id) {        licenciaService.delete(id);        return ResponseEntity.noContent().build();    }}@RestController@RequestMapping(value = "/api/familiares", produces = MediaType.APPLICATION_JSON_VALUE)public class FamiliarResource {    private final FamiliarService familiarService;    public FamiliarResource(final FamiliarService familiarService) {        this.familiarService = familiarService;    }    @GetMapping    public ResponseEntity<List<FamiliarDTO>> getAllFamiliars() {        return ResponseEntity.ok(familiarService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<FamiliarDTO> getFamiliar(@PathVariable(name = "id") final Long id) {        return ResponseEntity.ok(familiarService.get(id));    }    @PostMapping    @ApiResponse(responseCode = "201")    public ResponseEntity<Long> createFamiliar(@RequestBody @Valid final FamiliarDTO familiarDTO) {        final Long createdId = familiarService.create(familiarDTO);        return new ResponseEntity<>(createdId, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Long> updateFamiliar(@PathVariable(name = "id") final Long id,            @RequestBody @Valid final FamiliarDTO familiarDTO) {        familiarService.update(id, familiarDTO);        return ResponseEntity.ok(id);    }    @DeleteMapping("/{id}")    @ApiResponse(responseCode = "204")    public ResponseEntity<Void> deleteFamiliar(@PathVariable(name = "id") final Long id) {        familiarService.delete(id);        return ResponseEntity.noContent().build();    }}
package edu.ecep.base_app.rest;


@RestController
@RequestMapping("/api/periodos")
@RequiredArgsConstructor
@Validated
public class PeriodoEscolarController {
    private final PeriodoEscolarService service;

    @GetMapping
    public List<PeriodoEscolarDTO> list() { return service.findAll(); }

    @GetMapping("/{id}")
    public PeriodoEscolarDTO get(@PathVariable Long id) { return service.get(id); }

    @PostMapping
    public ResponseEntity<Long> create(@RequestBody @Valid PeriodoEscolarCreateDTO dto) {
        Long id = service.create(dto);
        return new ResponseEntity<>(id, HttpStatus.CREATED);
    }
}package edu.ecep.base_app.rest;






@RestController
@RequestMapping("/api/trimestres")
@RequiredArgsConstructor
public class TrimestreController {

    private final TrimestreService service;

    @GetMapping
    public List<TrimestreDTO> list() {
        return service.list();
    }

    @GetMapping("/{id}")
    public TrimestreDTO get(@PathVariable Long id) {
        return service.get(id);
    }

    @PostMapping
    public Long create(@Valid @RequestBody TrimestreCreateDTO dto) {
        return service.create(dto);
    }

    @PutMapping("/{id}")
    public void update(@PathVariable Long id,
                       @Valid @RequestBody TrimestreDTO dto) {
        service.update(id, dto);
    }

    @PostMapping("/{id}/cerrar")
    public void cerrar(@PathVariable Long id) {
        service.cerrar(id);
    }

    @PostMapping("/{id}/reabrir")
    public void reabrir(@PathVariable Long id) {
        service.reabrir(id);
    }
}
package edu.ecep.base_app.rest;


@RestController @RequestMapping("/api/asignaciones/materia")
@RequiredArgsConstructor @Validated
public class AsignacionDocenteMateriaController {
    private final AsignacionDocenteMateriaService service;
    @GetMapping public List<AsignacionDocenteMateriaDTO> list(){ return service.findAll(); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid AsignacionDocenteMateriaCreateDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
}package edu.ecep.base_app.rest;



@RestController
@RequestMapping("/api/asignaciones/seccion")
@RequiredArgsConstructor
@Validated
public class AsignacionDocenteSeccionController {
    private final AsignacionDocenteSeccionService service;
    private final AsignacionDocenteSeccionRepository repo;

    @GetMapping public List<AsignacionDocenteSeccionDTO> list(){ return service.findAll(); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid AsignacionDocenteSeccionCreateDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
    @GetMapping("/by-docente")
    public List<AsignacionDocenteSeccion> byDocente(@RequestParam Long empleadoId,
                                                    @RequestParam(required=false)
                                                    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate fecha) {
        LocalDate f = fecha != null ? fecha : LocalDate.now();
        return repo.findVigentesByEmpleado(empleadoId, f);
    }

}package edu.ecep.base_app.rest;




@RestController @RequestMapping("/api/aspirantes")
@RequiredArgsConstructor @Validated
public class AspiranteController {
    private final AspiranteService service;
    @GetMapping public List<AspiranteDTO> list(){ return service.findAll(); }
    @GetMapping("/{id}") public AspiranteDTO get(@PathVariable Long id){ return service.get(id); }
    @PostMapping public ResponseEntity<AspiranteDTO> create(@RequestBody @Valid AspiranteDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
    @PutMapping("/{id}") public ResponseEntity<Void> update(@PathVariable Long id, @RequestBody @Valid AspiranteDTO dto){ service.update(id, dto); return ResponseEntity.noContent().build(); }
    @DeleteMapping("/{id}") public ResponseEntity<Void> delete(@PathVariable Long id){ service.delete(id); return ResponseEntity.noContent().build(); }
}package edu.ecep.base_app.rest;


@RestController
@RequestMapping("/api/personas")
@RequiredArgsConstructor
@Validated
public class PersonaController {

    private final PersonaRepository personaRepository;
    private final AlumnoRepository alumnoRepository;
    private final EmpleadoRepository empleadoRepository;
    private final FamiliarRepository familiarRepository;
    private final AspiranteRepository aspiranteRepository;

    // PersonaController
    @GetMapping("/{personaId}")
    public ResponseEntity<PersonaDTO> get(@PathVariable Long personaId) {
        Persona p = personaRepository.findById(personaId)
                .orElseThrow(() -> new NotFoundException("Persona no encontrada"));
        PersonaDTO dto = PersonaDTO.builder()
                .id(p.getId())
                .nombre(p.getNombre())
                .apellido(p.getApellido())
                .dni(p.getDni())
                .fechaNacimiento(p.getFechaNacimiento())
                .genero(p.getGenero())
                .estadoCivil(p.getEstadoCivil())
                .nacionalidad(p.getNacionalidad())
                .domicilio(p.getDomicilio())
                .telefono(p.getTelefono())
                .celular(p.getCelular())
                .email(p.getEmail())
                .build();
        return ResponseEntity.ok(dto);
    }

    @GetMapping("/dni/{dni}")
    public ResponseEntity<Long> findIdByDni(@PathVariable String dni) {
        Long id = personaRepository.findByDni(dni)
                .map(Persona::getId)
                .orElseThrow(() -> new NotFoundException("Persona no encontrada por DNI"));
        return ResponseEntity.ok(id);
    }

    @GetMapping("/{personaId}/roles")
    public ResponseEntity<RolesPersonaDTO> roles(@PathVariable Long personaId) {
        // 404 si la persona no existe
        personaRepository.findById(personaId)
                .orElseThrow(() -> new NotFoundException("Persona no encontrada"));

        RolesPersonaDTO dto = new RolesPersonaDTO(
                alumnoRepository.existsByPersonaId(personaId),     // ya lo tenés en el repo de alumno
                empleadoRepository.existsByPersonaId(personaId),   // ya lo tenés en el repo de empleado  [oai_citation:8‡repo.txt](file-service://file-LASNrXoaoxpsQRihikYxQX)
                familiarRepository.existsByPersonaId(personaId),   // existe en tu repo de familiar  [oai_citation:9‡dtos.txt](file-service://file-2K2ZUDBA9dEooKRDQE77Py)
                aspiranteRepository.existsByPersonaId(personaId)   // existe en tu repo de aspirante  [oai_citation:10‡repo.txt](file-service://file-LASNrXoaoxpsQRihikYxQX)
        );
        return ResponseEntity.ok(dto);
    }

    public record RolesPersonaDTO(
            boolean esAlumno,
            boolean esEmpleado,
            boolean esFamiliar,
            boolean esAspirante
    ) {}
}package edu.ecep.base_app.rest;




@RestController
@RequestMapping(value = "/api/asistencia-empleados", produces = MediaType.APPLICATION_JSON_VALUE)
public class AsistenciaEmpleadoResource {

    private final AsistenciaEmpleadoService asistenciaEmpleadoService;

    public AsistenciaEmpleadoResource(final AsistenciaEmpleadoService asistenciaEmpleadoService) {
        this.asistenciaEmpleadoService = asistenciaEmpleadoService;
    }

    @GetMapping
    public ResponseEntity<List<AsistenciaEmpleadoDTO>> getAllAsistenciaEmpleados() {
        return ResponseEntity.ok(asistenciaEmpleadoService.findAll());
    }

    @GetMapping("/{id}")
    public ResponseEntity<AsistenciaEmpleadoDTO> getAsistenciaEmpleado(
            @PathVariable(name = "id") final Long id) {
        return ResponseEntity.ok(asistenciaEmpleadoService.get(id));
    }

    @PostMapping
    @ApiResponse(responseCode = "201")
    public ResponseEntity<Long> createAsistenciaEmpleado(
            @RequestBody @Valid final AsistenciaEmpleadoDTO asistenciaEmpleadoDTO) {
        final Long createdId = asistenciaEmpleadoService.create(asistenciaEmpleadoDTO);
        return new ResponseEntity<>(createdId, HttpStatus.CREATED);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Long> updateAsistenciaEmpleado(@PathVariable(name = "id") final Long id,
                                                    @RequestBody @Valid final AsistenciaEmpleadoDTO asistenciaEmpleadoDTO) {
        asistenciaEmpleadoService.update(id, asistenciaEmpleadoDTO);
        return ResponseEntity.ok(id);
    }

    @DeleteMapping("/{id}")
    @ApiResponse(responseCode = "204")
    public ResponseEntity<Void> deleteAsistenciaEmpleado(@PathVariable(name = "id") final Long id) {
        asistenciaEmpleadoService.delete(id);
        return ResponseEntity.noContent().build();
    }

}
package edu.ecep.base_app.rest;





@RestController
@RequestMapping("/api/licencias")
@RequiredArgsConstructor
@Validated
public class LicenciaController {
    private final LicenciaService service;
    @GetMapping
    public List<LicenciaDTO> list(){ return service.findAll(); }
    @GetMapping("/{id}") public LicenciaDTO get(@PathVariable Long id){ return service.get(id); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid LicenciaCreateDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
    @PutMapping("/{id}") public ResponseEntity<Void> update(@PathVariable Long id, @RequestBody @Valid LicenciaDTO dto){ service.update(id, dto); return ResponseEntity.noContent().build(); }
}package edu.ecep.base_app.rest;





@RestController @RequestMapping("/api/calificaciones-trimestrales")
@RequiredArgsConstructor @Validated
public class CalificacionTrimestralController {
    private final CalificacionTrimestralService service;
    @GetMapping public List<CalificacionTrimestralDTO> list(){ return service.findAll(); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid CalificacionTrimestralCreateDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
}
package edu.ecep.base_app.rest;



@RestController
@RequestMapping("/api/comunicados")
@RequiredArgsConstructor
@Validated
public class ComunicadoController{
    private final ComunicadoService service;
    @GetMapping public List<ComunicadoDTO> list(){ return service.findAll(); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid ComunicadoCreateDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
}
package edu.ecep.base_app.rest;






@RestController
@RequestMapping("/api/pagos")
@RequiredArgsConstructor
@Validated
public class PagoCuotaController {
    private final PagoCuotaService service;
    @GetMapping public List<PagoCuotaDTO> list(){ return service.findAll(); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid PagoCuotaCreateDTO dto){ return new ResponseEntity<>(service.crearPago(dto), HttpStatus.CREATED); }
    @PatchMapping("/{id}/estado") public ResponseEntity<Void> actualizarEstado(@PathVariable Long id, @RequestBody @Valid PagoCuotaEstadoUpdateDTO dto){ service.actualizarEstado(id, dto); return ResponseEntity.noContent().build(); }
}
package edu.ecep.base_app.rest;



@RestController
@RequestMapping(value = "/api/aspirante-familiar", produces = MediaType.APPLICATION_JSON_VALUE)
public class AspiranteFamiliarController {

    private final AspiranteFamiliarService aspiranteFamiliarService;

    public AspiranteFamiliarController(final AspiranteFamiliarService aspiranteFamiliarService) {
        this.aspiranteFamiliarService = aspiranteFamiliarService;
    }

    @GetMapping
    public ResponseEntity<List<AspiranteFamiliarDTO>> getAllAspiranteFamiliars() {
        return ResponseEntity.ok(aspiranteFamiliarService.findAll());
    }

    @GetMapping("/{id}")
    public ResponseEntity<AspiranteFamiliarDTO> getAspiranteFamiliar(
            @PathVariable(name = "id") final Long id) {
        return ResponseEntity.ok(aspiranteFamiliarService.get(id));
    }

    @PostMapping
    @ApiResponse(responseCode = "201")
    public ResponseEntity<Long> createAspiranteFamiliar(
            @RequestBody @Valid final AspiranteFamiliarDTO aspiranteFamiliarDTO) {
        final Long createdId = aspiranteFamiliarService.create(aspiranteFamiliarDTO);
        return new ResponseEntity<>(createdId, HttpStatus.CREATED);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Long> updateAspiranteFamiliar(@PathVariable(name = "id") final Long id,
            @RequestBody @Valid final AspiranteFamiliarDTO aspiranteFamiliarDTO) {
        aspiranteFamiliarService.update(id, aspiranteFamiliarDTO);
        return ResponseEntity.ok(id);
    }

    @DeleteMapping("/{id}")
    @ApiResponse(responseCode = "204")
    public ResponseEntity<Void> deleteAspiranteFamiliar(@PathVariable(name = "id") final Long id) {
        aspiranteFamiliarService.delete(id);
        return ResponseEntity.noContent().build();
    }

}
package edu.ecep.base_app.rest;



@RestController
@RequestMapping("/api/alumnos")
@RequiredArgsConstructor
@Validated
public class AlumnoController {
    private final AlumnoService service;
    @GetMapping public List<AlumnoDTO> list(){ return service.findAll(); }
    @GetMapping("/{id}") public AlumnoDTO get(@PathVariable Long id){ return service.get(id); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid AlumnoDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
    @PutMapping("/{id}") public ResponseEntity<Void> update(@PathVariable Long id, @RequestBody @Valid AlumnoDTO dto){ service.update(id, dto); return ResponseEntity.noContent().build(); }
    @DeleteMapping("/{id}") public ResponseEntity<Void> delete(@PathVariable Long id){ service.delete(id); return ResponseEntity.noContent().build(); }
}package edu.ecep.base_app.rest;



@RestController
@RequestMapping("/api/auth")
public class AuthController {

    @Autowired
    private UsuarioRepository usuarioRepository;
    @Autowired
    private AuthService authService;

    @Autowired
    private JwtService jwtService;

    @Autowired
    private UsuarioService usuarioService;

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody LoginRequest req) {
        AuthResponse data = authService.login(req.getEmail(), req.getPassword());
        ResponseCookie cookie = ResponseCookie
                .from("token", data.getToken())
                .httpOnly(true)
                .secure(false)   // true en prod con HTTPS
                .path("/")
                .maxAge(Duration.ofDays(1))
                .sameSite("Lax")
                .build();

        return ResponseEntity.ok()
                .header(HttpHeaders.SET_COOKIE, cookie.toString())
                .body(Map.of("email", data.getEmail(), "roles", data.getUserRoles()));
    }

    @PostMapping("/register")
    public ResponseEntity<AuthResponse> register(@RequestBody Usuario request) {
        return ResponseEntity.ok(authService.register(request));
    }

    @PostMapping("/logout")
    public ResponseEntity<?> logout(HttpServletResponse response) {
        ResponseCookie deleteCookie = ResponseCookie
                .from("token", "")
                .path("/")
                .maxAge(0)
                .build();
        response.addHeader(HttpHeaders.SET_COOKIE, deleteCookie.toString());
        return ResponseEntity.ok(Map.of("message", "logout ok"));
    }

    @GetMapping("/me")
    public ResponseEntity<UsuarioBusquedaDTO> getCurrentUser(
            @CookieValue(name = "token", required = false) String token,
            Authentication auth) {

        String email = (token != null)
                ? jwtService.extractUsername(token)
                : (auth != null ? auth.getName() : null);

        if (email == null) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }

        return authService.getCurrentUserDTO(email)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }


}
package edu.ecep.base_app.rest;


@RestController @RequestMapping("/api/empleados")
@RequiredArgsConstructor @Validated
public class EmpleadoController {
    private final EmpleadoService service;
    @GetMapping public List<EmpleadoDTO> list(){ return service.findAll(); }
    @GetMapping("/{id}") public EmpleadoDTO get(@PathVariable Long id){ return service.get(id); }
    @PostMapping public ResponseEntity<EmpleadoDTO> create(@RequestBody @Valid EmpleadoCreateDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
    @PutMapping("/{id}") public ResponseEntity<Void> update(@PathVariable Long id, @RequestBody @Valid EmpleadoUpdateDTO dto){ service.update(id, dto); return ResponseEntity.noContent().build(); }
    @DeleteMapping("/{id}") public ResponseEntity<Void> delete(@PathVariable Long id){ service.delete(id); return ResponseEntity.noContent().build(); }
}
package edu.ecep.base_app.rest;





@RestController
@RequestMapping("/api/asistencias/detalles")
@RequiredArgsConstructor
@Validated
public class DetalleAsistenciaController {

    private final DetalleAsistenciaService service;

    @GetMapping
    public List<DetalleAsistenciaDTO> list() {
        return service.findAll();
    }

    @PostMapping
    public ResponseEntity<Long> marcar(@RequestBody @Validated DetalleAsistenciaCreateDTO dto) {
        return new ResponseEntity<>(service.marcar(dto), HttpStatus.CREATED);
    }

    @GetMapping("/search")
    @Transactional(readOnly = true)
    public List<DetalleAsistenciaDTO> search(
            @RequestParam(required = false) Long jornadaId,
            @RequestParam(required = false) Long matriculaId,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate from,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate to
    ) {
        return service.search(jornadaId, matriculaId, from, to);
    }

    @DeleteMapping("/{id}")
    @PreAuthorize("hasAnyRole('ADMIN','DIRECTOR','TEACHER')")
    public ResponseEntity<Void> delete(@PathVariable Long id) {
        service.delete(id);
        return ResponseEntity.noContent().build(); // 204
    }
}
package edu.ecep.base_app.rest;




@RestController @RequestMapping("/api/evaluaciones")
@RequiredArgsConstructor @Validated
public class EvaluacionController {
    private final EvaluacionService service;
    @GetMapping public List<EvaluacionDTO> list(){ return service.findAll(); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid EvaluacionCreateDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
}
package edu.ecep.base_app.rest;




@RestController
@RequestMapping("/api/dias-no-habiles")
@RequiredArgsConstructor
@Validated
public class DiaNoHabilResource {
    private final DiaNoHabilService service;
    @GetMapping public List<DiaNoHabilDTO> list(){ return service.findAll(); }
    @GetMapping("/{id}") public DiaNoHabilDTO get(@PathVariable Long id){ return service.get(id); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid DiaNoHabilDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
    @PutMapping("/{id}") public ResponseEntity<Void> update(@PathVariable Long id, @RequestBody @Valid DiaNoHabilDTO dto){ service.update(id, dto); return ResponseEntity.noContent().build(); }
    @DeleteMapping("/{id}") public ResponseEntity<Void> delete(@PathVariable Long id){ service.delete(id); return ResponseEntity.noContent().build(); }
}package edu.ecep.base_app.rest;



@RestController
@RequestMapping(value = "/api/users", produces = MediaType.APPLICATION_JSON_VALUE)
public class UsuarioResource {

    private final UsuarioService usuarioService;

    public UsuarioResource(final UsuarioService usuarioService) {
        this.usuarioService = usuarioService;
    }

    @GetMapping
    public ResponseEntity<List<UsuarioDTO>> getAllUsuarios() {
        return ResponseEntity.ok(usuarioService.findAll());
    }

    @GetMapping("/{id}")
    public ResponseEntity<UsuarioDTO> getUsuario(@PathVariable(name = "id") final Long id) {
        return ResponseEntity.ok(usuarioService.get(id));
    }

    @PostMapping
    @ApiResponse(responseCode = "201")
    public ResponseEntity<Long> createUsuario(@RequestBody @Valid final UsuarioDTO usuarioDTO) {
        final Long createdId = usuarioService.create(usuarioDTO);
        return new ResponseEntity<>(createdId, HttpStatus.CREATED);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Long> updateUsuario(@PathVariable(name = "id") final Long id,
            @RequestBody @Valid final UsuarioDTO usuarioDTO) {
        usuarioService.update(id, usuarioDTO);
        return ResponseEntity.ok(id);
    }

    @DeleteMapping("/{id}")
    @ApiResponse(responseCode = "204")
    public ResponseEntity<Void> deleteUsuario(@PathVariable(name = "id") final Long id) {
        usuarioService.delete(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/search")
    public ResponseEntity<?> search(@RequestParam(required = false) String q) {
        Usuario me = usuarioService.getCurrent();
        return ResponseEntity.ok(
                usuarioService.buscarUsuariosConTipo(q, me.getId())
        );
    }
}
package edu.ecep.base_app.rest;



@RestController
@RequestMapping("/api/asistencias")
@RequiredArgsConstructor
public class AsistenciaQueryController {

    private final AsistenciaQueryService service;

    // Docente → secciones vigentes (reusa SeccionDTO)
    @GetMapping("/docentes/{empleadoId}/secciones")
    public List<SeccionDTO> seccionesVigentesDocente(
            @PathVariable Long empleadoId,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate fecha
    ) {
        return service.seccionesVigentesDocente(empleadoId, fecha != null ? fecha : LocalDate.now());
    }

    // Historial diario agregado de una sección
    @GetMapping("/secciones/{seccionId}/historial")
    public List<AsistenciaDiaDTO> historialSeccion(
            @PathVariable Long seccionId,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate from,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate to
    ) {
        return service.historialSeccion(seccionId, from, to);
    }

    // Acumulado/porcentaje en rango
    @GetMapping("/secciones/{seccionId}/acumulado")
    public AsistenciaAcumuladoDTO acumuladoSeccion(
            @PathVariable Long seccionId,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate from,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate to
    ) {
        return service.acumuladoSeccion(seccionId, from, to);
    }

    // Resumen por alumno (para la tabla)
    @GetMapping("/secciones/{seccionId}/alumnos-resumen")
    public List<AsistenciaAlumnoResumenDTO> resumenPorAlumno(
            @PathVariable Long seccionId,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate from,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate to
    ) {
        return service.resumenPorAlumno(seccionId, from, to);
    }
}
package edu.ecep.base_app.rest;


@Controller
@RequiredArgsConstructor
@Slf4j
public class ChatSocketController {

    private final ChatService chatService;
    private final UsuarioService userService;

    @MessageMapping("/chat.send")
    @SendToUser("/queue/ack")
    public ChatMessageDTO send(
            @Payload SendMessageRequest req,
            Principal principal
    ) {
        Usuario em = userService.findById(Long.valueOf(principal.getName()));
        Mensaje saved = chatService.saveAndSend(req, em);
        return chatService.toDto(saved);
    }
}
package edu.ecep.base_app.rest;


@RestController
@RequestMapping("/api/actas-accidente")
@RequiredArgsConstructor
@Validated
public class ActaAccidenteController {
    private final ActaAccidenteService service;
    @GetMapping public List<ActaAccidenteDTO> list(){ return service.findAll(); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid ActaAccidenteCreateDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
    @PutMapping("/{id}")
    public ResponseEntity<Void> update(
            @PathVariable Long id,
            @RequestBody @Valid ActaAccidenteUpdateDTO dto
    ) {
        service.update(id, dto);
        return ResponseEntity.noContent().build(); // 204
    }

    // ELIMINAR
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Long id) {
        service.delete(id);
        return ResponseEntity.noContent().build(); // 204
    }

}package edu.ecep.base_app.rest;



@RestController @RequestMapping("/api/bajas")
@RequiredArgsConstructor @Validated
public class SolicitudBajaAlumnoController {
    private final SolicitudBajaAlumnoService service;
    @GetMapping public List<SolicitudBajaAlumnoDTO> list(){ return service.findAll(); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid SolicitudBajaAlumnoCreateDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
}package edu.ecep.base_app.rest;




@RestController
@RequestMapping("/api/asistencias/jornadas")
@RequiredArgsConstructor
@Validated
public class JornadaAsistenciaController {

    private final JornadaAsistenciaService service;

    // Listado simple
    @GetMapping
    public List<JornadaAsistenciaDTO> list() {
        return service.findAll();
    }

    // Búsqueda por sección + rango de fechas
    @GetMapping(params = {"seccionId","from","to"})
    public List<JornadaAsistenciaDTO> porSeccionYRango(
            @RequestParam Long seccionId,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate from,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate to) {
        return service.findBySeccionBetween(seccionId, from, to);
    }

    @GetMapping(params = {"seccionId","fecha"})
    public ResponseEntity<JornadaAsistenciaDTO> bySeccionFecha(
            @RequestParam Long seccionId,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate fecha) {
        return service.findBySeccionAndFecha(seccionId, fecha)
                .map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }


    // Búsqueda por sección
    @GetMapping(params = "seccionId")
    public List<JornadaAsistenciaDTO> porSeccion(@RequestParam Long seccionId) {
        return service.findBySeccion(seccionId);
    }

    // Búsqueda por trimestre
    @GetMapping(params = "trimestreId")
    public List<JornadaAsistenciaDTO> porTrimestre(@RequestParam Long trimestreId) {
        return service.findByTrimestre(trimestreId);
    }

    // Abrir jornada
    @PreAuthorize("hasAnyRole('ADMIN','DIRECTOR','TEACHER')")
    @PostMapping
    public ResponseEntity<Long> abrir(@RequestBody @Valid JornadaAsistenciaCreateDTO dto) {
        return new ResponseEntity<>(service.abrir(dto), HttpStatus.CREATED);
    }


    @GetMapping("/{id}")
    public JornadaAsistenciaDTO get(@PathVariable Long id) {
        return service.get(id);
    }
}
package edu.ecep.base_app.rest;



@RestController
@RequestMapping("/api/chat")
@RequiredArgsConstructor
@Slf4j
public class ChatController {

    private final ChatService chatService;
    private final UsuarioService usuarioService;
    private final SimpMessagingTemplate messagingTemplate;

    @GetMapping("/history/{otherUserId}")
    public ResponseEntity<List<ChatMessageDTO>> history(@PathVariable Long otherUserId) {
        try {
            Usuario me = usuarioService.getCurrent();
            List<ChatMessageDTO> messages = chatService.getHistory(me.getId(), otherUserId);
            return ResponseEntity.ok(messages);
        } catch (ResponseStatusException ex) {
            return ResponseEntity.status(ex.getStatusCode()).build();
        }
    }

    @PostMapping("/mark-read/{otherUserId}")
    public ResponseEntity<Void> markRead(@PathVariable Long otherUserId) {
        try {
            Usuario me = usuarioService.getCurrent();
            chatService.markRead(me.getId(), otherUserId);

            // Notificar al otro usuario que los mensajes fueron leídos
            messagingTemplate.convertAndSendToUser(
                    String.valueOf(otherUserId),
                    "/queue/read-receipts",
                    Map.of(
                            "readerId", me.getId(),
                            "timestamp", System.currentTimeMillis()
                    )
            );

            return ResponseEntity.noContent().build();
        } catch (ResponseStatusException ex) {
            return ResponseEntity.status(ex.getStatusCode()).build();
        }
    }

    @GetMapping("/active-chats")
    public ResponseEntity<List<UsuarioBusquedaDTO>> getActiveChats() {
        Usuario me = usuarioService.getCurrent();
        List<Usuario> activeUsers = chatService.getActiveChatUsers(me.getId());

        List<UsuarioBusquedaDTO> dtos = activeUsers.stream()
                .map(u -> usuarioService.buscarUsuarioBusquedaPorId(u.getId()))
                .toList();

        return ResponseEntity.ok(dtos);
    }

    // Nuevo endpoint para obtener mensajes no leídos
    @GetMapping("/unread-count")
    public ResponseEntity<Map<Long, Long>> getUnreadCounts() {
        try {
            Usuario me = usuarioService.getCurrent();
            Map<Long, Long> unreadCounts = chatService.getUnreadCounts(me.getId());
            return ResponseEntity.ok(unreadCounts);
        } catch (ResponseStatusException ex) {
            return ResponseEntity.status(ex.getStatusCode()).build();
        }
    }

    // Endpoint para obtener estado de conexión de usuarios
    @GetMapping("/online-status")
    public ResponseEntity<Map<Long, Boolean>> getOnlineStatus(@RequestParam List<Long> userIds) {
        try {
            Map<Long, Boolean> onlineStatus = chatService.getOnlineStatus(userIds);
            return ResponseEntity.ok(onlineStatus);
        } catch (Exception ex) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
}package edu.ecep.base_app.rest;



@RestController @RequestMapping("/api/resultados")
@RequiredArgsConstructor @Validated
public class ResultadoEvaluacionController {
    private final ResultadoEvaluacionService service;
    @GetMapping public List<ResultadoEvaluacionDTO> list(){ return service.findAll(); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid ResultadoEvaluacionCreateDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
}package edu.ecep.base_app.rest;







@RestController
@RequestMapping("/api/informes-inicial")
@RequiredArgsConstructor
@Validated
public class InformeInicialController {
    private final InformeInicialService service;
    @GetMapping public List<InformeInicialDTO> list(){ return service.findAll(); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid InformeInicialCreateDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
}package edu.ecep.base_app.rest;






@RestController @RequestMapping("/api/secciones")
@RequiredArgsConstructor @Validated
public class SeccionController {
    private final SeccionService service;
    private final MatriculaRepository matriculaRepository;
    private final AlumnoRepository alumnoRepository;
    private final MatriculaSeccionHistorialRepository mshRepo;

    @GetMapping public List<SeccionDTO> list(){ return service.findAll(); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid SeccionCreateDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
    @GetMapping("/{id}/alumnos")
    @Transactional(readOnly=true)
    public List<AlumnoLiteDTO> alumnosActivos(
            @PathVariable Long id,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate fecha) {

        LocalDate f = (fecha != null) ? fecha : LocalDate.now();
        var activos = mshRepo.findActivosBySeccionOnDate(id, f);

        return activos.stream().map(m -> {
            var matricula = matriculaRepository.findById(m.getMatricula().getId()).orElseThrow();
            var alumno = alumnoRepository.findById(matricula.getAlumno().getId()).orElseThrow();
            String nombre = Optional.ofNullable(alumno.getPersona())
                    .map(p -> (p.getApellido() != null ? p.getApellido() : "") +
                            ", " +
                            (p.getNombre() != null ? p.getNombre() : ""))
                    .orElse("#" + alumno.getId());
            return new AlumnoLiteDTO(matricula.getId(), alumno.getId(), nombre);
        }).toList();
    }
}package edu.ecep.base_app.rest;



@RestController
@RequestMapping("/api/alumnos-familiares")
@RequiredArgsConstructor
@Validated
public class AlumnoFamiliarController {

    private final AlumnoFamiliarService service;

    @GetMapping
    public List<AlumnoFamiliarDTO> list() {
        return service.findAll();
    }

    @GetMapping("/{id}")
    public AlumnoFamiliarDTO get(@PathVariable Long id) {
        return service.get(id);
    }

    @PostMapping
    public ResponseEntity<Long> create(@RequestBody @Valid AlumnoFamiliarCreateDTO dto) {
        Long id = service.create(dto);
        return new ResponseEntity<>(id, HttpStatus.CREATED);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Void> update(@PathVariable Long id, @RequestBody @Valid AlumnoFamiliarDTO dto) {
        service.update(id, dto);
        return ResponseEntity.noContent().build();
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Long id) {
        service.delete(id);
        return ResponseEntity.noContent().build();
    }
}package edu.ecep.base_app.rest;


@RestController
@RequestMapping("/api/secciones-materias")
@RequiredArgsConstructor
@Validated
public class SeccionMateriaController {
    private final SeccionMateriaService service;
    @GetMapping public List<SeccionMateriaDTO> list(){ return service.findAll(); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid SeccionMateriaCreateDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
}package edu.ecep.base_app.rest;




@RestController @RequestMapping("/api/materias")
@RequiredArgsConstructor @Validated
public class MateriaController {
    private final MateriaService service;
    @GetMapping public List<MateriaDTO> list(){ return service.findAll(); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid MateriaCreateDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
}package edu.ecep.base_app.rest;



@RestController @RequestMapping("/api/matriculas/historial")
@RequiredArgsConstructor @Validated
public class MatriculaSeccionHistorialController {
    private final MatriculaSeccionHistorialService service;
    @GetMapping public List<MatriculaSeccionHistorialDTO> list(){ return service.findAll(); }
    @PostMapping public ResponseEntity<Long> asignar(@RequestBody @Valid MatriculaSeccionHistorialCreateDTO dto){ return new ResponseEntity<>(service.asignar(dto), HttpStatus.CREATED); }
}package edu.ecep.base_app.rest;


@RestController @RequestMapping("/api/formaciones")
@RequiredArgsConstructor @Validated
public class FormacionAcademicaController {
    private final FormacionAcademicaService service;
    @GetMapping
    public List<FormacionAcademicaDTO> list(){ return service.findAll(); }
    @GetMapping("/{id}")
    public FormacionAcademicaDTO get(@PathVariable Long id){ return service.get(id); }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Long id){
        service.delete(id);
        return ResponseEntity.noContent().build();
    }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid FormacionAcademicaDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
    @PutMapping("/{id}") public ResponseEntity<Void> update(@PathVariable Long id, @RequestBody @Valid FormacionAcademicaDTO dto){ service.update(id, dto); return ResponseEntity.noContent().build(); }
}package edu.ecep.base_app.rest;


@RestController
@RequestMapping("/api/matriculas")
@RequiredArgsConstructor
@Validated
public class MatriculaController {
    private final MatriculaService service;
    @GetMapping public List<MatriculaDTO> list(){ return service.findAll(); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid MatriculaCreateDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
}package edu.ecep.base_app.rest;






@RestController
@RequestMapping("/api/recibos-sueldo")
@RequiredArgsConstructor
@Validated
public class ReciboSueldoController {
    private final ReciboSueldoService service;
    @GetMapping public List<ReciboSueldoDTO> list(){ return service.findAll(); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid ReciboSueldoCreateDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
}
package edu.ecep.base_app.rest;




@RestController
@RequestMapping("/api/familiares")
@RequiredArgsConstructor
@Validated
public class FamiliarController {
    private final FamiliarService service;
    private final AlumnoFamiliarRepository repoFam;
    private final MatriculaRepository matriculaRepo;

    @GetMapping public List<FamiliarDTO> list(){ return service.findAll(); }
    @GetMapping("/{id}") public FamiliarDTO get(@PathVariable Long id){ return service.get(id); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid FamiliarDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
    @PutMapping("/{id}") public ResponseEntity<Void> update(@PathVariable Long id, @RequestBody @Valid FamiliarDTO dto){ service.update(id, dto); return ResponseEntity.noContent().build(); }
    @DeleteMapping("/{id}") public ResponseEntity<Void> delete(@PathVariable Long id){ service.delete(id); return ResponseEntity.noContent().build(); }
    @GetMapping("/{familiarId}/alumnos")
    public List<AlumnoLiteDTO> alumnos(@PathVariable Long familiarId) {
        var alumnos = repoFam.findAlumnosByFamiliar(familiarId);

        // mapear a (matriculaId, alumnoId, nombre)
        return alumnos.stream().flatMap(al -> {
            var mats = matriculaRepo.findByAlumnoId(al.getId());
            var p = al.getPersona();
            String nombre = Optional.ofNullable(p)
                    .map(px -> (px.getApellido() != null ? px.getApellido() : "") +
                            (px.getNombre()   != null ? (", " + px.getNombre()) : ""))
                    .orElse("#" + al.getId());            return mats.stream().map(m -> new AlumnoLiteDTO(m.getId(), al.getId(), nombre));
        }).toList();
    }
}

package edu.ecep.base_app.rest;







@RestController
@RequestMapping("/api/cuotas")
@RequiredArgsConstructor
@Validated
public class CuotaController {
    private final CuotaService service;
    @GetMapping public List<CuotaDTO> list(){ return service.findAll(); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid CuotaCreateDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
}package edu.ecep.base_app.rest;




@RestController
@RequestMapping("/api/emisiones-cuota")
@RequiredArgsConstructor
@Validated
public class EmisionCuotaController {
    private final EmisionCuotaService service;
    @GetMapping public List<EmisionCuotaDTO> list(){ return service.findAll(); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid EmisionCuotaCreateDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
}package edu.ecep.base_app.rest;




@RestController
@RequestMapping("/api/solicitudes-admision")
@RequiredArgsConstructor
@Validated
public class SolicitudAdmisionController {
    private final SolicitudAdmisionService service;
    @GetMapping public List<SolicitudAdmisionDTO> list(){ return service.findAll(); }
    @GetMapping("/{id}") public SolicitudAdmisionDTO get(@PathVariable Long id){ return service.get(id); }
    @PostMapping public ResponseEntity<Long> create(@RequestBody @Valid SolicitudAdmisionDTO dto){ return new ResponseEntity<>(service.create(dto), HttpStatus.CREATED); }
    @PutMapping("/{id}") public ResponseEntity<Void> update(@PathVariable Long id, @RequestBody @Valid SolicitudAdmisionDTO dto){ service.update(id, dto); return ResponseEntity.noContent().build(); }
    @DeleteMapping("/{id}") public ResponseEntity<Void> delete(@PathVariable Long id){ service.delete(id); return ResponseEntity.noContent().build(); }
}
